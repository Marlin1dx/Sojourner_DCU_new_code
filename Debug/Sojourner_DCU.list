
Sojourner_DCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c410  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000900  0800c520  0800c520  0000d520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ce20  0800ce20  0000e344  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ce20  0800ce20  0000de20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ce28  0800ce28  0000e344  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ce28  0800ce28  0000de28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ce2c  0800ce2c  0000de2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000344  20000000  0800ce30  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ddc  20000344  0800d174  0000e344  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002120  0800d174  0000f120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e344  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029554  00000000  00000000  0000e36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065c1  00000000  00000000  000378c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0001046d  00000000  00000000  0003de82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001878  00000000  00000000  0004e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b2b  00000000  00000000  0004fb68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e73f  00000000  00000000  00051693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002cbed  00000000  00000000  0006fdd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009afb4  00000000  00000000  0009c9bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137973  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005684  00000000  00000000  001379b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  0013d03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000344 	.word	0x20000344
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c508 	.word	0x0800c508

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000348 	.word	0x20000348
 800014c:	0800c508 	.word	0x0800c508

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_d2uiz>:
 8000a20:	004a      	lsls	r2, r1, #1
 8000a22:	d211      	bcs.n	8000a48 <__aeabi_d2uiz+0x28>
 8000a24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a28:	d211      	bcs.n	8000a4e <__aeabi_d2uiz+0x2e>
 8000a2a:	d50d      	bpl.n	8000a48 <__aeabi_d2uiz+0x28>
 8000a2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a34:	d40e      	bmi.n	8000a54 <__aeabi_d2uiz+0x34>
 8000a36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	4770      	bx	lr
 8000a48:	f04f 0000 	mov.w	r0, #0
 8000a4c:	4770      	bx	lr
 8000a4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a52:	d102      	bne.n	8000a5a <__aeabi_d2uiz+0x3a>
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	4770      	bx	lr
 8000a5a:	f04f 0000 	mov.w	r0, #0
 8000a5e:	4770      	bx	lr

08000a60 <__aeabi_d2f>:
 8000a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a68:	bf24      	itt	cs
 8000a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a72:	d90d      	bls.n	8000a90 <__aeabi_d2f+0x30>
 8000a74:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a80:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a94:	d121      	bne.n	8000ada <__aeabi_d2f+0x7a>
 8000a96:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a9a:	bfbc      	itt	lt
 8000a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	4770      	bxlt	lr
 8000aa2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aaa:	f1c2 0218 	rsb	r2, r2, #24
 8000aae:	f1c2 0c20 	rsb	ip, r2, #32
 8000ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8000aba:	bf18      	it	ne
 8000abc:	f040 0001 	orrne.w	r0, r0, #1
 8000ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000acc:	ea40 000c 	orr.w	r0, r0, ip
 8000ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad8:	e7cc      	b.n	8000a74 <__aeabi_d2f+0x14>
 8000ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ade:	d107      	bne.n	8000af0 <__aeabi_d2f+0x90>
 8000ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae4:	bf1e      	ittt	ne
 8000ae6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aea:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aee:	4770      	bxne	lr
 8000af0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000af4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000af8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_frsub>:
 8000b00:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b04:	e002      	b.n	8000b0c <__addsf3>
 8000b06:	bf00      	nop

08000b08 <__aeabi_fsub>:
 8000b08:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b0c <__addsf3>:
 8000b0c:	0042      	lsls	r2, r0, #1
 8000b0e:	bf1f      	itttt	ne
 8000b10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b14:	ea92 0f03 	teqne	r2, r3
 8000b18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b20:	d06a      	beq.n	8000bf8 <__addsf3+0xec>
 8000b22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b2a:	bfc1      	itttt	gt
 8000b2c:	18d2      	addgt	r2, r2, r3
 8000b2e:	4041      	eorgt	r1, r0
 8000b30:	4048      	eorgt	r0, r1
 8000b32:	4041      	eorgt	r1, r0
 8000b34:	bfb8      	it	lt
 8000b36:	425b      	neglt	r3, r3
 8000b38:	2b19      	cmp	r3, #25
 8000b3a:	bf88      	it	hi
 8000b3c:	4770      	bxhi	lr
 8000b3e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b42:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b46:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b56:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b5a:	bf18      	it	ne
 8000b5c:	4249      	negne	r1, r1
 8000b5e:	ea92 0f03 	teq	r2, r3
 8000b62:	d03f      	beq.n	8000be4 <__addsf3+0xd8>
 8000b64:	f1a2 0201 	sub.w	r2, r2, #1
 8000b68:	fa41 fc03 	asr.w	ip, r1, r3
 8000b6c:	eb10 000c 	adds.w	r0, r0, ip
 8000b70:	f1c3 0320 	rsb	r3, r3, #32
 8000b74:	fa01 f103 	lsl.w	r1, r1, r3
 8000b78:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b7c:	d502      	bpl.n	8000b84 <__addsf3+0x78>
 8000b7e:	4249      	negs	r1, r1
 8000b80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b84:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b88:	d313      	bcc.n	8000bb2 <__addsf3+0xa6>
 8000b8a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b8e:	d306      	bcc.n	8000b9e <__addsf3+0x92>
 8000b90:	0840      	lsrs	r0, r0, #1
 8000b92:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b96:	f102 0201 	add.w	r2, r2, #1
 8000b9a:	2afe      	cmp	r2, #254	@ 0xfe
 8000b9c:	d251      	bcs.n	8000c42 <__addsf3+0x136>
 8000b9e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ba6:	bf08      	it	eq
 8000ba8:	f020 0001 	biceq.w	r0, r0, #1
 8000bac:	ea40 0003 	orr.w	r0, r0, r3
 8000bb0:	4770      	bx	lr
 8000bb2:	0049      	lsls	r1, r1, #1
 8000bb4:	eb40 0000 	adc.w	r0, r0, r0
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	bf28      	it	cs
 8000bbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bc0:	d2ed      	bcs.n	8000b9e <__addsf3+0x92>
 8000bc2:	fab0 fc80 	clz	ip, r0
 8000bc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bca:	ebb2 020c 	subs.w	r2, r2, ip
 8000bce:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bd2:	bfaa      	itet	ge
 8000bd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bd8:	4252      	neglt	r2, r2
 8000bda:	4318      	orrge	r0, r3
 8000bdc:	bfbc      	itt	lt
 8000bde:	40d0      	lsrlt	r0, r2
 8000be0:	4318      	orrlt	r0, r3
 8000be2:	4770      	bx	lr
 8000be4:	f092 0f00 	teq	r2, #0
 8000be8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bec:	bf06      	itte	eq
 8000bee:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bf2:	3201      	addeq	r2, #1
 8000bf4:	3b01      	subne	r3, #1
 8000bf6:	e7b5      	b.n	8000b64 <__addsf3+0x58>
 8000bf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c00:	bf18      	it	ne
 8000c02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c06:	d021      	beq.n	8000c4c <__addsf3+0x140>
 8000c08:	ea92 0f03 	teq	r2, r3
 8000c0c:	d004      	beq.n	8000c18 <__addsf3+0x10c>
 8000c0e:	f092 0f00 	teq	r2, #0
 8000c12:	bf08      	it	eq
 8000c14:	4608      	moveq	r0, r1
 8000c16:	4770      	bx	lr
 8000c18:	ea90 0f01 	teq	r0, r1
 8000c1c:	bf1c      	itt	ne
 8000c1e:	2000      	movne	r0, #0
 8000c20:	4770      	bxne	lr
 8000c22:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c26:	d104      	bne.n	8000c32 <__addsf3+0x126>
 8000c28:	0040      	lsls	r0, r0, #1
 8000c2a:	bf28      	it	cs
 8000c2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c30:	4770      	bx	lr
 8000c32:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c36:	bf3c      	itt	cc
 8000c38:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c3c:	4770      	bxcc	lr
 8000c3e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c42:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4a:	4770      	bx	lr
 8000c4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c50:	bf16      	itet	ne
 8000c52:	4608      	movne	r0, r1
 8000c54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c58:	4601      	movne	r1, r0
 8000c5a:	0242      	lsls	r2, r0, #9
 8000c5c:	bf06      	itte	eq
 8000c5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c62:	ea90 0f01 	teqeq	r0, r1
 8000c66:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c6a:	4770      	bx	lr

08000c6c <__aeabi_ui2f>:
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e004      	b.n	8000c7c <__aeabi_i2f+0x8>
 8000c72:	bf00      	nop

08000c74 <__aeabi_i2f>:
 8000c74:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c78:	bf48      	it	mi
 8000c7a:	4240      	negmi	r0, r0
 8000c7c:	ea5f 0c00 	movs.w	ip, r0
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c88:	4601      	mov	r1, r0
 8000c8a:	f04f 0000 	mov.w	r0, #0
 8000c8e:	e01c      	b.n	8000cca <__aeabi_l2f+0x2a>

08000c90 <__aeabi_ul2f>:
 8000c90:	ea50 0201 	orrs.w	r2, r0, r1
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f04f 0300 	mov.w	r3, #0
 8000c9c:	e00a      	b.n	8000cb4 <__aeabi_l2f+0x14>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_l2f>:
 8000ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca4:	bf08      	it	eq
 8000ca6:	4770      	bxeq	lr
 8000ca8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cac:	d502      	bpl.n	8000cb4 <__aeabi_l2f+0x14>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	ea5f 0c01 	movs.w	ip, r1
 8000cb8:	bf02      	ittt	eq
 8000cba:	4684      	moveq	ip, r0
 8000cbc:	4601      	moveq	r1, r0
 8000cbe:	2000      	moveq	r0, #0
 8000cc0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cc4:	bf08      	it	eq
 8000cc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cca:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cce:	fabc f28c 	clz	r2, ip
 8000cd2:	3a08      	subs	r2, #8
 8000cd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cd8:	db10      	blt.n	8000cfc <__aeabi_l2f+0x5c>
 8000cda:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cde:	4463      	add	r3, ip
 8000ce0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ce4:	f1c2 0220 	rsb	r2, r2, #32
 8000ce8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cec:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf0:	eb43 0002 	adc.w	r0, r3, r2
 8000cf4:	bf08      	it	eq
 8000cf6:	f020 0001 	biceq.w	r0, r0, #1
 8000cfa:	4770      	bx	lr
 8000cfc:	f102 0220 	add.w	r2, r2, #32
 8000d00:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d0c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d1a:	4770      	bx	lr

08000d1c <__aeabi_fmul>:
 8000d1c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d24:	bf1e      	ittt	ne
 8000d26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2a:	ea92 0f0c 	teqne	r2, ip
 8000d2e:	ea93 0f0c 	teqne	r3, ip
 8000d32:	d06f      	beq.n	8000e14 <__aeabi_fmul+0xf8>
 8000d34:	441a      	add	r2, r3
 8000d36:	ea80 0c01 	eor.w	ip, r0, r1
 8000d3a:	0240      	lsls	r0, r0, #9
 8000d3c:	bf18      	it	ne
 8000d3e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d42:	d01e      	beq.n	8000d82 <__aeabi_fmul+0x66>
 8000d44:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d48:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d4c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d50:	fba0 3101 	umull	r3, r1, r0, r1
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d58:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d5c:	bf3e      	ittt	cc
 8000d5e:	0049      	lslcc	r1, r1, #1
 8000d60:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d64:	005b      	lslcc	r3, r3, #1
 8000d66:	ea40 0001 	orr.w	r0, r0, r1
 8000d6a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d6e:	2afd      	cmp	r2, #253	@ 0xfd
 8000d70:	d81d      	bhi.n	8000dae <__aeabi_fmul+0x92>
 8000d72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7a:	bf08      	it	eq
 8000d7c:	f020 0001 	biceq.w	r0, r0, #1
 8000d80:	4770      	bx	lr
 8000d82:	f090 0f00 	teq	r0, #0
 8000d86:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d8a:	bf08      	it	eq
 8000d8c:	0249      	lsleq	r1, r1, #9
 8000d8e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d92:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d96:	3a7f      	subs	r2, #127	@ 0x7f
 8000d98:	bfc2      	ittt	gt
 8000d9a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d9e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000da2:	4770      	bxgt	lr
 8000da4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da8:	f04f 0300 	mov.w	r3, #0
 8000dac:	3a01      	subs	r2, #1
 8000dae:	dc5d      	bgt.n	8000e6c <__aeabi_fmul+0x150>
 8000db0:	f112 0f19 	cmn.w	r2, #25
 8000db4:	bfdc      	itt	le
 8000db6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dba:	4770      	bxle	lr
 8000dbc:	f1c2 0200 	rsb	r2, r2, #0
 8000dc0:	0041      	lsls	r1, r0, #1
 8000dc2:	fa21 f102 	lsr.w	r1, r1, r2
 8000dc6:	f1c2 0220 	rsb	r2, r2, #32
 8000dca:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dce:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dd2:	f140 0000 	adc.w	r0, r0, #0
 8000dd6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dda:	bf08      	it	eq
 8000ddc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000de0:	4770      	bx	lr
 8000de2:	f092 0f00 	teq	r2, #0
 8000de6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0040      	lsleq	r0, r0, #1
 8000dee:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000df2:	3a01      	subeq	r2, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fmul+0xce>
 8000df6:	ea40 000c 	orr.w	r0, r0, ip
 8000dfa:	f093 0f00 	teq	r3, #0
 8000dfe:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0049      	lsleq	r1, r1, #1
 8000e06:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e0a:	3b01      	subeq	r3, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xe6>
 8000e0e:	ea41 010c 	orr.w	r1, r1, ip
 8000e12:	e78f      	b.n	8000d34 <__aeabi_fmul+0x18>
 8000e14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	bf18      	it	ne
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d00a      	beq.n	8000e3a <__aeabi_fmul+0x11e>
 8000e24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e28:	bf18      	it	ne
 8000e2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e2e:	d1d8      	bne.n	8000de2 <__aeabi_fmul+0xc6>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e38:	4770      	bx	lr
 8000e3a:	f090 0f00 	teq	r0, #0
 8000e3e:	bf17      	itett	ne
 8000e40:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e44:	4608      	moveq	r0, r1
 8000e46:	f091 0f00 	teqne	r1, #0
 8000e4a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e4e:	d014      	beq.n	8000e7a <__aeabi_fmul+0x15e>
 8000e50:	ea92 0f0c 	teq	r2, ip
 8000e54:	d101      	bne.n	8000e5a <__aeabi_fmul+0x13e>
 8000e56:	0242      	lsls	r2, r0, #9
 8000e58:	d10f      	bne.n	8000e7a <__aeabi_fmul+0x15e>
 8000e5a:	ea93 0f0c 	teq	r3, ip
 8000e5e:	d103      	bne.n	8000e68 <__aeabi_fmul+0x14c>
 8000e60:	024b      	lsls	r3, r1, #9
 8000e62:	bf18      	it	ne
 8000e64:	4608      	movne	r0, r1
 8000e66:	d108      	bne.n	8000e7a <__aeabi_fmul+0x15e>
 8000e68:	ea80 0001 	eor.w	r0, r0, r1
 8000e6c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e78:	4770      	bx	lr
 8000e7a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e7e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e82:	4770      	bx	lr

08000e84 <__aeabi_fdiv>:
 8000e84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e8c:	bf1e      	ittt	ne
 8000e8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e92:	ea92 0f0c 	teqne	r2, ip
 8000e96:	ea93 0f0c 	teqne	r3, ip
 8000e9a:	d069      	beq.n	8000f70 <__aeabi_fdiv+0xec>
 8000e9c:	eba2 0203 	sub.w	r2, r2, r3
 8000ea0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ea4:	0249      	lsls	r1, r1, #9
 8000ea6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eaa:	d037      	beq.n	8000f1c <__aeabi_fdiv+0x98>
 8000eac:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eb0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000eb4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000eb8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	bf38      	it	cc
 8000ec0:	005b      	lslcc	r3, r3, #1
 8000ec2:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000ec6:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	bf24      	itt	cs
 8000ece:	1a5b      	subcs	r3, r3, r1
 8000ed0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ed4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ed8:	bf24      	itt	cs
 8000eda:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ede:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ee2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ee6:	bf24      	itt	cs
 8000ee8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ef0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ef4:	bf24      	itt	cs
 8000ef6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000efa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000efe:	011b      	lsls	r3, r3, #4
 8000f00:	bf18      	it	ne
 8000f02:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f06:	d1e0      	bne.n	8000eca <__aeabi_fdiv+0x46>
 8000f08:	2afd      	cmp	r2, #253	@ 0xfd
 8000f0a:	f63f af50 	bhi.w	8000dae <__aeabi_fmul+0x92>
 8000f0e:	428b      	cmp	r3, r1
 8000f10:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f14:	bf08      	it	eq
 8000f16:	f020 0001 	biceq.w	r0, r0, #1
 8000f1a:	4770      	bx	lr
 8000f1c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f20:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f24:	327f      	adds	r2, #127	@ 0x7f
 8000f26:	bfc2      	ittt	gt
 8000f28:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f2c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f30:	4770      	bxgt	lr
 8000f32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	3a01      	subs	r2, #1
 8000f3c:	e737      	b.n	8000dae <__aeabi_fmul+0x92>
 8000f3e:	f092 0f00 	teq	r2, #0
 8000f42:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f46:	bf02      	ittt	eq
 8000f48:	0040      	lsleq	r0, r0, #1
 8000f4a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f4e:	3a01      	subeq	r2, #1
 8000f50:	d0f9      	beq.n	8000f46 <__aeabi_fdiv+0xc2>
 8000f52:	ea40 000c 	orr.w	r0, r0, ip
 8000f56:	f093 0f00 	teq	r3, #0
 8000f5a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0049      	lsleq	r1, r1, #1
 8000f62:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f66:	3b01      	subeq	r3, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xda>
 8000f6a:	ea41 010c 	orr.w	r1, r1, ip
 8000f6e:	e795      	b.n	8000e9c <__aeabi_fdiv+0x18>
 8000f70:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f74:	ea92 0f0c 	teq	r2, ip
 8000f78:	d108      	bne.n	8000f8c <__aeabi_fdiv+0x108>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	f47f af7d 	bne.w	8000e7a <__aeabi_fmul+0x15e>
 8000f80:	ea93 0f0c 	teq	r3, ip
 8000f84:	f47f af70 	bne.w	8000e68 <__aeabi_fmul+0x14c>
 8000f88:	4608      	mov	r0, r1
 8000f8a:	e776      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000f8c:	ea93 0f0c 	teq	r3, ip
 8000f90:	d104      	bne.n	8000f9c <__aeabi_fdiv+0x118>
 8000f92:	024b      	lsls	r3, r1, #9
 8000f94:	f43f af4c 	beq.w	8000e30 <__aeabi_fmul+0x114>
 8000f98:	4608      	mov	r0, r1
 8000f9a:	e76e      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000f9c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fa0:	bf18      	it	ne
 8000fa2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fa6:	d1ca      	bne.n	8000f3e <__aeabi_fdiv+0xba>
 8000fa8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fac:	f47f af5c 	bne.w	8000e68 <__aeabi_fmul+0x14c>
 8000fb0:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fb4:	f47f af3c 	bne.w	8000e30 <__aeabi_fmul+0x114>
 8000fb8:	e75f      	b.n	8000e7a <__aeabi_fmul+0x15e>
 8000fba:	bf00      	nop

08000fbc <__gesf2>:
 8000fbc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fc0:	e006      	b.n	8000fd0 <__cmpsf2+0x4>
 8000fc2:	bf00      	nop

08000fc4 <__lesf2>:
 8000fc4:	f04f 0c01 	mov.w	ip, #1
 8000fc8:	e002      	b.n	8000fd0 <__cmpsf2+0x4>
 8000fca:	bf00      	nop

08000fcc <__cmpsf2>:
 8000fcc:	f04f 0c01 	mov.w	ip, #1
 8000fd0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fd4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe0:	bf18      	it	ne
 8000fe2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fe6:	d011      	beq.n	800100c <__cmpsf2+0x40>
 8000fe8:	b001      	add	sp, #4
 8000fea:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fee:	bf18      	it	ne
 8000ff0:	ea90 0f01 	teqne	r0, r1
 8000ff4:	bf58      	it	pl
 8000ff6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ffa:	bf88      	it	hi
 8000ffc:	17c8      	asrhi	r0, r1, #31
 8000ffe:	bf38      	it	cc
 8001000:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001004:	bf18      	it	ne
 8001006:	f040 0001 	orrne.w	r0, r0, #1
 800100a:	4770      	bx	lr
 800100c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001010:	d102      	bne.n	8001018 <__cmpsf2+0x4c>
 8001012:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001016:	d105      	bne.n	8001024 <__cmpsf2+0x58>
 8001018:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800101c:	d1e4      	bne.n	8000fe8 <__cmpsf2+0x1c>
 800101e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001022:	d0e1      	beq.n	8000fe8 <__cmpsf2+0x1c>
 8001024:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__aeabi_cfrcmple>:
 800102c:	4684      	mov	ip, r0
 800102e:	4608      	mov	r0, r1
 8001030:	4661      	mov	r1, ip
 8001032:	e7ff      	b.n	8001034 <__aeabi_cfcmpeq>

08001034 <__aeabi_cfcmpeq>:
 8001034:	b50f      	push	{r0, r1, r2, r3, lr}
 8001036:	f7ff ffc9 	bl	8000fcc <__cmpsf2>
 800103a:	2800      	cmp	r0, #0
 800103c:	bf48      	it	mi
 800103e:	f110 0f00 	cmnmi.w	r0, #0
 8001042:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001044 <__aeabi_fcmpeq>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff fff4 	bl	8001034 <__aeabi_cfcmpeq>
 800104c:	bf0c      	ite	eq
 800104e:	2001      	moveq	r0, #1
 8001050:	2000      	movne	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmplt>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffea 	bl	8001034 <__aeabi_cfcmpeq>
 8001060:	bf34      	ite	cc
 8001062:	2001      	movcc	r0, #1
 8001064:	2000      	movcs	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmple>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffe0 	bl	8001034 <__aeabi_cfcmpeq>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpge>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffd2 	bl	800102c <__aeabi_cfrcmple>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpgt>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffc8 	bl	800102c <__aeabi_cfrcmple>
 800109c:	bf34      	ite	cc
 800109e:	2001      	movcc	r0, #1
 80010a0:	2000      	movcs	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpun>:
 80010a8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010b4:	d102      	bne.n	80010bc <__aeabi_fcmpun+0x14>
 80010b6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ba:	d108      	bne.n	80010ce <__aeabi_fcmpun+0x26>
 80010bc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010c0:	d102      	bne.n	80010c8 <__aeabi_fcmpun+0x20>
 80010c2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010c6:	d102      	bne.n	80010ce <__aeabi_fcmpun+0x26>
 80010c8:	f04f 0000 	mov.w	r0, #0
 80010cc:	4770      	bx	lr
 80010ce:	f04f 0001 	mov.w	r0, #1
 80010d2:	4770      	bx	lr

080010d4 <__aeabi_f2iz>:
 80010d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010dc:	d30f      	bcc.n	80010fe <__aeabi_f2iz+0x2a>
 80010de:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e6:	d90d      	bls.n	8001104 <__aeabi_f2iz+0x30>
 80010e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010f0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010f4:	fa23 f002 	lsr.w	r0, r3, r2
 80010f8:	bf18      	it	ne
 80010fa:	4240      	negne	r0, r0
 80010fc:	4770      	bx	lr
 80010fe:	f04f 0000 	mov.w	r0, #0
 8001102:	4770      	bx	lr
 8001104:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001108:	d101      	bne.n	800110e <__aeabi_f2iz+0x3a>
 800110a:	0242      	lsls	r2, r0, #9
 800110c:	d105      	bne.n	800111a <__aeabi_f2iz+0x46>
 800110e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8001112:	bf08      	it	eq
 8001114:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001118:	4770      	bx	lr
 800111a:	f04f 0000 	mov.w	r0, #0
 800111e:	4770      	bx	lr

08001120 <__aeabi_d2lz>:
 8001120:	b538      	push	{r3, r4, r5, lr}
 8001122:	2200      	movs	r2, #0
 8001124:	2300      	movs	r3, #0
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	f7ff fc51 	bl	80009d0 <__aeabi_dcmplt>
 800112e:	b928      	cbnz	r0, 800113c <__aeabi_d2lz+0x1c>
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001138:	f000 b80a 	b.w	8001150 <__aeabi_d2ulz>
 800113c:	4620      	mov	r0, r4
 800113e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001142:	f000 f805 	bl	8001150 <__aeabi_d2ulz>
 8001146:	4240      	negs	r0, r0
 8001148:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800114c:	bd38      	pop	{r3, r4, r5, pc}
 800114e:	bf00      	nop

08001150 <__aeabi_d2ulz>:
 8001150:	b5d0      	push	{r4, r6, r7, lr}
 8001152:	2200      	movs	r2, #0
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <__aeabi_d2ulz+0x34>)
 8001156:	4606      	mov	r6, r0
 8001158:	460f      	mov	r7, r1
 800115a:	f7ff f9c7 	bl	80004ec <__aeabi_dmul>
 800115e:	f7ff fc5f 	bl	8000a20 <__aeabi_d2uiz>
 8001162:	4604      	mov	r4, r0
 8001164:	f7ff f948 	bl	80003f8 <__aeabi_ui2d>
 8001168:	2200      	movs	r2, #0
 800116a:	4b07      	ldr	r3, [pc, #28]	@ (8001188 <__aeabi_d2ulz+0x38>)
 800116c:	f7ff f9be 	bl	80004ec <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4630      	mov	r0, r6
 8001176:	4639      	mov	r1, r7
 8001178:	f7ff f800 	bl	800017c <__aeabi_dsub>
 800117c:	f7ff fc50 	bl	8000a20 <__aeabi_d2uiz>
 8001180:	4621      	mov	r1, r4
 8001182:	bdd0      	pop	{r4, r6, r7, pc}
 8001184:	3df00000 	.word	0x3df00000
 8001188:	41f00000 	.word	0x41f00000

0800118c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800118c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800118e:	4811      	ldr	r0, [pc, #68]	@ (80011d4 <MX_ADC1_Init+0x48>)
 8001190:	4a11      	ldr	r2, [pc, #68]	@ (80011d8 <MX_ADC1_Init+0x4c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8001192:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001194:	2401      	movs	r4, #1
  hadc1.Instance = ADC1;
 8001196:	6002      	str	r2, [r0, #0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001198:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800119c:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80011a0:	9303      	str	r3, [sp, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011a2:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011a4:	7304      	strb	r4, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011a6:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a8:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011aa:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 80011ac:	6104      	str	r4, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ae:	f001 fe47 	bl	8002e40 <HAL_ADC_Init>
 80011b2:	b108      	cbz	r0, 80011b8 <MX_ADC1_Init+0x2c>
  {
    Error_Handler();
 80011b4:	f000 fe96 	bl	8001ee4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011b8:	2304      	movs	r3, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011be:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	4804      	ldr	r0, [pc, #16]	@ (80011d4 <MX_ADC1_Init+0x48>)
 80011c2:	a901      	add	r1, sp, #4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80011c4:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c6:	f001 fc6b 	bl	8002aa0 <HAL_ADC_ConfigChannel>
 80011ca:	b108      	cbz	r0, 80011d0 <MX_ADC1_Init+0x44>
  {
    Error_Handler();
 80011cc:	f000 fe8a 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d0:	b004      	add	sp, #16
 80011d2:	bd10      	pop	{r4, pc}
 80011d4:	20000360 	.word	0x20000360
 80011d8:	40012400 	.word	0x40012400

080011dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011dc:	b510      	push	{r4, lr}
 80011de:	4604      	mov	r4, r0
 80011e0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	2210      	movs	r2, #16
 80011e4:	2100      	movs	r1, #0
 80011e6:	a802      	add	r0, sp, #8
 80011e8:	f008 f8c9 	bl	800937e <memset>
  if(adcHandle->Instance==ADC1)
 80011ec:	6822      	ldr	r2, [r4, #0]
 80011ee:	4b14      	ldr	r3, [pc, #80]	@ (8001240 <HAL_ADC_MspInit+0x64>)
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d123      	bne.n	800123c <HAL_ADC_MspInit+0x60>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80011f8:	699a      	ldr	r2, [r3, #24]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fa:	2403      	movs	r4, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001200:	619a      	str	r2, [r3, #24]
 8001202:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	480f      	ldr	r0, [pc, #60]	@ (8001244 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001206:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800120a:	9200      	str	r2, [sp, #0]
 800120c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	f042 0204 	orr.w	r2, r2, #4
 8001216:	619a      	str	r2, [r3, #24]
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	f003 0304 	and.w	r3, r3, #4
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001222:	23f0      	movs	r3, #240	@ 0xf0
 8001224:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001228:	f001 ffae 	bl	8003188 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 800122c:	2012      	movs	r0, #18
 800122e:	2200      	movs	r2, #0
 8001230:	4621      	mov	r1, r4
 8001232:	f001 feb1 	bl	8002f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001236:	2012      	movs	r0, #18
 8001238:	f001 fede 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800123c:	b006      	add	sp, #24
 800123e:	bd10      	pop	{r4, pc}
 8001240:	40012400 	.word	0x40012400
 8001244:	40010800 	.word	0x40010800

08001248 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	2210      	movs	r2, #16
{
 800124a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800124e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	eb0d 0002 	add.w	r0, sp, r2
 8001254:	2100      	movs	r1, #0
 8001256:	f008 f892 	bl	800937e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800125a:	4b22      	ldr	r3, [pc, #136]	@ (80012e4 <MX_GPIO_Init+0x9c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800125c:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80012e8 <MX_GPIO_Init+0xa0>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001260:	699a      	ldr	r2, [r3, #24]
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001262:	4c22      	ldr	r4, [pc, #136]	@ (80012ec <MX_GPIO_Init+0xa4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001264:	f042 0220 	orr.w	r2, r2, #32
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800126c:	4640      	mov	r0, r8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800126e:	f002 0220 	and.w	r2, r2, #32
 8001272:	9201      	str	r2, [sp, #4]
 8001274:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001278:	f64f 0130 	movw	r1, #63536	@ 0xf830
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	f042 0204 	orr.w	r2, r2, #4
 8001280:	619a      	str	r2, [r3, #24]
 8001282:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pins : PB11 PB12 PB13 PB14
                           PB15 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	f002 0204 	and.w	r2, r2, #4
 800128a:	9202      	str	r2, [sp, #8]
 800128c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001290:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	f042 0208 	orr.w	r2, r2, #8
 8001296:	619a      	str	r2, [r3, #24]
 8001298:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 800129a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129c:	f003 0308 	and.w	r3, r3, #8
 80012a0:	9303      	str	r3, [sp, #12]
 80012a2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80012a4:	f002 f844 	bl	8003330 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80012a8:	2200      	movs	r2, #0
 80012aa:	4620      	mov	r0, r4
 80012ac:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80012b0:	f002 f83e 	bl	8003330 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	f64f 0330 	movw	r3, #63536	@ 0xf830
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	4640      	mov	r0, r8
 80012bc:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012be:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c6:	f001 ff5f 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ce:	4620      	mov	r0, r4
 80012d0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d2:	e9cd 3704 	strd	r3, r7, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	e9cd 6506 	strd	r6, r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f001 ff55 	bl	8003188 <HAL_GPIO_Init>

}
 80012de:	b008      	add	sp, #32
 80012e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40010c00 	.word	0x40010c00
 80012ec:	40010800 	.word	0x40010800

080012f0 <HAL_UART_RxCpltCallback>:
        }
    }
}

// Обработчик прерывания UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(huart->Instance == USART2) {
 80012f2:	4b83      	ldr	r3, [pc, #524]	@ (8001500 <HAL_UART_RxCpltCallback+0x210>)
 80012f4:	6802      	ldr	r2, [r0, #0]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	f040 81cd 	bne.w	8001696 <HAL_UART_RxCpltCallback+0x3a6>
        // Добавляем символ в буфер
        if(buffer_index < GPS_BUFFER_SIZE - 1) {
 80012fc:	4d81      	ldr	r5, [pc, #516]	@ (8001504 <HAL_UART_RxCpltCallback+0x214>)
 80012fe:	882a      	ldrh	r2, [r5, #0]
 8001300:	2afe      	cmp	r2, #254	@ 0xfe
 8001302:	f200 80ec 	bhi.w	80014de <HAL_UART_RxCpltCallback+0x1ee>
            gps_buffer[buffer_index++] = gps_buffer[0];
 8001306:	4880      	ldr	r0, [pc, #512]	@ (8001508 <HAL_UART_RxCpltCallback+0x218>)
 8001308:	1c53      	adds	r3, r2, #1
 800130a:	7801      	ldrb	r1, [r0, #0]
 800130c:	b29b      	uxth	r3, r3
            
            // Проверяем на конец строки
            if(gps_buffer[0] == '\n') {
 800130e:	290a      	cmp	r1, #10
            gps_buffer[buffer_index++] = gps_buffer[0];
 8001310:	802b      	strh	r3, [r5, #0]
 8001312:	5481      	strb	r1, [r0, r2]
            if(gps_buffer[0] == '\n') {
 8001314:	f040 80e5 	bne.w	80014e2 <HAL_UART_RxCpltCallback+0x1f2>
                gps_buffer[buffer_index] = '\0';
 8001318:	2200      	movs	r2, #0
    token = strtok_r(rest, ",", &rest);
 800131a:	497c      	ldr	r1, [pc, #496]	@ (800150c <HAL_UART_RxCpltCallback+0x21c>)
                gps_buffer[buffer_index] = '\0';
 800131c:	54c2      	strb	r2, [r0, r3]
    token = strtok_r(rest, ",", &rest);
 800131e:	aa01      	add	r2, sp, #4
    char* rest = (char*)sentence;
 8001320:	9001      	str	r0, [sp, #4]
    token = strtok_r(rest, ",", &rest);
 8001322:	f008 f86e 	bl	8009402 <strtok_r>
    if(strcmp(token, "$GPRMC") == 0) {
 8001326:	497a      	ldr	r1, [pc, #488]	@ (8001510 <HAL_UART_RxCpltCallback+0x220>)
    token = strtok_r(rest, ",", &rest);
 8001328:	4604      	mov	r4, r0
    if(strcmp(token, "$GPRMC") == 0) {
 800132a:	f7fe ff11 	bl	8000150 <strcmp>
 800132e:	2800      	cmp	r0, #0
 8001330:	f040 80f8 	bne.w	8001524 <HAL_UART_RxCpltCallback+0x234>
        token = strtok_r(NULL, ",", &rest);
 8001334:	4975      	ldr	r1, [pc, #468]	@ (800150c <HAL_UART_RxCpltCallback+0x21c>)
 8001336:	aa01      	add	r2, sp, #4
 8001338:	f008 f863 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 800133c:	7803      	ldrb	r3, [r0, #0]
 800133e:	4c75      	ldr	r4, [pc, #468]	@ (8001514 <HAL_UART_RxCpltCallback+0x224>)
 8001340:	b1cb      	cbz	r3, 8001376 <HAL_UART_RxCpltCallback+0x86>
            gps_data.hour = (token[0] - '0') * 10 + (token[1] - '0');
 8001342:	7842      	ldrb	r2, [r0, #1]
 8001344:	3b30      	subs	r3, #48	@ 0x30
 8001346:	3a30      	subs	r2, #48	@ 0x30
 8001348:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800134c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001350:	75a3      	strb	r3, [r4, #22]
            gps_data.minute = (token[2] - '0') * 10 + (token[3] - '0');
 8001352:	7883      	ldrb	r3, [r0, #2]
 8001354:	78c2      	ldrb	r2, [r0, #3]
 8001356:	3b30      	subs	r3, #48	@ 0x30
 8001358:	3a30      	subs	r2, #48	@ 0x30
 800135a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800135e:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001362:	75e3      	strb	r3, [r4, #23]
            gps_data.second = (token[4] - '0') * 10 + (token[5] - '0');
 8001364:	7903      	ldrb	r3, [r0, #4]
 8001366:	7942      	ldrb	r2, [r0, #5]
 8001368:	3b30      	subs	r3, #48	@ 0x30
 800136a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800136e:	3a30      	subs	r2, #48	@ 0x30
 8001370:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001374:	7623      	strb	r3, [r4, #24]
        token = strtok_r(NULL, ",", &rest);
 8001376:	4965      	ldr	r1, [pc, #404]	@ (800150c <HAL_UART_RxCpltCallback+0x21c>)
 8001378:	aa01      	add	r2, sp, #4
 800137a:	2000      	movs	r0, #0
 800137c:	f008 f841 	bl	8009402 <strtok_r>
        gps_data.fix = (token[0] == 'A') ? 1 : 0;
 8001380:	7803      	ldrb	r3, [r0, #0]
        token = strtok_r(NULL, ",", &rest);
 8001382:	4962      	ldr	r1, [pc, #392]	@ (800150c <HAL_UART_RxCpltCallback+0x21c>)
        gps_data.fix = (token[0] == 'A') ? 1 : 0;
 8001384:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8001388:	4253      	negs	r3, r2
 800138a:	4153      	adcs	r3, r2
        token = strtok_r(NULL, ",", &rest);
 800138c:	2000      	movs	r0, #0
 800138e:	aa01      	add	r2, sp, #4
        gps_data.fix = (token[0] == 'A') ? 1 : 0;
 8001390:	7563      	strb	r3, [r4, #21]
        token = strtok_r(NULL, ",", &rest);
 8001392:	f008 f836 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 8001396:	7803      	ldrb	r3, [r0, #0]
 8001398:	b1f3      	cbz	r3, 80013d8 <HAL_UART_RxCpltCallback+0xe8>
            float lat = atof(token);
 800139a:	f007 f824 	bl	80083e6 <atof>
 800139e:	f7ff fb5f 	bl	8000a60 <__aeabi_d2f>
            int degrees = (int)(lat / 100);
 80013a2:	495d      	ldr	r1, [pc, #372]	@ (8001518 <HAL_UART_RxCpltCallback+0x228>)
            float lat = atof(token);
 80013a4:	4607      	mov	r7, r0
            int degrees = (int)(lat / 100);
 80013a6:	f7ff fd6d 	bl	8000e84 <__aeabi_fdiv>
 80013aa:	f7ff fe93 	bl	80010d4 <__aeabi_f2iz>
 80013ae:	4606      	mov	r6, r0
            float minutes = lat - (degrees * 100);
 80013b0:	2064      	movs	r0, #100	@ 0x64
 80013b2:	4370      	muls	r0, r6
 80013b4:	f7ff fc5e 	bl	8000c74 <__aeabi_i2f>
 80013b8:	4601      	mov	r1, r0
 80013ba:	4638      	mov	r0, r7
 80013bc:	f7ff fba4 	bl	8000b08 <__aeabi_fsub>
            gps_data.latitude = degrees + (minutes / 60.0f);
 80013c0:	4956      	ldr	r1, [pc, #344]	@ (800151c <HAL_UART_RxCpltCallback+0x22c>)
 80013c2:	f7ff fd5f 	bl	8000e84 <__aeabi_fdiv>
 80013c6:	4607      	mov	r7, r0
 80013c8:	4630      	mov	r0, r6
 80013ca:	f7ff fc53 	bl	8000c74 <__aeabi_i2f>
 80013ce:	4601      	mov	r1, r0
 80013d0:	4638      	mov	r0, r7
 80013d2:	f7ff fb9b 	bl	8000b0c <__addsf3>
 80013d6:	6020      	str	r0, [r4, #0]
        token = strtok_r(NULL, ",", &rest);
 80013d8:	494c      	ldr	r1, [pc, #304]	@ (800150c <HAL_UART_RxCpltCallback+0x21c>)
 80013da:	aa01      	add	r2, sp, #4
 80013dc:	2000      	movs	r0, #0
 80013de:	f008 f810 	bl	8009402 <strtok_r>
        if(token[0] == 'S') gps_data.latitude = -gps_data.latitude;
 80013e2:	7803      	ldrb	r3, [r0, #0]
        token = strtok_r(NULL, ",", &rest);
 80013e4:	4949      	ldr	r1, [pc, #292]	@ (800150c <HAL_UART_RxCpltCallback+0x21c>)
        if(token[0] == 'S') gps_data.latitude = -gps_data.latitude;
 80013e6:	2b53      	cmp	r3, #83	@ 0x53
 80013e8:	bf08      	it	eq
 80013ea:	6823      	ldreq	r3, [r4, #0]
        token = strtok_r(NULL, ",", &rest);
 80013ec:	f04f 0000 	mov.w	r0, #0
        if(token[0] == 'S') gps_data.latitude = -gps_data.latitude;
 80013f0:	bf08      	it	eq
 80013f2:	f103 4300 	addeq.w	r3, r3, #2147483648	@ 0x80000000
        token = strtok_r(NULL, ",", &rest);
 80013f6:	aa01      	add	r2, sp, #4
        if(token[0] == 'S') gps_data.latitude = -gps_data.latitude;
 80013f8:	bf08      	it	eq
 80013fa:	6023      	streq	r3, [r4, #0]
        token = strtok_r(NULL, ",", &rest);
 80013fc:	f008 f801 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 8001400:	7803      	ldrb	r3, [r0, #0]
 8001402:	b1f3      	cbz	r3, 8001442 <HAL_UART_RxCpltCallback+0x152>
            float lon = atof(token);
 8001404:	f006 ffef 	bl	80083e6 <atof>
 8001408:	f7ff fb2a 	bl	8000a60 <__aeabi_d2f>
            int degrees = (int)(lon / 100);
 800140c:	4942      	ldr	r1, [pc, #264]	@ (8001518 <HAL_UART_RxCpltCallback+0x228>)
            float lon = atof(token);
 800140e:	4607      	mov	r7, r0
            int degrees = (int)(lon / 100);
 8001410:	f7ff fd38 	bl	8000e84 <__aeabi_fdiv>
 8001414:	f7ff fe5e 	bl	80010d4 <__aeabi_f2iz>
 8001418:	4606      	mov	r6, r0
            float minutes = lon - (degrees * 100);
 800141a:	2064      	movs	r0, #100	@ 0x64
 800141c:	4370      	muls	r0, r6
 800141e:	f7ff fc29 	bl	8000c74 <__aeabi_i2f>
 8001422:	4601      	mov	r1, r0
 8001424:	4638      	mov	r0, r7
 8001426:	f7ff fb6f 	bl	8000b08 <__aeabi_fsub>
            gps_data.longitude = degrees + (minutes / 60.0f);
 800142a:	493c      	ldr	r1, [pc, #240]	@ (800151c <HAL_UART_RxCpltCallback+0x22c>)
 800142c:	f7ff fd2a 	bl	8000e84 <__aeabi_fdiv>
 8001430:	4607      	mov	r7, r0
 8001432:	4630      	mov	r0, r6
 8001434:	f7ff fc1e 	bl	8000c74 <__aeabi_i2f>
 8001438:	4601      	mov	r1, r0
 800143a:	4638      	mov	r0, r7
 800143c:	f7ff fb66 	bl	8000b0c <__addsf3>
 8001440:	6060      	str	r0, [r4, #4]
        token = strtok_r(NULL, ",", &rest);
 8001442:	4932      	ldr	r1, [pc, #200]	@ (800150c <HAL_UART_RxCpltCallback+0x21c>)
 8001444:	aa01      	add	r2, sp, #4
 8001446:	2000      	movs	r0, #0
 8001448:	f007 ffdb 	bl	8009402 <strtok_r>
        if(token[0] == 'W') gps_data.longitude = -gps_data.longitude;
 800144c:	7803      	ldrb	r3, [r0, #0]
        token = strtok_r(NULL, ",", &rest);
 800144e:	492f      	ldr	r1, [pc, #188]	@ (800150c <HAL_UART_RxCpltCallback+0x21c>)
        if(token[0] == 'W') gps_data.longitude = -gps_data.longitude;
 8001450:	2b57      	cmp	r3, #87	@ 0x57
 8001452:	bf08      	it	eq
 8001454:	6863      	ldreq	r3, [r4, #4]
        token = strtok_r(NULL, ",", &rest);
 8001456:	f04f 0000 	mov.w	r0, #0
        if(token[0] == 'W') gps_data.longitude = -gps_data.longitude;
 800145a:	bf08      	it	eq
 800145c:	f103 4300 	addeq.w	r3, r3, #2147483648	@ 0x80000000
        token = strtok_r(NULL, ",", &rest);
 8001460:	aa01      	add	r2, sp, #4
        if(token[0] == 'W') gps_data.longitude = -gps_data.longitude;
 8001462:	bf08      	it	eq
 8001464:	6063      	streq	r3, [r4, #4]
        token = strtok_r(NULL, ",", &rest);
 8001466:	f007 ffcc 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 800146a:	7803      	ldrb	r3, [r0, #0]
 800146c:	b14b      	cbz	r3, 8001482 <HAL_UART_RxCpltCallback+0x192>
            gps_data.speed = atof(token) * 0.514f; // Узлы в м/с
 800146e:	f006 ffba 	bl	80083e6 <atof>
 8001472:	a321      	add	r3, pc, #132	@ (adr r3, 80014f8 <HAL_UART_RxCpltCallback+0x208>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff f838 	bl	80004ec <__aeabi_dmul>
 800147c:	f7ff faf0 	bl	8000a60 <__aeabi_d2f>
 8001480:	60e0      	str	r0, [r4, #12]
        token = strtok_r(NULL, ",", &rest);
 8001482:	2000      	movs	r0, #0
 8001484:	4921      	ldr	r1, [pc, #132]	@ (800150c <HAL_UART_RxCpltCallback+0x21c>)
 8001486:	aa01      	add	r2, sp, #4
 8001488:	f007 ffbb 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 800148c:	7803      	ldrb	r3, [r0, #0]
 800148e:	b123      	cbz	r3, 800149a <HAL_UART_RxCpltCallback+0x1aa>
            gps_data.course = atof(token);
 8001490:	f006 ffa9 	bl	80083e6 <atof>
 8001494:	f7ff fae4 	bl	8000a60 <__aeabi_d2f>
 8001498:	6120      	str	r0, [r4, #16]
        token = strtok_r(NULL, ",", &rest);
 800149a:	2000      	movs	r0, #0
 800149c:	491b      	ldr	r1, [pc, #108]	@ (800150c <HAL_UART_RxCpltCallback+0x21c>)
 800149e:	aa01      	add	r2, sp, #4
 80014a0:	f007 ffaf 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 80014a4:	7803      	ldrb	r3, [r0, #0]
 80014a6:	b1d3      	cbz	r3, 80014de <HAL_UART_RxCpltCallback+0x1ee>
            gps_data.day = (token[0] - '0') * 10 + (token[1] - '0');
 80014a8:	7842      	ldrb	r2, [r0, #1]
 80014aa:	3b30      	subs	r3, #48	@ 0x30
 80014ac:	3a30      	subs	r2, #48	@ 0x30
 80014ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014b2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80014b6:	7663      	strb	r3, [r4, #25]
            gps_data.month = (token[2] - '0') * 10 + (token[3] - '0');
 80014b8:	7883      	ldrb	r3, [r0, #2]
 80014ba:	78c2      	ldrb	r2, [r0, #3]
 80014bc:	3b30      	subs	r3, #48	@ 0x30
 80014be:	3a30      	subs	r2, #48	@ 0x30
 80014c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014c4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80014c8:	76a3      	strb	r3, [r4, #26]
            gps_data.year = 2000 + (token[4] - '0') * 10 + (token[5] - '0');
 80014ca:	7903      	ldrb	r3, [r0, #4]
 80014cc:	7942      	ldrb	r2, [r0, #5]
 80014ce:	3b30      	subs	r3, #48	@ 0x30
 80014d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80014d4:	f502 62f4 	add.w	r2, r2, #1952	@ 0x7a0
 80014d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80014dc:	83a3      	strh	r3, [r4, #28]
                ParseNMEA((char*)gps_buffer);
                buffer_index = 0;
            }
        }
        else {
            buffer_index = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	802b      	strh	r3, [r5, #0]
        }
        
        // Запускаем следующее чтение
        HAL_UART_Receive_IT(&huart2, gps_buffer, 1);
 80014e2:	2201      	movs	r2, #1
 80014e4:	4908      	ldr	r1, [pc, #32]	@ (8001508 <HAL_UART_RxCpltCallback+0x218>)
 80014e6:	480e      	ldr	r0, [pc, #56]	@ (8001520 <HAL_UART_RxCpltCallback+0x230>)
    }
}
 80014e8:	b003      	add	sp, #12
 80014ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        HAL_UART_Receive_IT(&huart2, gps_buffer, 1);
 80014ee:	f005 bad2 	b.w	8006a96 <HAL_UART_Receive_IT>
 80014f2:	bf00      	nop
 80014f4:	f3af 8000 	nop.w
 80014f8:	20000000 	.word	0x20000000
 80014fc:	3fe072b0 	.word	0x3fe072b0
 8001500:	40004400 	.word	0x40004400
 8001504:	200003cc 	.word	0x200003cc
 8001508:	200003ce 	.word	0x200003ce
 800150c:	0800c520 	.word	0x0800c520
 8001510:	0800c522 	.word	0x0800c522
 8001514:	200003ac 	.word	0x200003ac
 8001518:	42c80000 	.word	0x42c80000
 800151c:	42700000 	.word	0x42700000
 8001520:	2000075c 	.word	0x2000075c
    else if(strcmp(token, "$GPGGA") == 0) {
 8001524:	4620      	mov	r0, r4
 8001526:	495d      	ldr	r1, [pc, #372]	@ (800169c <HAL_UART_RxCpltCallback+0x3ac>)
 8001528:	f7fe fe12 	bl	8000150 <strcmp>
 800152c:	2800      	cmp	r0, #0
 800152e:	d1d6      	bne.n	80014de <HAL_UART_RxCpltCallback+0x1ee>
        token = strtok_r(NULL, ",", &rest);
 8001530:	495b      	ldr	r1, [pc, #364]	@ (80016a0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001532:	aa01      	add	r2, sp, #4
 8001534:	f007 ff65 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 8001538:	7803      	ldrb	r3, [r0, #0]
 800153a:	b1d3      	cbz	r3, 8001572 <HAL_UART_RxCpltCallback+0x282>
            gps_data.hour = (token[0] - '0') * 10 + (token[1] - '0');
 800153c:	7842      	ldrb	r2, [r0, #1]
 800153e:	3b30      	subs	r3, #48	@ 0x30
 8001540:	4958      	ldr	r1, [pc, #352]	@ (80016a4 <HAL_UART_RxCpltCallback+0x3b4>)
 8001542:	3a30      	subs	r2, #48	@ 0x30
 8001544:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001548:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800154c:	758b      	strb	r3, [r1, #22]
            gps_data.minute = (token[2] - '0') * 10 + (token[3] - '0');
 800154e:	7883      	ldrb	r3, [r0, #2]
 8001550:	78c2      	ldrb	r2, [r0, #3]
 8001552:	3b30      	subs	r3, #48	@ 0x30
 8001554:	3a30      	subs	r2, #48	@ 0x30
 8001556:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800155a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800155e:	75cb      	strb	r3, [r1, #23]
            gps_data.second = (token[4] - '0') * 10 + (token[5] - '0');
 8001560:	7903      	ldrb	r3, [r0, #4]
 8001562:	7942      	ldrb	r2, [r0, #5]
 8001564:	3b30      	subs	r3, #48	@ 0x30
 8001566:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800156a:	3a30      	subs	r2, #48	@ 0x30
 800156c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001570:	760b      	strb	r3, [r1, #24]
        token = strtok_r(NULL, ",", &rest);
 8001572:	2000      	movs	r0, #0
 8001574:	494a      	ldr	r1, [pc, #296]	@ (80016a0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001576:	aa01      	add	r2, sp, #4
 8001578:	f007 ff43 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 800157c:	7803      	ldrb	r3, [r0, #0]
 800157e:	b1fb      	cbz	r3, 80015c0 <HAL_UART_RxCpltCallback+0x2d0>
            float lat = atof(token);
 8001580:	f006 ff31 	bl	80083e6 <atof>
 8001584:	f7ff fa6c 	bl	8000a60 <__aeabi_d2f>
            int degrees = (int)(lat / 100);
 8001588:	4947      	ldr	r1, [pc, #284]	@ (80016a8 <HAL_UART_RxCpltCallback+0x3b8>)
            float lat = atof(token);
 800158a:	4606      	mov	r6, r0
            int degrees = (int)(lat / 100);
 800158c:	f7ff fc7a 	bl	8000e84 <__aeabi_fdiv>
 8001590:	f7ff fda0 	bl	80010d4 <__aeabi_f2iz>
 8001594:	4604      	mov	r4, r0
            float minutes = lat - (degrees * 100);
 8001596:	2064      	movs	r0, #100	@ 0x64
 8001598:	4360      	muls	r0, r4
 800159a:	f7ff fb6b 	bl	8000c74 <__aeabi_i2f>
 800159e:	4601      	mov	r1, r0
 80015a0:	4630      	mov	r0, r6
 80015a2:	f7ff fab1 	bl	8000b08 <__aeabi_fsub>
            gps_data.latitude = degrees + (minutes / 60.0f);
 80015a6:	4941      	ldr	r1, [pc, #260]	@ (80016ac <HAL_UART_RxCpltCallback+0x3bc>)
 80015a8:	f7ff fc6c 	bl	8000e84 <__aeabi_fdiv>
 80015ac:	4606      	mov	r6, r0
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fb60 	bl	8000c74 <__aeabi_i2f>
 80015b4:	4601      	mov	r1, r0
 80015b6:	4630      	mov	r0, r6
 80015b8:	f7ff faa8 	bl	8000b0c <__addsf3>
 80015bc:	4b39      	ldr	r3, [pc, #228]	@ (80016a4 <HAL_UART_RxCpltCallback+0x3b4>)
 80015be:	6018      	str	r0, [r3, #0]
        token = strtok_r(NULL, ",", &rest);
 80015c0:	aa01      	add	r2, sp, #4
 80015c2:	4937      	ldr	r1, [pc, #220]	@ (80016a0 <HAL_UART_RxCpltCallback+0x3b0>)
 80015c4:	2000      	movs	r0, #0
 80015c6:	f007 ff1c 	bl	8009402 <strtok_r>
        if(token[0] == 'S') gps_data.latitude = -gps_data.latitude;
 80015ca:	7803      	ldrb	r3, [r0, #0]
        token = strtok_r(NULL, ",", &rest);
 80015cc:	4934      	ldr	r1, [pc, #208]	@ (80016a0 <HAL_UART_RxCpltCallback+0x3b0>)
        if(token[0] == 'S') gps_data.latitude = -gps_data.latitude;
 80015ce:	2b53      	cmp	r3, #83	@ 0x53
 80015d0:	bf08      	it	eq
 80015d2:	4a34      	ldreq	r2, [pc, #208]	@ (80016a4 <HAL_UART_RxCpltCallback+0x3b4>)
        token = strtok_r(NULL, ",", &rest);
 80015d4:	f04f 0000 	mov.w	r0, #0
        if(token[0] == 'S') gps_data.latitude = -gps_data.latitude;
 80015d8:	bf02      	ittt	eq
 80015da:	6813      	ldreq	r3, [r2, #0]
 80015dc:	f103 4300 	addeq.w	r3, r3, #2147483648	@ 0x80000000
 80015e0:	6013      	streq	r3, [r2, #0]
        token = strtok_r(NULL, ",", &rest);
 80015e2:	aa01      	add	r2, sp, #4
 80015e4:	f007 ff0d 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 80015e8:	7803      	ldrb	r3, [r0, #0]
 80015ea:	b1fb      	cbz	r3, 800162c <HAL_UART_RxCpltCallback+0x33c>
            float lon = atof(token);
 80015ec:	f006 fefb 	bl	80083e6 <atof>
 80015f0:	f7ff fa36 	bl	8000a60 <__aeabi_d2f>
            int degrees = (int)(lon / 100);
 80015f4:	492c      	ldr	r1, [pc, #176]	@ (80016a8 <HAL_UART_RxCpltCallback+0x3b8>)
            float lon = atof(token);
 80015f6:	4606      	mov	r6, r0
            int degrees = (int)(lon / 100);
 80015f8:	f7ff fc44 	bl	8000e84 <__aeabi_fdiv>
 80015fc:	f7ff fd6a 	bl	80010d4 <__aeabi_f2iz>
 8001600:	4604      	mov	r4, r0
            float minutes = lon - (degrees * 100);
 8001602:	2064      	movs	r0, #100	@ 0x64
 8001604:	4360      	muls	r0, r4
 8001606:	f7ff fb35 	bl	8000c74 <__aeabi_i2f>
 800160a:	4601      	mov	r1, r0
 800160c:	4630      	mov	r0, r6
 800160e:	f7ff fa7b 	bl	8000b08 <__aeabi_fsub>
            gps_data.longitude = degrees + (minutes / 60.0f);
 8001612:	4926      	ldr	r1, [pc, #152]	@ (80016ac <HAL_UART_RxCpltCallback+0x3bc>)
 8001614:	f7ff fc36 	bl	8000e84 <__aeabi_fdiv>
 8001618:	4606      	mov	r6, r0
 800161a:	4620      	mov	r0, r4
 800161c:	f7ff fb2a 	bl	8000c74 <__aeabi_i2f>
 8001620:	4601      	mov	r1, r0
 8001622:	4630      	mov	r0, r6
 8001624:	f7ff fa72 	bl	8000b0c <__addsf3>
 8001628:	4b1e      	ldr	r3, [pc, #120]	@ (80016a4 <HAL_UART_RxCpltCallback+0x3b4>)
 800162a:	6058      	str	r0, [r3, #4]
        token = strtok_r(NULL, ",", &rest);
 800162c:	aa01      	add	r2, sp, #4
 800162e:	491c      	ldr	r1, [pc, #112]	@ (80016a0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001630:	2000      	movs	r0, #0
 8001632:	f007 fee6 	bl	8009402 <strtok_r>
        if(token[0] == 'W') gps_data.longitude = -gps_data.longitude;
 8001636:	7803      	ldrb	r3, [r0, #0]
        token = strtok_r(NULL, ",", &rest);
 8001638:	4919      	ldr	r1, [pc, #100]	@ (80016a0 <HAL_UART_RxCpltCallback+0x3b0>)
        if(token[0] == 'W') gps_data.longitude = -gps_data.longitude;
 800163a:	2b57      	cmp	r3, #87	@ 0x57
 800163c:	bf08      	it	eq
 800163e:	4a19      	ldreq	r2, [pc, #100]	@ (80016a4 <HAL_UART_RxCpltCallback+0x3b4>)
        token = strtok_r(NULL, ",", &rest);
 8001640:	f04f 0000 	mov.w	r0, #0
        if(token[0] == 'W') gps_data.longitude = -gps_data.longitude;
 8001644:	bf02      	ittt	eq
 8001646:	6853      	ldreq	r3, [r2, #4]
 8001648:	f103 4300 	addeq.w	r3, r3, #2147483648	@ 0x80000000
 800164c:	6053      	streq	r3, [r2, #4]
        token = strtok_r(NULL, ",", &rest);
 800164e:	aa01      	add	r2, sp, #4
 8001650:	f007 fed7 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 8001654:	7803      	ldrb	r3, [r0, #0]
 8001656:	b11b      	cbz	r3, 8001660 <HAL_UART_RxCpltCallback+0x370>
            gps_data.fix = atoi(token);
 8001658:	f006 fec8 	bl	80083ec <atoi>
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_UART_RxCpltCallback+0x3b4>)
 800165e:	7558      	strb	r0, [r3, #21]
        token = strtok_r(NULL, ",", &rest);
 8001660:	2000      	movs	r0, #0
 8001662:	490f      	ldr	r1, [pc, #60]	@ (80016a0 <HAL_UART_RxCpltCallback+0x3b0>)
 8001664:	aa01      	add	r2, sp, #4
 8001666:	f007 fecc 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 800166a:	7803      	ldrb	r3, [r0, #0]
 800166c:	b11b      	cbz	r3, 8001676 <HAL_UART_RxCpltCallback+0x386>
            gps_data.satellites = atoi(token);
 800166e:	f006 febd 	bl	80083ec <atoi>
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_UART_RxCpltCallback+0x3b4>)
 8001674:	7518      	strb	r0, [r3, #20]
        token = strtok_r(NULL, ",", &rest);
 8001676:	2000      	movs	r0, #0
 8001678:	4909      	ldr	r1, [pc, #36]	@ (80016a0 <HAL_UART_RxCpltCallback+0x3b0>)
 800167a:	aa01      	add	r2, sp, #4
 800167c:	f007 fec1 	bl	8009402 <strtok_r>
        if(token[0] != '\0') {
 8001680:	7803      	ldrb	r3, [r0, #0]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f43f af2b 	beq.w	80014de <HAL_UART_RxCpltCallback+0x1ee>
            gps_data.altitude = atof(token);
 8001688:	f006 fead 	bl	80083e6 <atof>
 800168c:	f7ff f9e8 	bl	8000a60 <__aeabi_d2f>
 8001690:	4b04      	ldr	r3, [pc, #16]	@ (80016a4 <HAL_UART_RxCpltCallback+0x3b4>)
 8001692:	6098      	str	r0, [r3, #8]
                buffer_index = 0;
 8001694:	e723      	b.n	80014de <HAL_UART_RxCpltCallback+0x1ee>
}
 8001696:	b003      	add	sp, #12
 8001698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800169a:	bf00      	nop
 800169c:	0800c529 	.word	0x0800c529
 80016a0:	0800c520 	.word	0x0800c520
 80016a4:	200003ac 	.word	0x200003ac
 80016a8:	42c80000 	.word	0x42c80000
 80016ac:	42700000 	.word	0x42700000

080016b0 <GPS_Init>:

void GPS_Init(void) {
 80016b0:	b538      	push	{r3, r4, r5, lr}
    huart2.Init.BaudRate = 9600;
 80016b2:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
    huart2.Instance = USART2;
 80016b6:	4c0d      	ldr	r4, [pc, #52]	@ (80016ec <GPS_Init+0x3c>)
    huart2.Init.BaudRate = 9600;
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <GPS_Init+0x40>)
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	2500      	movs	r5, #0
    huart2.Init.BaudRate = 9600;
 80016bc:	e9c4 2300 	strd	r2, r3, [r4]
    huart2.Init.Mode = UART_MODE_TX_RX;
 80016c0:	230c      	movs	r3, #12
    HAL_UART_Init(&huart2);
 80016c2:	4620      	mov	r0, r4
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016c4:	e9c4 3505 	strd	r3, r5, [r4, #20]
    huart2.Init.StopBits = UART_STOPBITS_1;
 80016c8:	e9c4 5502 	strd	r5, r5, [r4, #8]
    huart2.Init.Parity = UART_PARITY_NONE;
 80016cc:	6125      	str	r5, [r4, #16]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ce:	61e5      	str	r5, [r4, #28]
    HAL_UART_Init(&huart2);
 80016d0:	f005 f98e 	bl	80069f0 <HAL_UART_Init>
    // Инициализация UART
    UART_Init();
    
    // Инициализация данных
    memset(&gps_data, 0, sizeof(GPS_Data));
 80016d4:	4629      	mov	r1, r5
 80016d6:	2220      	movs	r2, #32
 80016d8:	4806      	ldr	r0, [pc, #24]	@ (80016f4 <GPS_Init+0x44>)
 80016da:	f007 fe50 	bl	800937e <memset>
    
    // Запуск приема данных
    HAL_UART_Receive_IT(&huart2, gps_buffer, 1);
 80016de:	4620      	mov	r0, r4
}
 80016e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    HAL_UART_Receive_IT(&huart2, gps_buffer, 1);
 80016e4:	2201      	movs	r2, #1
 80016e6:	4904      	ldr	r1, [pc, #16]	@ (80016f8 <GPS_Init+0x48>)
 80016e8:	f005 b9d5 	b.w	8006a96 <HAL_UART_Receive_IT>
 80016ec:	2000075c 	.word	0x2000075c
 80016f0:	40004400 	.word	0x40004400
 80016f4:	200003ac 	.word	0x200003ac
 80016f8:	200003ce 	.word	0x200003ce

080016fc <GPS_Update>:

void GPS_Update(void) {
    // Обновление происходит в прерывании
}
 80016fc:	4770      	bx	lr
	...

08001700 <GPS_GetData>:

const GPS_Data* GPS_GetData(void) {
    return &gps_data;
}
 8001700:	4800      	ldr	r0, [pc, #0]	@ (8001704 <GPS_GetData+0x4>)
 8001702:	4770      	bx	lr
 8001704:	200003ac 	.word	0x200003ac

08001708 <GPS_ProcessUART>:
uint8_t GPS_HasValidData(void) {
    return (gps_data.fix > 0);
}

// Обработка данных GPS через UART
void GPS_ProcessUART(void) {
 8001708:	b507      	push	{r0, r1, r2, lr}
    // Здесь будет логика обработки входящих UART данных
    // Например, парсинг NMEA-сообщений
    extern UART_HandleTypeDef huart2;
    uint8_t rx_data[1];
    
    if (HAL_UART_Receive(&huart2, rx_data, 1, 10) == HAL_OK) {
 800170a:	230a      	movs	r3, #10
 800170c:	2201      	movs	r2, #1
 800170e:	a901      	add	r1, sp, #4
 8001710:	4802      	ldr	r0, [pc, #8]	@ (800171c <GPS_ProcessUART+0x14>)
 8001712:	f004 ffa3 	bl	800665c <HAL_UART_Receive>
        // Логика обработки принятого байта
        // Можно добавить буферизацию и парсинг NMEA-протокола
    }
 8001716:	b003      	add	sp, #12
 8001718:	f85d fb04 	ldr.w	pc, [sp], #4
 800171c:	2000075c 	.word	0x2000075c

08001720 <HallSensors_Init>:
    MOTOR_ALR,  // ALR
    MOTOR_ARF,  // ARF
    MOTOR_ARR   // ARR
};

void HallSensors_Init(void) {
 8001720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Включаем тактирование ADC и GPIO
    __HAL_RCC_ADC1_CLK_ENABLE();
    __HAL_RCC_GPIOA_CLK_ENABLE();
    
    // Настройка GPIO для датчиков Холла
    for (int i = 0; i < HALL_COUNT; i++) {
 8001724:	2500      	movs	r5, #0
        GPIO_InitTypeDef GPIO_InitStruct = {0};
        GPIO_InitStruct.Pin = hall_pins[i];
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001726:	2701      	movs	r7, #1
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	462e      	mov	r6, r5
    __HAL_RCC_ADC1_CLK_ENABLE();
 800172a:	4b24      	ldr	r3, [pc, #144]	@ (80017bc <HallSensors_Init+0x9c>)
void HallSensors_Init(void) {
 800172c:	b086      	sub	sp, #24
    __HAL_RCC_ADC1_CLK_ENABLE();
 800172e:	699a      	ldr	r2, [r3, #24]
 8001730:	4c23      	ldr	r4, [pc, #140]	@ (80017c0 <HallSensors_Init+0xa0>)
 8001732:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001736:	619a      	str	r2, [r3, #24]
 8001738:	699a      	ldr	r2, [r3, #24]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80017c4 <HallSensors_Init+0xa4>
    __HAL_RCC_ADC1_CLK_ENABLE();
 800173e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8001742:	9200      	str	r2, [sp, #0]
 8001744:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	f042 0204 	orr.w	r2, r2, #4
 800174c:	619a      	str	r2, [r3, #24]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	9b01      	ldr	r3, [sp, #4]
        GPIO_InitStruct.Pin = hall_pins[i];
 8001758:	f854 3b04 	ldr.w	r3, [r4], #4
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175c:	4640      	mov	r0, r8
 800175e:	a902      	add	r1, sp, #8
    for (int i = 0; i < HALL_COUNT; i++) {
 8001760:	3501      	adds	r5, #1
        GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001762:	9603      	str	r6, [sp, #12]
 8001764:	9605      	str	r6, [sp, #20]
        GPIO_InitStruct.Pin = hall_pins[i];
 8001766:	9302      	str	r3, [sp, #8]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001768:	9704      	str	r7, [sp, #16]
        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f001 fd0d 	bl	8003188 <HAL_GPIO_Init>
    for (int i = 0; i < HALL_COUNT; i++) {
 800176e:	2d04      	cmp	r5, #4
 8001770:	d1f2      	bne.n	8001758 <HallSensors_Init+0x38>
    }
    
    // Настройка ADC
    hadc1.Instance = ADC1;
 8001772:	4c15      	ldr	r4, [pc, #84]	@ (80017c8 <HallSensors_Init+0xa8>)
 8001774:	4b15      	ldr	r3, [pc, #84]	@ (80017cc <HallSensors_Init+0xac>)
    hadc1.Init.ContinuousConvMode = ENABLE;
    hadc1.Init.DiscontinuousConvMode = DISABLE;
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
    hadc1.Init.NbrOfConversion = HALL_COUNT;
    HAL_ADC_Init(&hadc1);
 8001776:	4620      	mov	r0, r4
    hadc1.Instance = ADC1;
 8001778:	6023      	str	r3, [r4, #0]
    hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800177a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800177e:	60a3      	str	r3, [r4, #8]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001780:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
    hadc1.Init.ContinuousConvMode = ENABLE;
 8001784:	7327      	strb	r7, [r4, #12]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001786:	7526      	strb	r6, [r4, #20]
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001788:	6066      	str	r6, [r4, #4]
    hadc1.Init.NbrOfConversion = HALL_COUNT;
 800178a:	6125      	str	r5, [r4, #16]
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800178c:	61e3      	str	r3, [r4, #28]
    
    // Настройка каналов ADC
    ADC_ChannelConfTypeDef sConfig = {0};
    for(int i = 0; i < HALL_COUNT; i++) {
 800178e:	2500      	movs	r5, #0
    HAL_ADC_Init(&hadc1);
 8001790:	f001 fb56 	bl	8002e40 <HAL_ADC_Init>
        sConfig.Channel = hall_channels[i];
        sConfig.Rank = i + 1;
        sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001794:	2707      	movs	r7, #7
 8001796:	4e0e      	ldr	r6, [pc, #56]	@ (80017d0 <HallSensors_Init+0xb0>)
        sConfig.Channel = hall_channels[i];
 8001798:	f856 3b04 	ldr.w	r3, [r6], #4
        sConfig.Rank = i + 1;
 800179c:	3501      	adds	r5, #1
        HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800179e:	4620      	mov	r0, r4
 80017a0:	a902      	add	r1, sp, #8
        sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80017a2:	e9cd 5703 	strd	r5, r7, [sp, #12]
        sConfig.Channel = hall_channels[i];
 80017a6:	9302      	str	r3, [sp, #8]
        HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80017a8:	f001 f97a 	bl	8002aa0 <HAL_ADC_ConfigChannel>
    for(int i = 0; i < HALL_COUNT; i++) {
 80017ac:	2d04      	cmp	r5, #4
 80017ae:	d1f3      	bne.n	8001798 <HallSensors_Init+0x78>
    }
    
    // Запуск ADC
    HAL_ADC_Start(&hadc1);
 80017b0:	4805      	ldr	r0, [pc, #20]	@ (80017c8 <HallSensors_Init+0xa8>)
 80017b2:	f001 fa2f 	bl	8002c14 <HAL_ADC_Start>
}
 80017b6:	b006      	add	sp, #24
 80017b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80017bc:	40021000 	.word	0x40021000
 80017c0:	0800c750 	.word	0x0800c750
 80017c4:	40010800 	.word	0x40010800
 80017c8:	20000360 	.word	0x20000360
 80017cc:	40012400 	.word	0x40012400
 80017d0:	0800c740 	.word	0x0800c740

080017d4 <HallSensors_GetValue>:

uint16_t HallSensors_GetValue(HallSensorID sensor) {
    if(sensor >= HALL_COUNT) return 0;
 80017d4:	2803      	cmp	r0, #3
uint16_t HallSensors_GetValue(HallSensorID sensor) {
 80017d6:	b508      	push	{r3, lr}
    if(sensor >= HALL_COUNT) return 0;
 80017d8:	d808      	bhi.n	80017ec <HallSensors_GetValue+0x18>
    
    // Ждем завершения преобразования
    HAL_ADC_PollForConversion(&hadc1, 100);
 80017da:	2164      	movs	r1, #100	@ 0x64
 80017dc:	4804      	ldr	r0, [pc, #16]	@ (80017f0 <HallSensors_GetValue+0x1c>)
 80017de:	f001 f847 	bl	8002870 <HAL_ADC_PollForConversion>
    
    // Получаем значение
    return HAL_ADC_GetValue(&hadc1);
 80017e2:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <HallSensors_GetValue+0x1c>)
 80017e4:	f001 f8e8 	bl	80029b8 <HAL_ADC_GetValue>
 80017e8:	b280      	uxth	r0, r0
}
 80017ea:	bd08      	pop	{r3, pc}
    if(sensor >= HALL_COUNT) return 0;
 80017ec:	2000      	movs	r0, #0
 80017ee:	e7fc      	b.n	80017ea <HallSensors_GetValue+0x16>
 80017f0:	20000360 	.word	0x20000360

080017f4 <HallSensors_GetAngle>:

float HallSensors_GetAngle(HallSensorID sensor) {
    if(sensor >= HALL_COUNT) return 0.0f;
 80017f4:	2803      	cmp	r0, #3
float HallSensors_GetAngle(HallSensorID sensor) {
 80017f6:	b570      	push	{r4, r5, r6, lr}
 80017f8:	4604      	mov	r4, r0
    if(sensor >= HALL_COUNT) return 0.0f;
 80017fa:	d901      	bls.n	8001800 <HallSensors_GetAngle+0xc>
 80017fc:	2000      	movs	r0, #0
    float range = cal->max_value - cal->min_value;
    if(range == 0) return 0.0f;
    
    float normalized = (float)(value - cal->min_value) / range;
    return (normalized * 90.0f) - 45.0f; // Преобразуем в диапазон -45 до +45
}
 80017fe:	bd70      	pop	{r4, r5, r6, pc}
    uint16_t value = HallSensors_GetValue(sensor);
 8001800:	f7ff ffe8 	bl	80017d4 <HallSensors_GetValue>
    float range = cal->max_value - cal->min_value;
 8001804:	2206      	movs	r2, #6
 8001806:	4354      	muls	r4, r2
 8001808:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <HallSensors_GetAngle+0x4c>)
    uint16_t value = HallSensors_GetValue(sensor);
 800180a:	4605      	mov	r5, r0
    float range = cal->max_value - cal->min_value;
 800180c:	191a      	adds	r2, r3, r4
 800180e:	5b1e      	ldrh	r6, [r3, r4]
 8001810:	8850      	ldrh	r0, [r2, #2]
 8001812:	1b80      	subs	r0, r0, r6
 8001814:	f7ff fa2e 	bl	8000c74 <__aeabi_i2f>
    if(range == 0) return 0.0f;
 8001818:	2100      	movs	r1, #0
    float range = cal->max_value - cal->min_value;
 800181a:	4604      	mov	r4, r0
    if(range == 0) return 0.0f;
 800181c:	f7ff fc12 	bl	8001044 <__aeabi_fcmpeq>
 8001820:	2800      	cmp	r0, #0
 8001822:	d1eb      	bne.n	80017fc <HallSensors_GetAngle+0x8>
    float normalized = (float)(value - cal->min_value) / range;
 8001824:	1ba8      	subs	r0, r5, r6
 8001826:	f7ff fa25 	bl	8000c74 <__aeabi_i2f>
 800182a:	4621      	mov	r1, r4
 800182c:	f7ff fb2a 	bl	8000e84 <__aeabi_fdiv>
    return (normalized * 90.0f) - 45.0f; // Преобразуем в диапазон -45 до +45
 8001830:	4904      	ldr	r1, [pc, #16]	@ (8001844 <HallSensors_GetAngle+0x50>)
 8001832:	f7ff fa73 	bl	8000d1c <__aeabi_fmul>
 8001836:	4904      	ldr	r1, [pc, #16]	@ (8001848 <HallSensors_GetAngle+0x54>)
 8001838:	f7ff f966 	bl	8000b08 <__aeabi_fsub>
 800183c:	e7df      	b.n	80017fe <HallSensors_GetAngle+0xa>
 800183e:	bf00      	nop
 8001840:	200004ce 	.word	0x200004ce
 8001844:	42b40000 	.word	0x42b40000
 8001848:	42340000 	.word	0x42340000

0800184c <HallSensors_Calibrate>:

void HallSensors_Calibrate(void) {
 800184c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // Для каждого датчика
    for(int i = 0; i < HALL_COUNT; i++) {
 8001850:	2500      	movs	r5, #0
 8001852:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 80018ac <HallSensors_Calibrate+0x60>
 8001856:	4c16      	ldr	r4, [pc, #88]	@ (80018b0 <HallSensors_Calibrate+0x64>)
        // Поворачиваем в -45 градусов
        MotorControl_SetMotorState(hall_to_motor[i], MOTOR_BACKWARD);
 8001858:	f818 6b01 	ldrb.w	r6, [r8], #1
 800185c:	2102      	movs	r1, #2
 800185e:	4630      	mov	r0, r6
 8001860:	f000 fc36 	bl	80020d0 <MotorControl_SetMotorState>
        HAL_Delay(3000); // Ждем 3 секунды для поворота
 8001864:	b2ef      	uxtb	r7, r5
 8001866:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800186a:	f000 ffb9 	bl	80027e0 <HAL_Delay>
        
        // Записываем минимальное значение
        calibration_data[i].min_value = HallSensors_GetValue(i);
 800186e:	4638      	mov	r0, r7
 8001870:	f7ff ffb0 	bl	80017d4 <HallSensors_GetValue>
        
        // Поворачиваем в +45 градусов
        MotorControl_SetMotorState(hall_to_motor[i], MOTOR_FORWARD);
 8001874:	2101      	movs	r1, #1
        calibration_data[i].min_value = HallSensors_GetValue(i);
 8001876:	8020      	strh	r0, [r4, #0]
        MotorControl_SetMotorState(hall_to_motor[i], MOTOR_FORWARD);
 8001878:	4630      	mov	r0, r6
 800187a:	f000 fc29 	bl	80020d0 <MotorControl_SetMotorState>
        HAL_Delay(3000); // Ждем 3 секунды для поворота
 800187e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001882:	f000 ffad 	bl	80027e0 <HAL_Delay>
        
        // Записываем максимальное значение
        calibration_data[i].max_value = HallSensors_GetValue(i);
 8001886:	4638      	mov	r0, r7
 8001888:	f7ff ffa4 	bl	80017d4 <HallSensors_GetValue>
        
        // Вычисляем центральное значение
        calibration_data[i].center_value = 
            (calibration_data[i].min_value + calibration_data[i].max_value) / 2;
 800188c:	8823      	ldrh	r3, [r4, #0]
        calibration_data[i].max_value = HallSensors_GetValue(i);
 800188e:	8060      	strh	r0, [r4, #2]
            (calibration_data[i].min_value + calibration_data[i].max_value) / 2;
 8001890:	4418      	add	r0, r3
 8001892:	1040      	asrs	r0, r0, #1
        calibration_data[i].center_value = 
 8001894:	80a0      	strh	r0, [r4, #4]
        
        // Останавливаем мотор
        MotorControl_SetMotorState(hall_to_motor[i], MOTOR_STOP);
 8001896:	2100      	movs	r1, #0
 8001898:	4630      	mov	r0, r6
    for(int i = 0; i < HALL_COUNT; i++) {
 800189a:	3501      	adds	r5, #1
        MotorControl_SetMotorState(hall_to_motor[i], MOTOR_STOP);
 800189c:	f000 fc18 	bl	80020d0 <MotorControl_SetMotorState>
    for(int i = 0; i < HALL_COUNT; i++) {
 80018a0:	2d04      	cmp	r5, #4
 80018a2:	f104 0406 	add.w	r4, r4, #6
 80018a6:	d1d7      	bne.n	8001858 <HallSensors_Calibrate+0xc>
    }
}
 80018a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018ac:	0800c73c 	.word	0x0800c73c
 80018b0:	200004ce 	.word	0x200004ce

080018b4 <HallSensors_ProcessADC>:
const HallCalibrationData* HallSensors_GetCalibrationData(HallSensorID sensor) {
    if(sensor >= HALL_COUNT) return NULL;
    return &calibration_data[sensor];
}

 80018b4:	4770      	bx	lr
	...

080018b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018b8:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018ba:	480b      	ldr	r0, [pc, #44]	@ (80018e8 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 80018bc:	4a0b      	ldr	r2, [pc, #44]	@ (80018ec <MX_I2C1_Init+0x34>)
 80018be:	4b0c      	ldr	r3, [pc, #48]	@ (80018f0 <MX_I2C1_Init+0x38>)
 80018c0:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c4:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 80018ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018ce:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d6:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018d8:	f002 f898 	bl	8003a0c <HAL_I2C_Init>
 80018dc:	b118      	cbz	r0, 80018e6 <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80018e2:	f000 baff 	b.w	8001ee4 <Error_Handler>
}
 80018e6:	bd08      	pop	{r3, pc}
 80018e8:	200004e8 	.word	0x200004e8
 80018ec:	40005400 	.word	0x40005400
 80018f0:	000186a0 	.word	0x000186a0

080018f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018f4:	b510      	push	{r4, lr}
 80018f6:	4604      	mov	r4, r0
 80018f8:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fa:	2210      	movs	r2, #16
 80018fc:	2100      	movs	r1, #0
 80018fe:	a802      	add	r0, sp, #8
 8001900:	f007 fd3d 	bl	800937e <memset>
  if(i2cHandle->Instance==I2C1)
 8001904:	6822      	ldr	r2, [r4, #0]
 8001906:	4b19      	ldr	r3, [pc, #100]	@ (800196c <HAL_I2C_MspInit+0x78>)
 8001908:	429a      	cmp	r2, r3
 800190a:	d12c      	bne.n	8001966 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4c18      	ldr	r4, [pc, #96]	@ (8001970 <HAL_I2C_MspInit+0x7c>)
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190e:	22c0      	movs	r2, #192	@ 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001910:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	4818      	ldr	r0, [pc, #96]	@ (8001974 <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	61a3      	str	r3, [r4, #24]
 800191a:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001926:	2312      	movs	r3, #18
 8001928:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f001 fc2a 	bl	8003188 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001934:	69e3      	ldr	r3, [r4, #28]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001936:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001938:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800193c:	61e3      	str	r3, [r4, #28]
 800193e:	69e3      	ldr	r3, [r4, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001940:	2101      	movs	r1, #1
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001942:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8001946:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 800194c:	f001 fb24 	bl	8002f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001950:	201f      	movs	r0, #31
 8001952:	f001 fb51 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 8001956:	2020      	movs	r0, #32
 8001958:	2200      	movs	r2, #0
 800195a:	2101      	movs	r1, #1
 800195c:	f001 fb1c 	bl	8002f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001960:	2020      	movs	r0, #32
 8001962:	f001 fb49 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001966:	b006      	add	sp, #24
 8001968:	bd10      	pop	{r4, pc}
 800196a:	bf00      	nop
 800196c:	40005400 	.word	0x40005400
 8001970:	40021000 	.word	0x40021000
 8001974:	40010c00 	.word	0x40010c00

08001978 <IMU_Init>:
    // Настройка режима
    data = 0x00; // Непрерывное измерение
    HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDR << 1, HMC5883L_MODE, 1, &data, 1, 100);
}

void IMU_Init(void) {
 8001978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    hi2c1.Init.ClockSpeed = 400000;
 800197c:	4a57      	ldr	r2, [pc, #348]	@ (8001adc <IMU_Init+0x164>)
    hi2c1.Instance = I2C1;
 800197e:	4c58      	ldr	r4, [pc, #352]	@ (8001ae0 <IMU_Init+0x168>)
    hi2c1.Init.ClockSpeed = 400000;
 8001980:	4b58      	ldr	r3, [pc, #352]	@ (8001ae4 <IMU_Init+0x16c>)
void IMU_Init(void) {
 8001982:	b086      	sub	sp, #24
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001984:	2700      	movs	r7, #0
    hi2c1.Init.ClockSpeed = 400000;
 8001986:	e9c4 2300 	strd	r2, r3, [r4]
    HAL_I2C_Mem_Read(&hi2c1, ITG3205_ADDR << 1, ITG3205_WHO_AM_I, 1, &data, 1, 100);
 800198a:	2601      	movs	r6, #1
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800198c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
    HAL_I2C_Mem_Read(&hi2c1, ITG3205_ADDR << 1, ITG3205_WHO_AM_I, 1, &data, 1, 100);
 8001990:	f04f 0864 	mov.w	r8, #100	@ 0x64
    HAL_I2C_Init(&hi2c1);
 8001994:	4620      	mov	r0, r4
    HAL_I2C_Mem_Read(&hi2c1, ITG3205_ADDR << 1, ITG3205_WHO_AM_I, 1, &data, 1, 100);
 8001996:	f10d 0517 	add.w	r5, sp, #23
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800199a:	e9c4 3704 	strd	r3, r7, [r4, #16]
    hi2c1.Init.OwnAddress1 = 0;
 800199e:	e9c4 7702 	strd	r7, r7, [r4, #8]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019a2:	e9c4 7707 	strd	r7, r7, [r4, #28]
    HAL_I2C_Init(&hi2c1);
 80019a6:	f002 f831 	bl	8003a0c <HAL_I2C_Init>
    HAL_I2C_Mem_Read(&hi2c1, ITG3205_ADDR << 1, ITG3205_WHO_AM_I, 1, &data, 1, 100);
 80019aa:	4633      	mov	r3, r6
 80019ac:	463a      	mov	r2, r7
 80019ae:	21d0      	movs	r1, #208	@ 0xd0
 80019b0:	4620      	mov	r0, r4
 80019b2:	e9cd 6801 	strd	r6, r8, [sp, #4]
 80019b6:	9500      	str	r5, [sp, #0]
 80019b8:	f002 f990 	bl	8003cdc <HAL_I2C_Mem_Read>
    if(data != 0x68) {
 80019bc:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80019c0:	2b68      	cmp	r3, #104	@ 0x68
 80019c2:	d122      	bne.n	8001a0a <IMU_Init+0x92>
    data = 0x07; // 1kHz / (1 + 7) = 125Hz
 80019c4:	2307      	movs	r3, #7
    HAL_I2C_Mem_Write(&hi2c1, ITG3205_ADDR << 1, ITG3205_SMPLRT_DIV, 1, &data, 1, 100);
 80019c6:	2215      	movs	r2, #21
 80019c8:	21d0      	movs	r1, #208	@ 0xd0
    data = 0x07; // 1kHz / (1 + 7) = 125Hz
 80019ca:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, ITG3205_ADDR << 1, ITG3205_SMPLRT_DIV, 1, &data, 1, 100);
 80019ce:	4620      	mov	r0, r4
 80019d0:	4633      	mov	r3, r6
 80019d2:	e9cd 6801 	strd	r6, r8, [sp, #4]
 80019d6:	9500      	str	r5, [sp, #0]
 80019d8:	f002 f8f0 	bl	8003bbc <HAL_I2C_Mem_Write>
    data = 0x18; // ±2000°/с, 256Hz фильтр
 80019dc:	2318      	movs	r3, #24
    HAL_I2C_Mem_Write(&hi2c1, ITG3205_ADDR << 1, ITG3205_DLPF_FS, 1, &data, 1, 100);
 80019de:	2216      	movs	r2, #22
 80019e0:	21d0      	movs	r1, #208	@ 0xd0
    data = 0x18; // ±2000°/с, 256Hz фильтр
 80019e2:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, ITG3205_ADDR << 1, ITG3205_DLPF_FS, 1, &data, 1, 100);
 80019e6:	4620      	mov	r0, r4
 80019e8:	4633      	mov	r3, r6
 80019ea:	e9cd 6801 	strd	r6, r8, [sp, #4]
 80019ee:	9500      	str	r5, [sp, #0]
 80019f0:	f002 f8e4 	bl	8003bbc <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(&hi2c1, ITG3205_ADDR << 1, ITG3205_PWR_MGM, 1, &data, 1, 100);
 80019f4:	4633      	mov	r3, r6
 80019f6:	223e      	movs	r2, #62	@ 0x3e
 80019f8:	21d0      	movs	r1, #208	@ 0xd0
 80019fa:	4620      	mov	r0, r4
 80019fc:	e9cd 6801 	strd	r6, r8, [sp, #4]
 8001a00:	9500      	str	r5, [sp, #0]
    data = 0x00; // Нормальный режим
 8001a02:	f88d 7017 	strb.w	r7, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, ITG3205_ADDR << 1, ITG3205_PWR_MGM, 1, &data, 1, 100);
 8001a06:	f002 f8d9 	bl	8003bbc <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR << 1, ADXL345_DEVID, 1, &data, 1, 100);
 8001a0a:	2401      	movs	r4, #1
 8001a0c:	2664      	movs	r6, #100	@ 0x64
 8001a0e:	4623      	mov	r3, r4
 8001a10:	2200      	movs	r2, #0
 8001a12:	21a6      	movs	r1, #166	@ 0xa6
 8001a14:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001a18:	4831      	ldr	r0, [pc, #196]	@ (8001ae0 <IMU_Init+0x168>)
 8001a1a:	9500      	str	r5, [sp, #0]
 8001a1c:	f002 f95e 	bl	8003cdc <HAL_I2C_Mem_Read>
    if(data != 0xE5) {
 8001a20:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001a24:	2be5      	cmp	r3, #229	@ 0xe5
 8001a26:	d117      	bne.n	8001a58 <IMU_Init+0xe0>
    data = 0x08; // Измерение включено
 8001a28:	2308      	movs	r3, #8
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR << 1, ADXL345_POWER_CTL, 1, &data, 1, 100);
 8001a2a:	222d      	movs	r2, #45	@ 0x2d
 8001a2c:	21a6      	movs	r1, #166	@ 0xa6
    data = 0x08; // Измерение включено
 8001a2e:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR << 1, ADXL345_POWER_CTL, 1, &data, 1, 100);
 8001a32:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001a36:	4623      	mov	r3, r4
 8001a38:	4829      	ldr	r0, [pc, #164]	@ (8001ae0 <IMU_Init+0x168>)
 8001a3a:	9500      	str	r5, [sp, #0]
 8001a3c:	f002 f8be 	bl	8003bbc <HAL_I2C_Mem_Write>
    data = 0x0B; // ±16g, правовыравнивание
 8001a40:	230b      	movs	r3, #11
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR << 1, ADXL345_DATA_FORMAT, 1, &data, 1, 100);
 8001a42:	2231      	movs	r2, #49	@ 0x31
    data = 0x0B; // ±16g, правовыравнивание
 8001a44:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, ADXL345_ADDR << 1, ADXL345_DATA_FORMAT, 1, &data, 1, 100);
 8001a48:	21a6      	movs	r1, #166	@ 0xa6
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001a50:	4823      	ldr	r0, [pc, #140]	@ (8001ae0 <IMU_Init+0x168>)
 8001a52:	9500      	str	r5, [sp, #0]
 8001a54:	f002 f8b2 	bl	8003bbc <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Read(&hi2c1, HMC5883L_ADDR << 1, HMC5883L_ID_A, 1, &data, 1, 100);
 8001a58:	2401      	movs	r4, #1
 8001a5a:	2664      	movs	r6, #100	@ 0x64
 8001a5c:	4623      	mov	r3, r4
 8001a5e:	220a      	movs	r2, #10
 8001a60:	213c      	movs	r1, #60	@ 0x3c
 8001a62:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001a66:	481e      	ldr	r0, [pc, #120]	@ (8001ae0 <IMU_Init+0x168>)
 8001a68:	9500      	str	r5, [sp, #0]
 8001a6a:	f002 f937 	bl	8003cdc <HAL_I2C_Mem_Read>
    if(data != 'H') {
 8001a6e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8001a72:	2b48      	cmp	r3, #72	@ 0x48
 8001a74:	d123      	bne.n	8001abe <IMU_Init+0x146>
    data = 0x70; // 8 средних, 15Hz, нормальное измерение
 8001a76:	2370      	movs	r3, #112	@ 0x70
    HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDR << 1, HMC5883L_CONFIG_A, 1, &data, 1, 100);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	213c      	movs	r1, #60	@ 0x3c
    data = 0x70; // 8 средних, 15Hz, нормальное измерение
 8001a7c:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDR << 1, HMC5883L_CONFIG_A, 1, &data, 1, 100);
 8001a80:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001a84:	4623      	mov	r3, r4
 8001a86:	4816      	ldr	r0, [pc, #88]	@ (8001ae0 <IMU_Init+0x168>)
 8001a88:	9500      	str	r5, [sp, #0]
 8001a8a:	f002 f897 	bl	8003bbc <HAL_I2C_Mem_Write>
    data = 0x20; // ±1.3 Гаусс
 8001a8e:	2320      	movs	r3, #32
    HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDR << 1, HMC5883L_CONFIG_B, 1, &data, 1, 100);
 8001a90:	4622      	mov	r2, r4
 8001a92:	213c      	movs	r1, #60	@ 0x3c
    data = 0x20; // ±1.3 Гаусс
 8001a94:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDR << 1, HMC5883L_CONFIG_B, 1, &data, 1, 100);
 8001a98:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001a9c:	4623      	mov	r3, r4
 8001a9e:	4810      	ldr	r0, [pc, #64]	@ (8001ae0 <IMU_Init+0x168>)
 8001aa0:	9500      	str	r5, [sp, #0]
 8001aa2:	f002 f88b 	bl	8003bbc <HAL_I2C_Mem_Write>
    data = 0x00; // Непрерывное измерение
 8001aa6:	2300      	movs	r3, #0
    HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDR << 1, HMC5883L_MODE, 1, &data, 1, 100);
 8001aa8:	2202      	movs	r2, #2
    data = 0x00; // Непрерывное измерение
 8001aaa:	f88d 3017 	strb.w	r3, [sp, #23]
    HAL_I2C_Mem_Write(&hi2c1, HMC5883L_ADDR << 1, HMC5883L_MODE, 1, &data, 1, 100);
 8001aae:	213c      	movs	r1, #60	@ 0x3c
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8001ab6:	480a      	ldr	r0, [pc, #40]	@ (8001ae0 <IMU_Init+0x168>)
 8001ab8:	9500      	str	r5, [sp, #0]
 8001aba:	f002 f87f 	bl	8003bbc <HAL_I2C_Mem_Write>
    ADXL345_Init();
    HMC5883L_Init();
    
    // Инициализация калибровочных данных
    for(int i = 0; i < 3; i++) {
        calibration.gyro_offset[i] = 0.0f;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <IMU_Init+0x170>)
 8001ac0:	2224      	movs	r2, #36	@ 0x24
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f007 fc5a 	bl	800937e <memset>
        calibration.accel_offset[i] = 0.0f;
        calibration.mag_offset[i] = 0.0f;
        calibration.mag_scale[i] = 1.0f;
 8001aca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001ace:	6242      	str	r2, [r0, #36]	@ 0x24
 8001ad0:	6282      	str	r2, [r0, #40]	@ 0x28
 8001ad2:	62c2      	str	r2, [r0, #44]	@ 0x2c
    }
}
 8001ad4:	b006      	add	sp, #24
 8001ad6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ada:	bf00      	nop
 8001adc:	40005400 	.word	0x40005400
 8001ae0:	200004e8 	.word	0x200004e8
 8001ae4:	00061a80 	.word	0x00061a80
 8001ae8:	2000056c 	.word	0x2000056c

08001aec <IMU_Update>:

void IMU_Update(void) {
 8001aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint8_t data[6];
    int16_t raw;
    
    // Чтение данных гироскопа
    HAL_I2C_Mem_Read(&hi2c1, ITG3205_ADDR << 1, ITG3205_GYRO_XOUT_H, 1, data, 6, 100);
 8001af0:	2764      	movs	r7, #100	@ 0x64
 8001af2:	f04f 0806 	mov.w	r8, #6
void IMU_Update(void) {
 8001af6:	b089      	sub	sp, #36	@ 0x24
    HAL_I2C_Mem_Read(&hi2c1, ITG3205_ADDR << 1, ITG3205_GYRO_XOUT_H, 1, data, 6, 100);
 8001af8:	ae06      	add	r6, sp, #24
 8001afa:	2301      	movs	r3, #1
 8001afc:	221d      	movs	r2, #29
 8001afe:	21d0      	movs	r1, #208	@ 0xd0
 8001b00:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001b04:	9600      	str	r6, [sp, #0]
 8001b06:	489a      	ldr	r0, [pc, #616]	@ (8001d70 <IMU_Update+0x284>)
 8001b08:	f002 f8e8 	bl	8003cdc <HAL_I2C_Mem_Read>
    raw = (data[0] << 8) | data[1];
    imu_data.gyro_x = (raw / 14.375f) - calibration.gyro_offset[0];
 8001b0c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8001b10:	4d98      	ldr	r5, [pc, #608]	@ (8001d74 <IMU_Update+0x288>)
 8001b12:	bac0      	revsh	r0, r0
 8001b14:	f7ff f8ae 	bl	8000c74 <__aeabi_i2f>
 8001b18:	4997      	ldr	r1, [pc, #604]	@ (8001d78 <IMU_Update+0x28c>)
 8001b1a:	f7ff f9b3 	bl	8000e84 <__aeabi_fdiv>
 8001b1e:	6829      	ldr	r1, [r5, #0]
 8001b20:	f7fe fff2 	bl	8000b08 <__aeabi_fsub>
 8001b24:	4c95      	ldr	r4, [pc, #596]	@ (8001d7c <IMU_Update+0x290>)
 8001b26:	6020      	str	r0, [r4, #0]
    raw = (data[2] << 8) | data[3];
    imu_data.gyro_y = (raw / 14.375f) - calibration.gyro_offset[1];
 8001b28:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8001b2c:	bac0      	revsh	r0, r0
 8001b2e:	f7ff f8a1 	bl	8000c74 <__aeabi_i2f>
 8001b32:	4991      	ldr	r1, [pc, #580]	@ (8001d78 <IMU_Update+0x28c>)
 8001b34:	f7ff f9a6 	bl	8000e84 <__aeabi_fdiv>
 8001b38:	6869      	ldr	r1, [r5, #4]
 8001b3a:	f7fe ffe5 	bl	8000b08 <__aeabi_fsub>
 8001b3e:	6060      	str	r0, [r4, #4]
    raw = (data[4] << 8) | data[5];
    imu_data.gyro_z = (raw / 14.375f) - calibration.gyro_offset[2];
 8001b40:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8001b44:	bac0      	revsh	r0, r0
 8001b46:	f7ff f895 	bl	8000c74 <__aeabi_i2f>
 8001b4a:	498b      	ldr	r1, [pc, #556]	@ (8001d78 <IMU_Update+0x28c>)
 8001b4c:	f7ff f99a 	bl	8000e84 <__aeabi_fdiv>
 8001b50:	68a9      	ldr	r1, [r5, #8]
 8001b52:	f7fe ffd9 	bl	8000b08 <__aeabi_fsub>
    
    // Чтение температуры
    HAL_I2C_Mem_Read(&hi2c1, ITG3205_ADDR << 1, ITG3205_TEMP_OUT_H, 1, data, 2, 100);
 8001b56:	2302      	movs	r3, #2
 8001b58:	221b      	movs	r2, #27
    imu_data.gyro_z = (raw / 14.375f) - calibration.gyro_offset[2];
 8001b5a:	60a0      	str	r0, [r4, #8]
    HAL_I2C_Mem_Read(&hi2c1, ITG3205_ADDR << 1, ITG3205_TEMP_OUT_H, 1, data, 2, 100);
 8001b5c:	21d0      	movs	r1, #208	@ 0xd0
 8001b5e:	e9cd 6300 	strd	r6, r3, [sp]
 8001b62:	9702      	str	r7, [sp, #8]
 8001b64:	2301      	movs	r3, #1
 8001b66:	4882      	ldr	r0, [pc, #520]	@ (8001d70 <IMU_Update+0x284>)
 8001b68:	f002 f8b8 	bl	8003cdc <HAL_I2C_Mem_Read>
    raw = (data[0] << 8) | data[1];
    imu_data.temp = 35.0f + ((raw + 13200) / 280.0f);
 8001b6c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8001b70:	bac0      	revsh	r0, r0
 8001b72:	f500 504e 	add.w	r0, r0, #13184	@ 0x3380
 8001b76:	3010      	adds	r0, #16
 8001b78:	f7ff f87c 	bl	8000c74 <__aeabi_i2f>
 8001b7c:	4980      	ldr	r1, [pc, #512]	@ (8001d80 <IMU_Update+0x294>)
 8001b7e:	f7ff f981 	bl	8000e84 <__aeabi_fdiv>
 8001b82:	4980      	ldr	r1, [pc, #512]	@ (8001d84 <IMU_Update+0x298>)
 8001b84:	f7fe ffc2 	bl	8000b0c <__addsf3>
    
    // Чтение данных акселерометра
    HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR << 1, ADXL345_DATAX0, 1, data, 6, 100);
 8001b88:	2301      	movs	r3, #1
 8001b8a:	2232      	movs	r2, #50	@ 0x32
    imu_data.temp = 35.0f + ((raw + 13200) / 280.0f);
 8001b8c:	60e0      	str	r0, [r4, #12]
    HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR << 1, ADXL345_DATAX0, 1, data, 6, 100);
 8001b8e:	21a6      	movs	r1, #166	@ 0xa6
 8001b90:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001b94:	9600      	str	r6, [sp, #0]
 8001b96:	4876      	ldr	r0, [pc, #472]	@ (8001d70 <IMU_Update+0x284>)
 8001b98:	f002 f8a0 	bl	8003cdc <HAL_I2C_Mem_Read>
    raw = (data[1] << 8) | data[0];
    imu_data.accel_x = (raw * 0.0039f) - calibration.accel_offset[0];
 8001b9c:	f9bd 0018 	ldrsh.w	r0, [sp, #24]
 8001ba0:	f7ff f868 	bl	8000c74 <__aeabi_i2f>
 8001ba4:	4978      	ldr	r1, [pc, #480]	@ (8001d88 <IMU_Update+0x29c>)
 8001ba6:	f7ff f8b9 	bl	8000d1c <__aeabi_fmul>
 8001baa:	68e9      	ldr	r1, [r5, #12]
 8001bac:	f7fe ffac 	bl	8000b08 <__aeabi_fsub>
 8001bb0:	6120      	str	r0, [r4, #16]
    raw = (data[3] << 8) | data[2];
    imu_data.accel_y = (raw * 0.0039f) - calibration.accel_offset[1];
 8001bb2:	f9bd 001a 	ldrsh.w	r0, [sp, #26]
 8001bb6:	f7ff f85d 	bl	8000c74 <__aeabi_i2f>
 8001bba:	4973      	ldr	r1, [pc, #460]	@ (8001d88 <IMU_Update+0x29c>)
 8001bbc:	f7ff f8ae 	bl	8000d1c <__aeabi_fmul>
 8001bc0:	6929      	ldr	r1, [r5, #16]
 8001bc2:	f7fe ffa1 	bl	8000b08 <__aeabi_fsub>
 8001bc6:	6160      	str	r0, [r4, #20]
    raw = (data[5] << 8) | data[4];
    imu_data.accel_z = (raw * 0.0039f) - calibration.accel_offset[2];
 8001bc8:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8001bcc:	f7ff f852 	bl	8000c74 <__aeabi_i2f>
 8001bd0:	496d      	ldr	r1, [pc, #436]	@ (8001d88 <IMU_Update+0x29c>)
 8001bd2:	f7ff f8a3 	bl	8000d1c <__aeabi_fmul>
 8001bd6:	6969      	ldr	r1, [r5, #20]
 8001bd8:	f7fe ff96 	bl	8000b08 <__aeabi_fsub>
    
    // Чтение данных магнитометра
    HAL_I2C_Mem_Read(&hi2c1, HMC5883L_ADDR << 1, HMC5883L_DATA, 1, data, 6, 100);
 8001bdc:	2301      	movs	r3, #1
 8001bde:	2203      	movs	r2, #3
    imu_data.accel_z = (raw * 0.0039f) - calibration.accel_offset[2];
 8001be0:	61a0      	str	r0, [r4, #24]
    HAL_I2C_Mem_Read(&hi2c1, HMC5883L_ADDR << 1, HMC5883L_DATA, 1, data, 6, 100);
 8001be2:	213c      	movs	r1, #60	@ 0x3c
 8001be4:	e9cd 8701 	strd	r8, r7, [sp, #4]
 8001be8:	9600      	str	r6, [sp, #0]
 8001bea:	4861      	ldr	r0, [pc, #388]	@ (8001d70 <IMU_Update+0x284>)
 8001bec:	f002 f876 	bl	8003cdc <HAL_I2C_Mem_Read>
    raw = (data[0] << 8) | data[1];
    imu_data.mag_x = (raw * 0.92f) - calibration.mag_offset[0];
    raw = (data[2] << 8) | data[3];
    imu_data.mag_y = (raw * 0.92f) - calibration.mag_offset[1];
 8001bf0:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8001bf4:	bac0      	revsh	r0, r0
 8001bf6:	f7ff f83d 	bl	8000c74 <__aeabi_i2f>
 8001bfa:	4964      	ldr	r1, [pc, #400]	@ (8001d8c <IMU_Update+0x2a0>)
 8001bfc:	f7ff f88e 	bl	8000d1c <__aeabi_fmul>
 8001c00:	69e9      	ldr	r1, [r5, #28]
 8001c02:	f7fe ff81 	bl	8000b08 <__aeabi_fsub>
 8001c06:	4680      	mov	r8, r0
    raw = (data[4] << 8) | data[5];
    imu_data.mag_z = (raw * 0.92f) - calibration.mag_offset[2];
 8001c08:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 8001c0c:	bac0      	revsh	r0, r0
 8001c0e:	f7ff f831 	bl	8000c74 <__aeabi_i2f>
 8001c12:	495e      	ldr	r1, [pc, #376]	@ (8001d8c <IMU_Update+0x2a0>)
 8001c14:	f7ff f882 	bl	8000d1c <__aeabi_fmul>
 8001c18:	6a29      	ldr	r1, [r5, #32]
 8001c1a:	f7fe ff75 	bl	8000b08 <__aeabi_fsub>
 8001c1e:	4607      	mov	r7, r0
    imu_data.mag_x = (raw * 0.92f) - calibration.mag_offset[0];
 8001c20:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8001c24:	bac0      	revsh	r0, r0
 8001c26:	f7ff f825 	bl	8000c74 <__aeabi_i2f>
 8001c2a:	4958      	ldr	r1, [pc, #352]	@ (8001d8c <IMU_Update+0x2a0>)
 8001c2c:	f7ff f876 	bl	8000d1c <__aeabi_fmul>
 8001c30:	69a9      	ldr	r1, [r5, #24]
 8001c32:	f7fe ff69 	bl	8000b08 <__aeabi_fsub>
    
    // Применение масштабирования магнитометра
    imu_data.mag_x *= calibration.mag_scale[0];
 8001c36:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001c38:	f7ff f870 	bl	8000d1c <__aeabi_fmul>
    imu_data.mag_y *= calibration.mag_scale[1];
 8001c3c:	6aa9      	ldr	r1, [r5, #40]	@ 0x28
    imu_data.mag_x *= calibration.mag_scale[0];
 8001c3e:	4606      	mov	r6, r0
 8001c40:	61e0      	str	r0, [r4, #28]
    imu_data.mag_y *= calibration.mag_scale[1];
 8001c42:	4640      	mov	r0, r8
 8001c44:	f7ff f86a 	bl	8000d1c <__aeabi_fmul>
    imu_data.mag_z *= calibration.mag_scale[2];
 8001c48:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
    imu_data.mag_y *= calibration.mag_scale[1];
 8001c4a:	4683      	mov	fp, r0
 8001c4c:	6220      	str	r0, [r4, #32]
    imu_data.mag_z *= calibration.mag_scale[2];
 8001c4e:	4638      	mov	r0, r7
 8001c50:	f7ff f864 	bl	8000d1c <__aeabi_fmul>
    
    // Вычисление ориентации
    // Roll (крен)
    imu_data.roll = atan2f(imu_data.accel_y, imu_data.accel_z) * 180.0f / 3.14159f;
 8001c54:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001c58:	f8d4 a018 	ldr.w	sl, [r4, #24]
    imu_data.mag_z *= calibration.mag_scale[2];
 8001c5c:	4605      	mov	r5, r0
    imu_data.roll = atan2f(imu_data.accel_y, imu_data.accel_z) * 180.0f / 3.14159f;
 8001c5e:	4651      	mov	r1, sl
    imu_data.mag_z *= calibration.mag_scale[2];
 8001c60:	6260      	str	r0, [r4, #36]	@ 0x24
    imu_data.roll = atan2f(imu_data.accel_y, imu_data.accel_z) * 180.0f / 3.14159f;
 8001c62:	4648      	mov	r0, r9
 8001c64:	f009 fc32 	bl	800b4cc <atan2f>
 8001c68:	4949      	ldr	r1, [pc, #292]	@ (8001d90 <IMU_Update+0x2a4>)
 8001c6a:	f7ff f857 	bl	8000d1c <__aeabi_fmul>
 8001c6e:	4949      	ldr	r1, [pc, #292]	@ (8001d94 <IMU_Update+0x2a8>)
 8001c70:	f7ff f908 	bl	8000e84 <__aeabi_fdiv>
    
    // Pitch (тангаж)
    imu_data.pitch = atan2f(-imu_data.accel_x, 
        sqrtf(imu_data.accel_y * imu_data.accel_y + 
 8001c74:	4649      	mov	r1, r9
    imu_data.roll = atan2f(imu_data.accel_y, imu_data.accel_z) * 180.0f / 3.14159f;
 8001c76:	4680      	mov	r8, r0
 8001c78:	62a0      	str	r0, [r4, #40]	@ 0x28
        sqrtf(imu_data.accel_y * imu_data.accel_y + 
 8001c7a:	4648      	mov	r0, r9
 8001c7c:	f7ff f84e 	bl	8000d1c <__aeabi_fmul>
              imu_data.accel_z * imu_data.accel_z)) * 180.0f / 3.14159f;
 8001c80:	4651      	mov	r1, sl
        sqrtf(imu_data.accel_y * imu_data.accel_y + 
 8001c82:	4681      	mov	r9, r0
              imu_data.accel_z * imu_data.accel_z)) * 180.0f / 3.14159f;
 8001c84:	4650      	mov	r0, sl
 8001c86:	f7ff f849 	bl	8000d1c <__aeabi_fmul>
 8001c8a:	4601      	mov	r1, r0
    imu_data.pitch = atan2f(-imu_data.accel_x, 
 8001c8c:	4648      	mov	r0, r9
 8001c8e:	f7fe ff3d 	bl	8000b0c <__addsf3>
 8001c92:	6927      	ldr	r7, [r4, #16]
 8001c94:	f009 fc1c 	bl	800b4d0 <sqrtf>
 8001c98:	f107 4700 	add.w	r7, r7, #2147483648	@ 0x80000000
 8001c9c:	4601      	mov	r1, r0
 8001c9e:	4638      	mov	r0, r7
 8001ca0:	f009 fc14 	bl	800b4cc <atan2f>
              imu_data.accel_z * imu_data.accel_z)) * 180.0f / 3.14159f;
 8001ca4:	493a      	ldr	r1, [pc, #232]	@ (8001d90 <IMU_Update+0x2a4>)
 8001ca6:	f7ff f839 	bl	8000d1c <__aeabi_fmul>
 8001caa:	493a      	ldr	r1, [pc, #232]	@ (8001d94 <IMU_Update+0x2a8>)
 8001cac:	f7ff f8ea 	bl	8000e84 <__aeabi_fdiv>
    
    // Yaw (рыскание)
    float mag_x = imu_data.mag_x * cosf(imu_data.pitch * 3.14159f / 180.0f) +
 8001cb0:	4938      	ldr	r1, [pc, #224]	@ (8001d94 <IMU_Update+0x2a8>)
    imu_data.pitch = atan2f(-imu_data.accel_x, 
 8001cb2:	62e0      	str	r0, [r4, #44]	@ 0x2c
    float mag_x = imu_data.mag_x * cosf(imu_data.pitch * 3.14159f / 180.0f) +
 8001cb4:	f7ff f832 	bl	8000d1c <__aeabi_fmul>
 8001cb8:	4935      	ldr	r1, [pc, #212]	@ (8001d90 <IMU_Update+0x2a4>)
 8001cba:	f7ff f8e3 	bl	8000e84 <__aeabi_fdiv>
 8001cbe:	4681      	mov	r9, r0
 8001cc0:	f009 fc20 	bl	800b504 <cosf>
 8001cc4:	4607      	mov	r7, r0
                 imu_data.mag_z * sinf(imu_data.pitch * 3.14159f / 180.0f);
 8001cc6:	4648      	mov	r0, r9
 8001cc8:	f009 fc54 	bl	800b574 <sinf>
    float mag_y = imu_data.mag_x * sinf(imu_data.roll * 3.14159f / 180.0f) * 
 8001ccc:	4931      	ldr	r1, [pc, #196]	@ (8001d94 <IMU_Update+0x2a8>)
                 imu_data.mag_z * sinf(imu_data.pitch * 3.14159f / 180.0f);
 8001cce:	4681      	mov	r9, r0
    float mag_y = imu_data.mag_x * sinf(imu_data.roll * 3.14159f / 180.0f) * 
 8001cd0:	4640      	mov	r0, r8
 8001cd2:	f7ff f823 	bl	8000d1c <__aeabi_fmul>
 8001cd6:	492e      	ldr	r1, [pc, #184]	@ (8001d90 <IMU_Update+0x2a4>)
 8001cd8:	f7ff f8d4 	bl	8000e84 <__aeabi_fdiv>
 8001cdc:	4682      	mov	sl, r0
 8001cde:	f009 fc49 	bl	800b574 <sinf>
 8001ce2:	4680      	mov	r8, r0
                 sinf(imu_data.pitch * 3.14159f / 180.0f) +
                 imu_data.mag_y * cosf(imu_data.roll * 3.14159f / 180.0f) -
 8001ce4:	4650      	mov	r0, sl
 8001ce6:	f009 fc0d 	bl	800b504 <cosf>
    float mag_x = imu_data.mag_x * cosf(imu_data.pitch * 3.14159f / 180.0f) +
 8001cea:	4639      	mov	r1, r7
                 imu_data.mag_y * cosf(imu_data.roll * 3.14159f / 180.0f) -
 8001cec:	9005      	str	r0, [sp, #20]
    float mag_x = imu_data.mag_x * cosf(imu_data.pitch * 3.14159f / 180.0f) +
 8001cee:	4630      	mov	r0, r6
 8001cf0:	f7ff f814 	bl	8000d1c <__aeabi_fmul>
                 imu_data.mag_z * sinf(imu_data.pitch * 3.14159f / 180.0f);
 8001cf4:	4649      	mov	r1, r9
    float mag_x = imu_data.mag_x * cosf(imu_data.pitch * 3.14159f / 180.0f) +
 8001cf6:	4682      	mov	sl, r0
                 imu_data.mag_z * sinf(imu_data.pitch * 3.14159f / 180.0f);
 8001cf8:	4628      	mov	r0, r5
 8001cfa:	f7ff f80f 	bl	8000d1c <__aeabi_fmul>
 8001cfe:	4601      	mov	r1, r0
    float mag_x = imu_data.mag_x * cosf(imu_data.pitch * 3.14159f / 180.0f) +
 8001d00:	4650      	mov	r0, sl
 8001d02:	f7fe ff03 	bl	8000b0c <__addsf3>
    float mag_y = imu_data.mag_x * sinf(imu_data.roll * 3.14159f / 180.0f) * 
 8001d06:	4641      	mov	r1, r8
    float mag_x = imu_data.mag_x * cosf(imu_data.pitch * 3.14159f / 180.0f) +
 8001d08:	4682      	mov	sl, r0
    float mag_y = imu_data.mag_x * sinf(imu_data.roll * 3.14159f / 180.0f) * 
 8001d0a:	4630      	mov	r0, r6
 8001d0c:	f7ff f806 	bl	8000d1c <__aeabi_fmul>
 8001d10:	4649      	mov	r1, r9
 8001d12:	f7ff f803 	bl	8000d1c <__aeabi_fmul>
                 imu_data.mag_y * cosf(imu_data.roll * 3.14159f / 180.0f) -
 8001d16:	9905      	ldr	r1, [sp, #20]
    float mag_y = imu_data.mag_x * sinf(imu_data.roll * 3.14159f / 180.0f) * 
 8001d18:	4606      	mov	r6, r0
                 imu_data.mag_y * cosf(imu_data.roll * 3.14159f / 180.0f) -
 8001d1a:	4658      	mov	r0, fp
 8001d1c:	f7fe fffe 	bl	8000d1c <__aeabi_fmul>
 8001d20:	4601      	mov	r1, r0
                 sinf(imu_data.pitch * 3.14159f / 180.0f) +
 8001d22:	4630      	mov	r0, r6
 8001d24:	f7fe fef2 	bl	8000b0c <__addsf3>
                 imu_data.mag_z * sinf(imu_data.roll * 3.14159f / 180.0f) * 
 8001d28:	4641      	mov	r1, r8
                 sinf(imu_data.pitch * 3.14159f / 180.0f) +
 8001d2a:	4606      	mov	r6, r0
                 imu_data.mag_z * sinf(imu_data.roll * 3.14159f / 180.0f) * 
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f7fe fff5 	bl	8000d1c <__aeabi_fmul>
 8001d32:	4639      	mov	r1, r7
 8001d34:	f7fe fff2 	bl	8000d1c <__aeabi_fmul>
 8001d38:	4601      	mov	r1, r0
    float mag_y = imu_data.mag_x * sinf(imu_data.roll * 3.14159f / 180.0f) * 
 8001d3a:	4630      	mov	r0, r6
 8001d3c:	f7fe fee4 	bl	8000b08 <__aeabi_fsub>
                 cosf(imu_data.pitch * 3.14159f / 180.0f);
    
    imu_data.yaw = atan2f(mag_y, mag_x) * 180.0f / 3.14159f;
 8001d40:	4651      	mov	r1, sl
 8001d42:	f009 fbc3 	bl	800b4cc <atan2f>
 8001d46:	4912      	ldr	r1, [pc, #72]	@ (8001d90 <IMU_Update+0x2a4>)
 8001d48:	f7fe ffe8 	bl	8000d1c <__aeabi_fmul>
 8001d4c:	4911      	ldr	r1, [pc, #68]	@ (8001d94 <IMU_Update+0x2a8>)
 8001d4e:	f7ff f899 	bl	8000e84 <__aeabi_fdiv>
    if(imu_data.yaw < 0) imu_data.yaw += 360.0f;
 8001d52:	2100      	movs	r1, #0
    imu_data.yaw = atan2f(mag_y, mag_x) * 180.0f / 3.14159f;
 8001d54:	4605      	mov	r5, r0
    if(imu_data.yaw < 0) imu_data.yaw += 360.0f;
 8001d56:	f7ff f97f 	bl	8001058 <__aeabi_fcmplt>
 8001d5a:	b120      	cbz	r0, 8001d66 <IMU_Update+0x27a>
 8001d5c:	4628      	mov	r0, r5
 8001d5e:	490e      	ldr	r1, [pc, #56]	@ (8001d98 <IMU_Update+0x2ac>)
 8001d60:	f7fe fed4 	bl	8000b0c <__addsf3>
 8001d64:	4605      	mov	r5, r0
    imu_data.yaw = atan2f(mag_y, mag_x) * 180.0f / 3.14159f;
 8001d66:	6325      	str	r5, [r4, #48]	@ 0x30
}
 8001d68:	b009      	add	sp, #36	@ 0x24
 8001d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d6e:	bf00      	nop
 8001d70:	200004e8 	.word	0x200004e8
 8001d74:	2000056c 	.word	0x2000056c
 8001d78:	41660000 	.word	0x41660000
 8001d7c:	2000059c 	.word	0x2000059c
 8001d80:	438c0000 	.word	0x438c0000
 8001d84:	420c0000 	.word	0x420c0000
 8001d88:	3b7f9724 	.word	0x3b7f9724
 8001d8c:	3f6b851f 	.word	0x3f6b851f
 8001d90:	43340000 	.word	0x43340000
 8001d94:	40490fd0 	.word	0x40490fd0
 8001d98:	43b40000 	.word	0x43b40000

08001d9c <IMU_GetData>:

const IMU_Data* IMU_GetData(void) {
    return &imu_data;
}
 8001d9c:	4800      	ldr	r0, [pc, #0]	@ (8001da0 <IMU_GetData+0x4>)
 8001d9e:	4770      	bx	lr
 8001da0:	2000059c 	.word	0x2000059c

08001da4 <IMU_Calibrate>:
    // TODO: Реализовать калибровку IMU
    // 1. Сбор данных в неподвижном состоянии
    // 2. Вычисление смещений гироскопа
    // 3. Вычисление смещений акселерометра
    // 4. Калибровка магнитометра (сбор данных при вращении)
}
 8001da4:	4770      	bx	lr

08001da6 <IMU_ProcessI2C>:

void IMU_ProcessI2C(void) {}
 8001da6:	4770      	bx	lr

08001da8 <IMU_ProcessError>:
 8001da8:	4770      	bx	lr

08001daa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001daa:	b530      	push	{r4, r5, lr}
 8001dac:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dae:	2214      	movs	r2, #20
 8001db0:	2100      	movs	r1, #0
 8001db2:	a80c      	add	r0, sp, #48	@ 0x30
 8001db4:	f007 fae3 	bl	800937e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db8:	2214      	movs	r2, #20
 8001dba:	2100      	movs	r1, #0
 8001dbc:	eb0d 0002 	add.w	r0, sp, r2
 8001dc0:	f007 fadd 	bl	800937e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dc4:	2210      	movs	r2, #16
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	a801      	add	r0, sp, #4
 8001dca:	f007 fad8 	bl	800937e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dce:	2401      	movs	r4, #1
 8001dd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd4:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dd6:	e9cd 430a 	strd	r4, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dda:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001dde:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de2:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001de4:	940e      	str	r4, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001de6:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de8:	f003 fd8c 	bl	8005904 <HAL_RCC_OscConfig>
 8001dec:	b108      	cbz	r0, 8001df2 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dee:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df2:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df4:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfc:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dfe:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e02:	4621      	mov	r1, r4
 8001e04:	a805      	add	r0, sp, #20
 8001e06:	f003 ff3f 	bl	8005c88 <HAL_RCC_ClockConfig>
 8001e0a:	b108      	cbz	r0, 8001e10 <SystemClock_Config+0x66>
 8001e0c:	b672      	cpsid	i
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <SystemClock_Config+0x64>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001e10:	2312      	movs	r3, #18
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001e12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_USB;
 8001e16:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001e18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e1c:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001e1e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e22:	f003 ffed 	bl	8005e00 <HAL_RCCEx_PeriphCLKConfig>
 8001e26:	b108      	cbz	r0, 8001e2c <SystemClock_Config+0x82>
 8001e28:	b672      	cpsid	i
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <SystemClock_Config+0x80>
}
 8001e2c:	b015      	add	sp, #84	@ 0x54
 8001e2e:	bd30      	pop	{r4, r5, pc}

08001e30 <main>:
{
 8001e30:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8001e32:	f000 fcb1 	bl	8002798 <HAL_Init>
  SystemClock_Config();
 8001e36:	f7ff ffb8 	bl	8001daa <SystemClock_Config>
  MX_GPIO_Init();
 8001e3a:	f7ff fa05 	bl	8001248 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001e3e:	f7ff f9a5 	bl	800118c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001e42:	f7ff fd39 	bl	80018b8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001e46:	f000 fa15 	bl	8002274 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001e4a:	f000 fa47 	bl	80022dc <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001e4e:	f000 fab1 	bl	80023b4 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001e52:	f006 f88f 	bl	8007f74 <MX_USB_DEVICE_Init>
  MotorControl_Init();
 8001e56:	f000 f8e9 	bl	800202c <MotorControl_Init>
  HallSensors_Init();
 8001e5a:	f7ff fc61 	bl	8001720 <HallSensors_Init>
  IMU_Init();
 8001e5e:	f7ff fd8b 	bl	8001978 <IMU_Init>
  GPS_Init();
 8001e62:	f7ff fc25 	bl	80016b0 <GPS_Init>
  MX_USB_DEVICE_Init();
 8001e66:	f006 f885 	bl	8007f74 <MX_USB_DEVICE_Init>
  HallSensors_Calibrate();
 8001e6a:	f7ff fcef 	bl	800184c <HallSensors_Calibrate>
  IMU_Calibrate();
 8001e6e:	f7ff ff99 	bl	8001da4 <IMU_Calibrate>
  HAL_TIM_Base_Start_IT(&htim2);
 8001e72:	4815      	ldr	r0, [pc, #84]	@ (8001ec8 <main+0x98>)
 8001e74:	f004 f8a6 	bl	8005fc4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001e78:	4814      	ldr	r0, [pc, #80]	@ (8001ecc <main+0x9c>)
 8001e7a:	f004 f8a3 	bl	8005fc4 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 4);
 8001e7e:	2204      	movs	r2, #4
 8001e80:	4913      	ldr	r1, [pc, #76]	@ (8001ed0 <main+0xa0>)
 8001e82:	4814      	ldr	r0, [pc, #80]	@ (8001ed4 <main+0xa4>)
 8001e84:	f000 ff28 	bl	8002cd8 <HAL_ADC_Start_DMA>
  HAL_UART_Receive_IT(&huart2, gps_rx_buffer, 1);
 8001e88:	2201      	movs	r2, #1
 8001e8a:	4913      	ldr	r1, [pc, #76]	@ (8001ed8 <main+0xa8>)
 8001e8c:	4813      	ldr	r0, [pc, #76]	@ (8001edc <main+0xac>)
 8001e8e:	f004 fe02 	bl	8006a96 <HAL_UART_Receive_IT>
    if (current_time - last_telemetry >= TELEMETRY_INTERVAL) {
 8001e92:	4e13      	ldr	r6, [pc, #76]	@ (8001ee0 <main+0xb0>)
    uint32_t current_time = HAL_GetTick();
 8001e94:	f000 fc9e 	bl	80027d4 <HAL_GetTick>
 8001e98:	4604      	mov	r4, r0
    IMU_Update();
 8001e9a:	f7ff fe27 	bl	8001aec <IMU_Update>
    GPS_Update();
 8001e9e:	f7ff fc2d 	bl	80016fc <GPS_Update>
    if (current_time - last_telemetry >= TELEMETRY_INTERVAL) {
 8001ea2:	6833      	ldr	r3, [r6, #0]
 8001ea4:	1ae3      	subs	r3, r4, r3
 8001ea6:	2b63      	cmp	r3, #99	@ 0x63
 8001ea8:	d90b      	bls.n	8001ec2 <main+0x92>
      const IMU_Data* imu_data = IMU_GetData();
 8001eaa:	f7ff ff77 	bl	8001d9c <IMU_GetData>
 8001eae:	4605      	mov	r5, r0
      const GPS_Data* gps_data = GPS_GetData();
 8001eb0:	f7ff fc26 	bl	8001700 <GPS_GetData>
 8001eb4:	4601      	mov	r1, r0
      if (imu_data != NULL && gps_data != NULL) {
 8001eb6:	b11d      	cbz	r5, 8001ec0 <main+0x90>
 8001eb8:	b110      	cbz	r0, 8001ec0 <main+0x90>
        USB_CDC_SendTelemetry(imu_data, gps_data);
 8001eba:	4628      	mov	r0, r5
 8001ebc:	f000 fb04 	bl	80024c8 <USB_CDC_SendTelemetry>
      last_telemetry = current_time;
 8001ec0:	6034      	str	r4, [r6, #0]
    USB_CDC_ProcessReceivedData();
 8001ec2:	f000 faf1 	bl	80024a8 <USB_CDC_ProcessReceivedData>
  {
 8001ec6:	e7e5      	b.n	8001e94 <main+0x64>
 8001ec8:	200006a8 	.word	0x200006a8
 8001ecc:	200005f4 	.word	0x200005f4
 8001ed0:	200005d0 	.word	0x200005d0
 8001ed4:	20000360 	.word	0x20000360
 8001ed8:	200005d8 	.word	0x200005d8
 8001edc:	2000075c 	.word	0x2000075c
 8001ee0:	200005dc 	.word	0x200005dc

08001ee4 <Error_Handler>:
 8001ee4:	b672      	cpsid	i
  while (1)
 8001ee6:	e7fe      	b.n	8001ee6 <Error_Handler+0x2>

08001ee8 <MotorControl_Update>:
    
    motor_control.states[motor] = state;
    MotorControl_Update();
}

void MotorControl_Update(void) {
 8001ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eea:	4f4c      	ldr	r7, [pc, #304]	@ (800201c <MotorControl_Update+0x134>)
    // Обновляем биты в сдвиговых регистрах
    for(int motor = 0; motor < MOTOR_COUNT; motor++) {
 8001eec:	2600      	movs	r6, #0
 8001eee:	463c      	mov	r4, r7
        uint8_t reg = motor_mapping[motor].register_index;
        uint8_t bit1 = motor_mapping[motor].bit1;
        uint8_t bit2 = motor_mapping[motor].bit2;
        
        // Очищаем биты для текущего мотора
        motor_control.shift_registers[reg] &= ~((1 << bit1) | (1 << bit2));
 8001ef0:	f04f 0c01 	mov.w	ip, #1
 8001ef4:	494a      	ldr	r1, [pc, #296]	@ (8002020 <MotorControl_Update+0x138>)
 8001ef6:	780a      	ldrb	r2, [r1, #0]
 8001ef8:	784d      	ldrb	r5, [r1, #1]
 8001efa:	7888      	ldrb	r0, [r1, #2]
 8001efc:	4422      	add	r2, r4
 8001efe:	7a93      	ldrb	r3, [r2, #10]
 8001f00:	fa0c f505 	lsl.w	r5, ip, r5
 8001f04:	fa0c f000 	lsl.w	r0, ip, r0
 8001f08:	ea45 0e00 	orr.w	lr, r5, r0
 8001f0c:	ea23 030e 	bic.w	r3, r3, lr
 8001f10:	7293      	strb	r3, [r2, #10]
        
        // Устанавливаем новые биты в зависимости от состояния
        switch(motor_control.states[motor]) {
 8001f12:	f817 eb01 	ldrb.w	lr, [r7], #1
 8001f16:	f1be 0f01 	cmp.w	lr, #1
 8001f1a:	d079      	beq.n	8002010 <MotorControl_Update+0x128>
 8001f1c:	f1be 0f02 	cmp.w	lr, #2
 8001f20:	d079      	beq.n	8002016 <MotorControl_Update+0x12e>
    for(int motor = 0; motor < MOTOR_COUNT; motor++) {
 8001f22:	3601      	adds	r6, #1
 8001f24:	2e0a      	cmp	r6, #10
 8001f26:	f101 0103 	add.w	r1, r1, #3
 8001f2a:	d1e4      	bne.n	8001ef6 <MotorControl_Update+0xe>
        }
    }
    
    // Отправляем данные в сдвиговые регистры
    // U2
    for(int i = 0; i < 8; i++) {
 8001f2c:	2500      	movs	r5, #0
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, (motor_control.shift_registers[0] >> i) & 0x01);
 8001f2e:	4e3d      	ldr	r6, [pc, #244]	@ (8002024 <MotorControl_Update+0x13c>)
 8001f30:	7aa2      	ldrb	r2, [r4, #10]
 8001f32:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f36:	412a      	asrs	r2, r5
 8001f38:	4630      	mov	r0, r6
 8001f3a:	f002 0201 	and.w	r2, r2, #1
 8001f3e:	f001 f9f7 	bl	8003330 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001f42:	2201      	movs	r2, #1
 8001f44:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f001 f9f1 	bl	8003330 <HAL_GPIO_WritePin>
    for(int i = 0; i < 8; i++) {
 8001f4e:	3501      	adds	r5, #1
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001f50:	2200      	movs	r2, #0
 8001f52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f56:	4630      	mov	r0, r6
 8001f58:	f001 f9ea 	bl	8003330 <HAL_GPIO_WritePin>
    for(int i = 0; i < 8; i++) {
 8001f5c:	2d08      	cmp	r5, #8
 8001f5e:	d1e7      	bne.n	8001f30 <MotorControl_Update+0x48>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8001f60:	2201      	movs	r2, #1
 8001f62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f66:	482f      	ldr	r0, [pc, #188]	@ (8002024 <MotorControl_Update+0x13c>)
 8001f68:	f001 f9e2 	bl	8003330 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f72:	482c      	ldr	r0, [pc, #176]	@ (8002024 <MotorControl_Update+0x13c>)
 8001f74:	f001 f9dc 	bl	8003330 <HAL_GPIO_WritePin>
    
    // U5
    for(int i = 0; i < 8; i++) {
 8001f78:	2500      	movs	r5, #0
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, (motor_control.shift_registers[1] >> i) & 0x01);
 8001f7a:	4f2a      	ldr	r7, [pc, #168]	@ (8002024 <MotorControl_Update+0x13c>)
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001f7c:	4e2a      	ldr	r6, [pc, #168]	@ (8002028 <MotorControl_Update+0x140>)
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, (motor_control.shift_registers[1] >> i) & 0x01);
 8001f7e:	7ae2      	ldrb	r2, [r4, #11]
 8001f80:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001f84:	412a      	asrs	r2, r5
 8001f86:	4638      	mov	r0, r7
 8001f88:	f002 0201 	and.w	r2, r2, #1
 8001f8c:	f001 f9d0 	bl	8003330 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001f90:	2201      	movs	r2, #1
 8001f92:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f96:	4630      	mov	r0, r6
 8001f98:	f001 f9ca 	bl	8003330 <HAL_GPIO_WritePin>
    for(int i = 0; i < 8; i++) {
 8001f9c:	3501      	adds	r5, #1
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fa4:	4630      	mov	r0, r6
 8001fa6:	f001 f9c3 	bl	8003330 <HAL_GPIO_WritePin>
    for(int i = 0; i < 8; i++) {
 8001faa:	2d08      	cmp	r5, #8
 8001fac:	d1e7      	bne.n	8001f7e <MotorControl_Update+0x96>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fb4:	481b      	ldr	r0, [pc, #108]	@ (8002024 <MotorControl_Update+0x13c>)
 8001fb6:	f001 f9bb 	bl	8003330 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001fc0:	4818      	ldr	r0, [pc, #96]	@ (8002024 <MotorControl_Update+0x13c>)
 8001fc2:	f001 f9b5 	bl	8003330 <HAL_GPIO_WritePin>
    
    // U8
    for(int i = 0; i < 8; i++) {
 8001fc6:	2500      	movs	r5, #0
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (motor_control.shift_registers[2] >> i) & 0x01);
 8001fc8:	4f17      	ldr	r7, [pc, #92]	@ (8002028 <MotorControl_Update+0x140>)
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001fca:	4e16      	ldr	r6, [pc, #88]	@ (8002024 <MotorControl_Update+0x13c>)
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, (motor_control.shift_registers[2] >> i) & 0x01);
 8001fcc:	7b22      	ldrb	r2, [r4, #12]
 8001fce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fd2:	412a      	asrs	r2, r5
 8001fd4:	4638      	mov	r0, r7
 8001fd6:	f002 0201 	and.w	r2, r2, #1
 8001fda:	f001 f9a9 	bl	8003330 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001fde:	2201      	movs	r2, #1
 8001fe0:	2120      	movs	r1, #32
 8001fe2:	4630      	mov	r0, r6
 8001fe4:	f001 f9a4 	bl	8003330 <HAL_GPIO_WritePin>
    for(int i = 0; i < 8; i++) {
 8001fe8:	3501      	adds	r5, #1
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	2120      	movs	r1, #32
 8001fee:	4630      	mov	r0, r6
 8001ff0:	f001 f99e 	bl	8003330 <HAL_GPIO_WritePin>
    for(int i = 0; i < 8; i++) {
 8001ff4:	2d08      	cmp	r5, #8
 8001ff6:	d1e9      	bne.n	8001fcc <MotorControl_Update+0xe4>
    }
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	2110      	movs	r1, #16
 8001ffc:	4809      	ldr	r0, [pc, #36]	@ (8002024 <MotorControl_Update+0x13c>)
 8001ffe:	f001 f997 	bl	8003330 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
}
 8002002:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002006:	2200      	movs	r2, #0
 8002008:	2110      	movs	r1, #16
 800200a:	4806      	ldr	r0, [pc, #24]	@ (8002024 <MotorControl_Update+0x13c>)
 800200c:	f001 b990 	b.w	8003330 <HAL_GPIO_WritePin>
                motor_control.shift_registers[reg] |= (1 << bit1);
 8002010:	432b      	orrs	r3, r5
                motor_control.shift_registers[reg] |= (1 << bit2);
 8002012:	7293      	strb	r3, [r2, #10]
                break;
 8002014:	e785      	b.n	8001f22 <MotorControl_Update+0x3a>
                motor_control.shift_registers[reg] |= (1 << bit2);
 8002016:	4303      	orrs	r3, r0
 8002018:	e7fb      	b.n	8002012 <MotorControl_Update+0x12a>
 800201a:	bf00      	nop
 800201c:	200005e0 	.word	0x200005e0
 8002020:	0800c760 	.word	0x0800c760
 8002024:	40010c00 	.word	0x40010c00
 8002028:	40010800 	.word	0x40010800

0800202c <MotorControl_Init>:
void MotorControl_Init(void) {
 800202c:	b570      	push	{r4, r5, r6, lr}
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202e:	2400      	movs	r4, #0
void MotorControl_Init(void) {
 8002030:	b086      	sub	sp, #24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002032:	4b23      	ldr	r3, [pc, #140]	@ (80020c0 <MotorControl_Init+0x94>)
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002034:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002038:	4d22      	ldr	r5, [pc, #136]	@ (80020c4 <MotorControl_Init+0x98>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203a:	f042 0204 	orr.w	r2, r2, #4
 800203e:	619a      	str	r2, [r3, #24]
 8002040:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	4628      	mov	r0, r5
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002044:	f002 0204 	and.w	r2, r2, #4
 8002048:	9200      	str	r2, [sp, #0]
 800204a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800204c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002050:	f042 0208 	orr.w	r2, r2, #8
 8002054:	619a      	str	r2, [r3, #24]
 8002056:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002058:	f44f 42e0 	mov.w	r2, #28672	@ 0x7000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002064:	2301      	movs	r3, #1
 8002066:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800206a:	2303      	movs	r3, #3
 800206c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206e:	f001 f88b 	bl	8003188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11;
 8002072:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002076:	4628      	mov	r0, r5
 8002078:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_11;
 800207a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f001 f884 	bl	8003188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002080:	f44f 7300 	mov.w	r3, #512	@ 0x200
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	4e10      	ldr	r6, [pc, #64]	@ (80020c8 <MotorControl_Init+0x9c>)
 8002086:	a902      	add	r1, sp, #8
 8002088:	4630      	mov	r0, r6
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800208a:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208c:	f001 f87c 	bl	8003188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002090:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002094:	4630      	mov	r0, r6
 8002096:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002098:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209a:	f001 f875 	bl	8003188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800209e:	2330      	movs	r3, #48	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	4628      	mov	r0, r5
 80020a2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020a4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a6:	f001 f86f 	bl	8003188 <HAL_GPIO_Init>
        motor_control.states[i] = MOTOR_STOP;
 80020aa:	4b08      	ldr	r3, [pc, #32]	@ (80020cc <MotorControl_Init+0xa0>)
 80020ac:	601c      	str	r4, [r3, #0]
 80020ae:	605c      	str	r4, [r3, #4]
 80020b0:	811c      	strh	r4, [r3, #8]
        motor_control.shift_registers[i] = 0;
 80020b2:	729c      	strb	r4, [r3, #10]
 80020b4:	72dc      	strb	r4, [r3, #11]
 80020b6:	731c      	strb	r4, [r3, #12]
    MotorControl_Update();
 80020b8:	f7ff ff16 	bl	8001ee8 <MotorControl_Update>
}
 80020bc:	b006      	add	sp, #24
 80020be:	bd70      	pop	{r4, r5, r6, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010c00 	.word	0x40010c00
 80020c8:	40010800 	.word	0x40010800
 80020cc:	200005e0 	.word	0x200005e0

080020d0 <MotorControl_SetMotorState>:
    if(motor >= MOTOR_COUNT) return;
 80020d0:	2809      	cmp	r0, #9
 80020d2:	d803      	bhi.n	80020dc <MotorControl_SetMotorState+0xc>
    motor_control.states[motor] = state;
 80020d4:	4b02      	ldr	r3, [pc, #8]	@ (80020e0 <MotorControl_SetMotorState+0x10>)
 80020d6:	5419      	strb	r1, [r3, r0]
    MotorControl_Update();
 80020d8:	f7ff bf06 	b.w	8001ee8 <MotorControl_Update>
}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	200005e0 	.word	0x200005e0

080020e4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80020e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002120 <HAL_MspInit+0x3c>)
{
 80020e6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80020e8:	699a      	ldr	r2, [r3, #24]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	619a      	str	r2, [r3, #24]
 80020f0:	699a      	ldr	r2, [r3, #24]
 80020f2:	f002 0201 	and.w	r2, r2, #1
 80020f6:	9200      	str	r2, [sp, #0]
 80020f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	69da      	ldr	r2, [r3, #28]
 80020fc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002100:	61da      	str	r2, [r3, #28]
 8002102:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8002104:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800210e:	6853      	ldr	r3, [r2, #4]
 8002110:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002114:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002118:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800211a:	b002      	add	sp, #8
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	40010000 	.word	0x40010000

08002128 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002128:	e7fe      	b.n	8002128 <NMI_Handler>

0800212a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800212a:	e7fe      	b.n	800212a <HardFault_Handler>

0800212c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <MemManage_Handler>

0800212e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800212e:	e7fe      	b.n	800212e <BusFault_Handler>

08002130 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <UsageFault_Handler>

08002132 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002132:	4770      	bx	lr

08002134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002134:	4770      	bx	lr

08002136 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002136:	4770      	bx	lr

08002138 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002138:	f000 bb40 	b.w	80027bc <HAL_IncTick>

0800213c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800213c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */
  HallSensors_ProcessADC();
 800213e:	f7ff fbb9 	bl	80018b4 <HallSensors_ProcessADC>
  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002142:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc1);
 8002146:	4801      	ldr	r0, [pc, #4]	@ (800214c <ADC1_2_IRQHandler+0x10>)
 8002148:	f000 bc39 	b.w	80029be <HAL_ADC_IRQHandler>
 800214c:	20000360 	.word	0x20000360

08002150 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */
  // USB_CDC_ProcessReceivedData(); // закомментировано, требуется аргументы
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002150:	4801      	ldr	r0, [pc, #4]	@ (8002158 <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002152:	f002 bdb3 	b.w	8004cbc <HAL_PCD_IRQHandler>
 8002156:	bf00      	nop
 8002158:	20001cc8 	.word	0x20001cc8

0800215c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800215c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
  MotorControl_Update();
 800215e:	f7ff fec3 	bl	8001ee8 <MotorControl_Update>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002162:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim2);
 8002166:	4801      	ldr	r0, [pc, #4]	@ (800216c <TIM2_IRQHandler+0x10>)
 8002168:	f003 bf56 	b.w	8006018 <HAL_TIM_IRQHandler>
 800216c:	200006a8 	.word	0x200006a8

08002170 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002170:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */
  IMU_Update();
 8002172:	f7ff fcbb 	bl	8001aec <IMU_Update>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002176:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim3);
 800217a:	4801      	ldr	r0, [pc, #4]	@ (8002180 <TIM3_IRQHandler+0x10>)
 800217c:	f003 bf4c 	b.w	8006018 <HAL_TIM_IRQHandler>
 8002180:	200005f4 	.word	0x200005f4

08002184 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002184:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */
  IMU_ProcessI2C();
 8002186:	f7ff fe0e 	bl	8001da6 <IMU_ProcessI2C>
  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800218a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800218e:	4801      	ldr	r0, [pc, #4]	@ (8002194 <I2C1_EV_IRQHandler+0x10>)
 8002190:	f001 bee8 	b.w	8003f64 <HAL_I2C_EV_IRQHandler>
 8002194:	200004e8 	.word	0x200004e8

08002198 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002198:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */
  IMU_ProcessError();
 800219a:	f7ff fe05 	bl	8001da8 <IMU_ProcessError>
  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800219e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80021a2:	4801      	ldr	r0, [pc, #4]	@ (80021a8 <I2C1_ER_IRQHandler+0x10>)
 80021a4:	f002 bb28 	b.w	80047f8 <HAL_I2C_ER_IRQHandler>
 80021a8:	200004e8 	.word	0x200004e8

080021ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80021ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */
  GPS_ProcessUART();
 80021ae:	f7ff faab 	bl	8001708 <GPS_ProcessUART>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_UART_IRQHandler(&huart2);
 80021b6:	4801      	ldr	r0, [pc, #4]	@ (80021bc <USART2_IRQHandler+0x10>)
 80021b8:	f004 baa8 	b.w	800670c <HAL_UART_IRQHandler>
 80021bc:	2000075c 	.word	0x2000075c

080021c0 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80021c0:	2001      	movs	r0, #1
 80021c2:	4770      	bx	lr

080021c4 <_kill>:

int _kill(int pid, int sig)
{
 80021c4:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021c6:	f007 f965 	bl	8009494 <__errno>
 80021ca:	2316      	movs	r3, #22
 80021cc:	6003      	str	r3, [r0, #0]
  return -1;
}
 80021ce:	f04f 30ff 	mov.w	r0, #4294967295
 80021d2:	bd08      	pop	{r3, pc}

080021d4 <_exit>:

void _exit (int status)
{
 80021d4:	b508      	push	{r3, lr}
  errno = EINVAL;
 80021d6:	f007 f95d 	bl	8009494 <__errno>
 80021da:	2316      	movs	r3, #22
 80021dc:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80021de:	e7fe      	b.n	80021de <_exit+0xa>

080021e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e0:	b570      	push	{r4, r5, r6, lr}
 80021e2:	460d      	mov	r5, r1
 80021e4:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e6:	460e      	mov	r6, r1
 80021e8:	1b73      	subs	r3, r6, r5
 80021ea:	429c      	cmp	r4, r3
 80021ec:	dc01      	bgt.n	80021f2 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 80021ee:	4620      	mov	r0, r4
 80021f0:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 80021f2:	f3af 8000 	nop.w
 80021f6:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021fa:	e7f5      	b.n	80021e8 <_read+0x8>

080021fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021fc:	b570      	push	{r4, r5, r6, lr}
 80021fe:	460d      	mov	r5, r1
 8002200:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002202:	460e      	mov	r6, r1
 8002204:	1b73      	subs	r3, r6, r5
 8002206:	429c      	cmp	r4, r3
 8002208:	dc01      	bgt.n	800220e <_write+0x12>
  {
    __io_putchar(*ptr++);
  }
  return len;
}
 800220a:	4620      	mov	r0, r4
 800220c:	bd70      	pop	{r4, r5, r6, pc}
    __io_putchar(*ptr++);
 800220e:	f816 0b01 	ldrb.w	r0, [r6], #1
 8002212:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	e7f5      	b.n	8002204 <_write+0x8>

08002218 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002218:	f04f 30ff 	mov.w	r0, #4294967295
 800221c:	4770      	bx	lr

0800221e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800221e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8002222:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8002224:	604b      	str	r3, [r1, #4]
}
 8002226:	4770      	bx	lr

08002228 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002228:	2001      	movs	r0, #1
 800222a:	4770      	bx	lr

0800222c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800222c:	2000      	movs	r0, #0
 800222e:	4770      	bx	lr

08002230 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002230:	4a0b      	ldr	r2, [pc, #44]	@ (8002260 <_sbrk+0x30>)
{
 8002232:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8002234:	6811      	ldr	r1, [r2, #0]
{
 8002236:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8002238:	b909      	cbnz	r1, 800223e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800223a:	490a      	ldr	r1, [pc, #40]	@ (8002264 <_sbrk+0x34>)
 800223c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800223e:	6810      	ldr	r0, [r2, #0]
 8002240:	4909      	ldr	r1, [pc, #36]	@ (8002268 <_sbrk+0x38>)
 8002242:	4c0a      	ldr	r4, [pc, #40]	@ (800226c <_sbrk+0x3c>)
 8002244:	4403      	add	r3, r0
 8002246:	1b09      	subs	r1, r1, r4
 8002248:	428b      	cmp	r3, r1
 800224a:	d906      	bls.n	800225a <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800224c:	f007 f922 	bl	8009494 <__errno>
 8002250:	230c      	movs	r3, #12
 8002252:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002254:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8002258:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800225a:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 800225c:	e7fc      	b.n	8002258 <_sbrk+0x28>
 800225e:	bf00      	nop
 8002260:	200005f0 	.word	0x200005f0
 8002264:	20002120 	.word	0x20002120
 8002268:	20005000 	.word	0x20005000
 800226c:	00000400 	.word	0x00000400

08002270 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002270:	4770      	bx	lr
	...

08002274 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002276:	2210      	movs	r2, #16
 8002278:	2100      	movs	r1, #0
 800227a:	a802      	add	r0, sp, #8
 800227c:	f007 f87f 	bl	800937e <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 71;
 8002280:	2247      	movs	r2, #71	@ 0x47
 8002282:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
  htim2.Instance = TIM2;
 8002286:	4814      	ldr	r0, [pc, #80]	@ (80022d8 <MX_TIM2_Init+0x64>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002288:	2300      	movs	r3, #0
  htim2.Init.Prescaler = 71;
 800228a:	e9c0 1200 	strd	r1, r2, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999;
 800228e:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002292:	e9cd 3300 	strd	r3, r3, [sp]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002296:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800229a:	6083      	str	r3, [r0, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022a0:	f004 f872 	bl	8006388 <HAL_TIM_Base_Init>
 80022a4:	b108      	cbz	r0, 80022aa <MX_TIM2_Init+0x36>
  {
    Error_Handler();
 80022a6:	f7ff fe1d 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022ae:	480a      	ldr	r0, [pc, #40]	@ (80022d8 <MX_TIM2_Init+0x64>)
 80022b0:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022b4:	f003 ff8c 	bl	80061d0 <HAL_TIM_ConfigClockSource>
 80022b8:	b108      	cbz	r0, 80022be <MX_TIM2_Init+0x4a>
  {
    Error_Handler();
 80022ba:	f7ff fe13 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022be:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022c0:	4669      	mov	r1, sp
 80022c2:	4805      	ldr	r0, [pc, #20]	@ (80022d8 <MX_TIM2_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c4:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022c8:	f004 f894 	bl	80063f4 <HAL_TIMEx_MasterConfigSynchronization>
 80022cc:	b108      	cbz	r0, 80022d2 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80022ce:	f7ff fe09 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022d2:	b007      	add	sp, #28
 80022d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80022d8:	200006a8 	.word	0x200006a8

080022dc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80022dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022de:	2210      	movs	r2, #16
 80022e0:	2100      	movs	r1, #0
 80022e2:	a802      	add	r0, sp, #8
 80022e4:	f007 f84b 	bl	800937e <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 71;
 80022e8:	2247      	movs	r2, #71	@ 0x47
  htim3.Instance = TIM3;
 80022ea:	4815      	ldr	r0, [pc, #84]	@ (8002340 <MX_TIM3_Init+0x64>)
  htim3.Init.Prescaler = 71;
 80022ec:	4915      	ldr	r1, [pc, #84]	@ (8002344 <MX_TIM3_Init+0x68>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ee:	2300      	movs	r3, #0
  htim3.Init.Prescaler = 71;
 80022f0:	e9c0 1200 	strd	r1, r2, [r0]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 999;
 80022f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f8:	e9cd 3300 	strd	r3, r3, [sp]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fc:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002300:	6083      	str	r3, [r0, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002302:	2380      	movs	r3, #128	@ 0x80
 8002304:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002306:	f004 f83f 	bl	8006388 <HAL_TIM_Base_Init>
 800230a:	b108      	cbz	r0, 8002310 <MX_TIM3_Init+0x34>
  {
    Error_Handler();
 800230c:	f7ff fdea 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002310:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002314:	480a      	ldr	r0, [pc, #40]	@ (8002340 <MX_TIM3_Init+0x64>)
 8002316:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002318:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800231a:	f003 ff59 	bl	80061d0 <HAL_TIM_ConfigClockSource>
 800231e:	b108      	cbz	r0, 8002324 <MX_TIM3_Init+0x48>
  {
    Error_Handler();
 8002320:	f7ff fde0 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002324:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002326:	4669      	mov	r1, sp
 8002328:	4805      	ldr	r0, [pc, #20]	@ (8002340 <MX_TIM3_Init+0x64>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800232a:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800232e:	f004 f861 	bl	80063f4 <HAL_TIMEx_MasterConfigSynchronization>
 8002332:	b108      	cbz	r0, 8002338 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8002334:	f7ff fdd6 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002338:	b007      	add	sp, #28
 800233a:	f85d fb04 	ldr.w	pc, [sp], #4
 800233e:	bf00      	nop
 8002340:	200005f4 	.word	0x200005f4
 8002344:	40000400 	.word	0x40000400

08002348 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 8002348:	6803      	ldr	r3, [r0, #0]
{
 800234a:	b507      	push	{r0, r1, r2, lr}
  if(tim_baseHandle->Instance==TIM2)
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002350:	d115      	bne.n	800237e <HAL_TIM_Base_MspInit+0x36>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002352:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002356:	69da      	ldr	r2, [r3, #28]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8002358:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800235a:	f042 0201 	orr.w	r2, r2, #1
 800235e:	61da      	str	r2, [r3, #28]
 8002360:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 8002362:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 800236a:	2104      	movs	r1, #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 800236c:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 4, 0);
 800236e:	f000 fe13 	bl	8002f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002372:	201c      	movs	r0, #28
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002374:	b003      	add	sp, #12
 8002376:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800237a:	f000 be3d 	b.w	8002ff8 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM3)
 800237e:	4a0b      	ldr	r2, [pc, #44]	@ (80023ac <HAL_TIM_Base_MspInit+0x64>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d110      	bne.n	80023a6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002384:	4b0a      	ldr	r3, [pc, #40]	@ (80023b0 <HAL_TIM_Base_MspInit+0x68>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002386:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002388:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800238a:	2105      	movs	r1, #5
    __HAL_RCC_TIM3_CLK_ENABLE();
 800238c:	f042 0202 	orr.w	r2, r2, #2
 8002390:	61da      	str	r2, [r3, #28]
 8002392:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8002394:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800239e:	f000 fdfb 	bl	8002f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80023a2:	201d      	movs	r0, #29
 80023a4:	e7e6      	b.n	8002374 <HAL_TIM_Base_MspInit+0x2c>
}
 80023a6:	b003      	add	sp, #12
 80023a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40021000 	.word	0x40021000

080023b4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80023b4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 9600;
 80023b6:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
  huart2.Instance = USART2;
 80023ba:	480a      	ldr	r0, [pc, #40]	@ (80023e4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 9600;
 80023bc:	4a0a      	ldr	r2, [pc, #40]	@ (80023e8 <MX_USART2_UART_Init+0x34>)
 80023be:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023c2:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023c4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023ce:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023d2:	f004 fb0d 	bl	80069f0 <HAL_UART_Init>
 80023d6:	b118      	cbz	r0, 80023e0 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80023dc:	f7ff bd82 	b.w	8001ee4 <Error_Handler>
}
 80023e0:	bd08      	pop	{r3, pc}
 80023e2:	bf00      	nop
 80023e4:	2000075c 	.word	0x2000075c
 80023e8:	40004400 	.word	0x40004400

080023ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023ec:	b530      	push	{r4, r5, lr}
 80023ee:	4604      	mov	r4, r0
 80023f0:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f2:	2210      	movs	r2, #16
 80023f4:	2100      	movs	r1, #0
 80023f6:	a802      	add	r0, sp, #8
 80023f8:	f006 ffc1 	bl	800937e <memset>
  if(uartHandle->Instance==USART2)
 80023fc:	6822      	ldr	r2, [r4, #0]
 80023fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002468 <HAL_UART_MspInit+0x7c>)
 8002400:	429a      	cmp	r2, r3
 8002402:	d12f      	bne.n	8002464 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002404:	f503 33e6 	add.w	r3, r3, #117760	@ 0x1cc00
 8002408:	69da      	ldr	r2, [r3, #28]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2502      	movs	r5, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 800240c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002410:	61da      	str	r2, [r3, #28]
 8002412:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002414:	4815      	ldr	r0, [pc, #84]	@ (800246c <HAL_UART_MspInit+0x80>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002416:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800241a:	9200      	str	r2, [sp, #0]
 800241c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002420:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	f042 0204 	orr.w	r2, r2, #4
 8002426:	619a      	str	r2, [r3, #24]
 8002428:	699b      	ldr	r3, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242a:	2400      	movs	r4, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2304      	movs	r3, #4
 8002436:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800243a:	2303      	movs	r3, #3
 800243c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f000 fea3 	bl	8003188 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002442:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	4809      	ldr	r0, [pc, #36]	@ (800246c <HAL_UART_MspInit+0x80>)
 8002446:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800244a:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002450:	f000 fe9a 	bl	8003188 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002454:	2026      	movs	r0, #38	@ 0x26
 8002456:	4622      	mov	r2, r4
 8002458:	4629      	mov	r1, r5
 800245a:	f000 fd9d 	bl	8002f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800245e:	2026      	movs	r0, #38	@ 0x26
 8002460:	f000 fdca 	bl	8002ff8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002464:	b007      	add	sp, #28
 8002466:	bd30      	pop	{r4, r5, pc}
 8002468:	40004400 	.word	0x40004400
 800246c:	40010800 	.word	0x40010800

08002470 <USB_CDC_SendData>:
void USB_CDC_Init(void) {
    MX_USB_DEVICE_Init();
}

void USB_CDC_SendData(const uint8_t* data, uint16_t size) {
    if (size > USB_CDC_TX_BUFFER_SIZE) {
 8002470:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8002474:	bf28      	it	cs
 8002476:	f44f 7100 	movcs.w	r1, #512	@ 0x200
void USB_CDC_SendData(const uint8_t* data, uint16_t size) {
 800247a:	b538      	push	{r3, r4, r5, lr}
        size = USB_CDC_TX_BUFFER_SIZE;
    }
    
    memcpy(tx_buffer, data, size);
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <USB_CDC_SendData+0x30>)
    if (size > USB_CDC_TX_BUFFER_SIZE) {
 800247e:	460c      	mov	r4, r1
    memcpy(tx_buffer, data, size);
 8002480:	460a      	mov	r2, r1
 8002482:	4601      	mov	r1, r0
 8002484:	4618      	mov	r0, r3
 8002486:	f007 f832 	bl	80094ee <memcpy>
    USBD_CDC_SetTxBuffer(&hUsbDeviceFS, tx_buffer, size);
 800248a:	4d06      	ldr	r5, [pc, #24]	@ (80024a4 <USB_CDC_SendData+0x34>)
 800248c:	4622      	mov	r2, r4
 800248e:	4601      	mov	r1, r0
 8002490:	4628      	mov	r0, r5
 8002492:	f005 f96f 	bl	8007774 <USBD_CDC_SetTxBuffer>
    USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8002496:	4628      	mov	r0, r5
}
 8002498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800249c:	f005 b978 	b.w	8007790 <USBD_CDC_TransmitPacket>
 80024a0:	200007d4 	.word	0x200007d4
 80024a4:	20000de0 	.word	0x20000de0

080024a8 <USB_CDC_ProcessReceivedData>:

void USB_CDC_ProcessReceivedData(void) {
    // Проверка наличия данных в буфере
    if (usb_cdc_buffer_len > 0) {
 80024a8:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <USB_CDC_ProcessReceivedData+0x18>)
 80024aa:	881a      	ldrh	r2, [r3, #0]
 80024ac:	b132      	cbz	r2, 80024bc <USB_CDC_ProcessReceivedData+0x14>
        // Обработка команд
        // Здесь можно добавить логику обработки полученных данных
        
        // Очистка буфера
        usb_cdc_buffer_len = 0;
 80024ae:	2100      	movs	r1, #0
        memset(usb_cdc_buffer, 0, USB_CDC_BUFFER_SIZE);
 80024b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024b4:	4803      	ldr	r0, [pc, #12]	@ (80024c4 <USB_CDC_ProcessReceivedData+0x1c>)
        usb_cdc_buffer_len = 0;
 80024b6:	8019      	strh	r1, [r3, #0]
        memset(usb_cdc_buffer, 0, USB_CDC_BUFFER_SIZE);
 80024b8:	f006 bf61 	b.w	800937e <memset>
    }
}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	200009d4 	.word	0x200009d4
 80024c4:	200009d6 	.word	0x200009d6

080024c8 <USB_CDC_SendTelemetry>:

void USB_CDC_SendTelemetry(const IMU_Data* imu, const GPS_Data* gps) {
 80024c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024cc:	4605      	mov	r5, r0
 80024ce:	b0df      	sub	sp, #380	@ 0x17c
    int len = snprintf((char*)tx_buffer, USB_CDC_TX_BUFFER_SIZE,
 80024d0:	6900      	ldr	r0, [r0, #16]
void USB_CDC_SendTelemetry(const IMU_Data* imu, const GPS_Data* gps) {
 80024d2:	460c      	mov	r4, r1
    int len = snprintf((char*)tx_buffer, USB_CDC_TX_BUFFER_SIZE,
 80024d4:	f7fd ffb2 	bl	800043c <__aeabi_f2d>
 80024d8:	e9cd 0134 	strd	r0, r1, [sp, #208]	@ 0xd0
 80024dc:	6968      	ldr	r0, [r5, #20]
 80024de:	f7fd ffad 	bl	800043c <__aeabi_f2d>
 80024e2:	e9cd 0136 	strd	r0, r1, [sp, #216]	@ 0xd8
 80024e6:	69a8      	ldr	r0, [r5, #24]
 80024e8:	f7fd ffa8 	bl	800043c <__aeabi_f2d>
 80024ec:	e9cd 0138 	strd	r0, r1, [sp, #224]	@ 0xe0
 80024f0:	6828      	ldr	r0, [r5, #0]
 80024f2:	f7fd ffa3 	bl	800043c <__aeabi_f2d>
 80024f6:	e9cd 013a 	strd	r0, r1, [sp, #232]	@ 0xe8
 80024fa:	6868      	ldr	r0, [r5, #4]
 80024fc:	f7fd ff9e 	bl	800043c <__aeabi_f2d>
 8002500:	e9cd 013c 	strd	r0, r1, [sp, #240]	@ 0xf0
 8002504:	68a8      	ldr	r0, [r5, #8]
 8002506:	f7fd ff99 	bl	800043c <__aeabi_f2d>
 800250a:	e9cd 013e 	strd	r0, r1, [sp, #248]	@ 0xf8
 800250e:	69e8      	ldr	r0, [r5, #28]
 8002510:	f7fd ff94 	bl	800043c <__aeabi_f2d>
 8002514:	e9cd 0140 	strd	r0, r1, [sp, #256]	@ 0x100
 8002518:	6a28      	ldr	r0, [r5, #32]
 800251a:	f7fd ff8f 	bl	800043c <__aeabi_f2d>
 800251e:	e9cd 0142 	strd	r0, r1, [sp, #264]	@ 0x108
 8002522:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002524:	f7fd ff8a 	bl	800043c <__aeabi_f2d>
 8002528:	e9cd 0144 	strd	r0, r1, [sp, #272]	@ 0x110
 800252c:	68e8      	ldr	r0, [r5, #12]
 800252e:	f7fd ff85 	bl	800043c <__aeabi_f2d>
 8002532:	e9cd 0146 	strd	r0, r1, [sp, #280]	@ 0x118
 8002536:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8002538:	f7fd ff80 	bl	800043c <__aeabi_f2d>
 800253c:	e9cd 0148 	strd	r0, r1, [sp, #288]	@ 0x120
 8002540:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8002542:	f7fd ff7b 	bl	800043c <__aeabi_f2d>
 8002546:	e9cd 014a 	strd	r0, r1, [sp, #296]	@ 0x128
 800254a:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800254c:	f7fd ff76 	bl	800043c <__aeabi_f2d>
 8002550:	e9cd 014c 	strd	r0, r1, [sp, #304]	@ 0x130
 8002554:	6820      	ldr	r0, [r4, #0]
 8002556:	f7fd ff71 	bl	800043c <__aeabi_f2d>
 800255a:	e9cd 014e 	strd	r0, r1, [sp, #312]	@ 0x138
 800255e:	6860      	ldr	r0, [r4, #4]
 8002560:	f7fd ff6c 	bl	800043c <__aeabi_f2d>
 8002564:	e9cd 0150 	strd	r0, r1, [sp, #320]	@ 0x140
 8002568:	68a0      	ldr	r0, [r4, #8]
 800256a:	f7fd ff67 	bl	800043c <__aeabi_f2d>
 800256e:	e9cd 0152 	strd	r0, r1, [sp, #328]	@ 0x148
 8002572:	68e0      	ldr	r0, [r4, #12]
 8002574:	f7fd ff62 	bl	800043c <__aeabi_f2d>
 8002578:	e9cd 0154 	strd	r0, r1, [sp, #336]	@ 0x150
 800257c:	6920      	ldr	r0, [r4, #16]
 800257e:	f7fd ff5d 	bl	800043c <__aeabi_f2d>
 8002582:	7ea3      	ldrb	r3, [r4, #26]
 8002584:	8ba2      	ldrh	r2, [r4, #28]
 8002586:	e9cd 0156 	strd	r0, r1, [sp, #344]	@ 0x158
        gps->latitude, gps->longitude, gps->altitude,
        gps->speed, gps->course,
        gps->satellites, gps->fix,
        gps->hour, gps->minute, gps->second,
        gps->day, gps->month, gps->year,
        HallSensors_GetAngle(HALL_ALF),
 800258a:	2000      	movs	r0, #0
    int len = snprintf((char*)tx_buffer, USB_CDC_TX_BUFFER_SIZE,
 800258c:	935d      	str	r3, [sp, #372]	@ 0x174
 800258e:	925c      	str	r2, [sp, #368]	@ 0x170
 8002590:	7d26      	ldrb	r6, [r4, #20]
 8002592:	7d67      	ldrb	r7, [r4, #21]
 8002594:	f894 8016 	ldrb.w	r8, [r4, #22]
 8002598:	f894 9017 	ldrb.w	r9, [r4, #23]
 800259c:	f894 a018 	ldrb.w	sl, [r4, #24]
 80025a0:	f894 b019 	ldrb.w	fp, [r4, #25]
        HallSensors_GetAngle(HALL_ALF),
 80025a4:	f7ff f926 	bl	80017f4 <HallSensors_GetAngle>
    int len = snprintf((char*)tx_buffer, USB_CDC_TX_BUFFER_SIZE,
 80025a8:	f7fd ff48 	bl	800043c <__aeabi_f2d>
 80025ac:	e9cd 0158 	strd	r0, r1, [sp, #352]	@ 0x160
        HallSensors_GetAngle(HALL_ALR),
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7ff f91f 	bl	80017f4 <HallSensors_GetAngle>
    int len = snprintf((char*)tx_buffer, USB_CDC_TX_BUFFER_SIZE,
 80025b6:	f7fd ff41 	bl	800043c <__aeabi_f2d>
 80025ba:	e9cd 015a 	strd	r0, r1, [sp, #360]	@ 0x168
        HallSensors_GetAngle(HALL_ARF),
 80025be:	2002      	movs	r0, #2
 80025c0:	f7ff f918 	bl	80017f4 <HallSensors_GetAngle>
    int len = snprintf((char*)tx_buffer, USB_CDC_TX_BUFFER_SIZE,
 80025c4:	f7fd ff3a 	bl	800043c <__aeabi_f2d>
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
        HallSensors_GetAngle(HALL_ARR)
 80025cc:	2003      	movs	r0, #3
 80025ce:	f7ff f911 	bl	80017f4 <HallSensors_GetAngle>
    int len = snprintf((char*)tx_buffer, USB_CDC_TX_BUFFER_SIZE,
 80025d2:	f7fd ff33 	bl	800043c <__aeabi_f2d>
 80025d6:	9a5c      	ldr	r2, [sp, #368]	@ 0x170
 80025d8:	e9cd 4530 	strd	r4, r5, [sp, #192]	@ 0xc0
 80025dc:	e9dd 345a 	ldrd	r3, r4, [sp, #360]	@ 0x168
 80025e0:	e9cd 342e 	strd	r3, r4, [sp, #184]	@ 0xb8
 80025e4:	e9dd 3458 	ldrd	r3, r4, [sp, #352]	@ 0x160
 80025e8:	e9cd 342c 	strd	r3, r4, [sp, #176]	@ 0xb0
 80025ec:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
 80025ee:	e9cd 0132 	strd	r0, r1, [sp, #200]	@ 0xc8
 80025f2:	e9cd b329 	strd	fp, r3, [sp, #164]	@ 0xa4
 80025f6:	e9dd 3456 	ldrd	r3, r4, [sp, #344]	@ 0x158
 80025fa:	922b      	str	r2, [sp, #172]	@ 0xac
 80025fc:	e9cd 3422 	strd	r3, r4, [sp, #136]	@ 0x88
 8002600:	e9dd 3454 	ldrd	r3, r4, [sp, #336]	@ 0x150
 8002604:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002608:	e9cd 3420 	strd	r3, r4, [sp, #128]	@ 0x80
 800260c:	e9dd 3452 	ldrd	r3, r4, [sp, #328]	@ 0x148
 8002610:	e9cd 9a27 	strd	r9, sl, [sp, #156]	@ 0x9c
 8002614:	e9cd 341e 	strd	r3, r4, [sp, #120]	@ 0x78
 8002618:	e9dd 3450 	ldrd	r3, r4, [sp, #320]	@ 0x140
 800261c:	e9cd 7825 	strd	r7, r8, [sp, #148]	@ 0x94
 8002620:	e9cd 341c 	strd	r3, r4, [sp, #112]	@ 0x70
 8002624:	e9dd 344e 	ldrd	r3, r4, [sp, #312]	@ 0x138
 8002628:	4a24      	ldr	r2, [pc, #144]	@ (80026bc <USB_CDC_SendTelemetry+0x1f4>)
 800262a:	e9cd 341a 	strd	r3, r4, [sp, #104]	@ 0x68
 800262e:	e9dd 344c 	ldrd	r3, r4, [sp, #304]	@ 0x130
 8002632:	4823      	ldr	r0, [pc, #140]	@ (80026c0 <USB_CDC_SendTelemetry+0x1f8>)
 8002634:	e9cd 3418 	strd	r3, r4, [sp, #96]	@ 0x60
 8002638:	e9dd 344a 	ldrd	r3, r4, [sp, #296]	@ 0x128
 800263c:	9624      	str	r6, [sp, #144]	@ 0x90
 800263e:	e9cd 3416 	strd	r3, r4, [sp, #88]	@ 0x58
 8002642:	e9dd 3448 	ldrd	r3, r4, [sp, #288]	@ 0x120
 8002646:	e9cd 3414 	strd	r3, r4, [sp, #80]	@ 0x50
 800264a:	e9dd 3446 	ldrd	r3, r4, [sp, #280]	@ 0x118
 800264e:	e9cd 3412 	strd	r3, r4, [sp, #72]	@ 0x48
 8002652:	e9dd 3444 	ldrd	r3, r4, [sp, #272]	@ 0x110
 8002656:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 800265a:	e9dd 3442 	ldrd	r3, r4, [sp, #264]	@ 0x108
 800265e:	e9cd 340e 	strd	r3, r4, [sp, #56]	@ 0x38
 8002662:	e9dd 3440 	ldrd	r3, r4, [sp, #256]	@ 0x100
 8002666:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
 800266a:	e9dd 343e 	ldrd	r3, r4, [sp, #248]	@ 0xf8
 800266e:	e9cd 340a 	strd	r3, r4, [sp, #40]	@ 0x28
 8002672:	e9dd 343c 	ldrd	r3, r4, [sp, #240]	@ 0xf0
 8002676:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800267a:	e9dd 343a 	ldrd	r3, r4, [sp, #232]	@ 0xe8
 800267e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8002682:	e9dd 3438 	ldrd	r3, r4, [sp, #224]	@ 0xe0
 8002686:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800268a:	e9dd 3436 	ldrd	r3, r4, [sp, #216]	@ 0xd8
 800268e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002692:	e9dd 3434 	ldrd	r3, r4, [sp, #208]	@ 0xd0
 8002696:	e9cd 3400 	strd	r3, r4, [sp]
 800269a:	f006 fdf7 	bl	800928c <sniprintf>
    );
    
    if (len > 0 && len < USB_CDC_TX_BUFFER_SIZE) {
 800269e:	1e43      	subs	r3, r0, #1
 80026a0:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 80026a4:	d806      	bhi.n	80026b4 <USB_CDC_SendTelemetry+0x1ec>
        USB_CDC_SendData(tx_buffer, len);
 80026a6:	b281      	uxth	r1, r0
 80026a8:	4805      	ldr	r0, [pc, #20]	@ (80026c0 <USB_CDC_SendTelemetry+0x1f8>)
    }
}
 80026aa:	b05f      	add	sp, #380	@ 0x17c
 80026ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        USB_CDC_SendData(tx_buffer, len);
 80026b0:	f7ff bede 	b.w	8002470 <USB_CDC_SendData>
}
 80026b4:	b05f      	add	sp, #380	@ 0x17c
 80026b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ba:	bf00      	nop
 80026bc:	0800c530 	.word	0x0800c530
 80026c0:	200007d4 	.word	0x200007d4

080026c4 <USB_CDC_ReceiveCallback>:

void USB_CDC_ReceiveCallback(uint8_t* Buf, uint32_t *Len) {
    // Копируем полученные данные в буфер
    usb_cdc_buffer_len = (*Len < USB_CDC_BUFFER_SIZE) ? *Len : USB_CDC_BUFFER_SIZE;
 80026c4:	680a      	ldr	r2, [r1, #0]
 80026c6:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <USB_CDC_ReceiveCallback+0x18>)
 80026c8:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80026cc:	bf28      	it	cs
 80026ce:	f44f 6280 	movcs.w	r2, #1024	@ 0x400
    memcpy(usb_cdc_buffer, Buf, usb_cdc_buffer_len);
 80026d2:	4601      	mov	r1, r0
 80026d4:	4802      	ldr	r0, [pc, #8]	@ (80026e0 <USB_CDC_ReceiveCallback+0x1c>)
    usb_cdc_buffer_len = (*Len < USB_CDC_BUFFER_SIZE) ? *Len : USB_CDC_BUFFER_SIZE;
 80026d6:	801a      	strh	r2, [r3, #0]
    memcpy(usb_cdc_buffer, Buf, usb_cdc_buffer_len);
 80026d8:	f006 bf09 	b.w	80094ee <memcpy>
 80026dc:	200009d4 	.word	0x200009d4
 80026e0:	200009d6 	.word	0x200009d6

080026e4 <HAL_PCD_DataOutStageCallback>:
}

void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum) {
    if (epnum == CDC_OUT_EP) {
 80026e4:	2901      	cmp	r1, #1
 80026e6:	d102      	bne.n	80026ee <HAL_PCD_DataOutStageCallback+0xa>
        USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80026e8:	4801      	ldr	r0, [pc, #4]	@ (80026f0 <HAL_PCD_DataOutStageCallback+0xc>)
 80026ea:	f005 b86a 	b.w	80077c2 <USBD_CDC_ReceivePacket>
    }
}
 80026ee:	4770      	bx	lr
 80026f0:	20000de0 	.word	0x20000de0

080026f4 <HAL_PCD_DataInStageCallback>:

void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum) {
    if (epnum == CDC_IN_EP) {
 80026f4:	2981      	cmp	r1, #129	@ 0x81
 80026f6:	d102      	bne.n	80026fe <HAL_PCD_DataInStageCallback+0xa>
        USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80026f8:	4801      	ldr	r0, [pc, #4]	@ (8002700 <HAL_PCD_DataInStageCallback+0xc>)
 80026fa:	f005 b849 	b.w	8007790 <USBD_CDC_TransmitPacket>
    }
}
 80026fe:	4770      	bx	lr
 8002700:	20000de0 	.word	0x20000de0

08002704 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002704:	f7ff fdb4 	bl	8002270 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002708:	480b      	ldr	r0, [pc, #44]	@ (8002738 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800270a:	490c      	ldr	r1, [pc, #48]	@ (800273c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800270c:	4a0c      	ldr	r2, [pc, #48]	@ (8002740 <LoopFillZerobss+0x16>)
  movs r3, #0
 800270e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002710:	e002      	b.n	8002718 <LoopCopyDataInit>

08002712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002716:	3304      	adds	r3, #4

08002718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800271a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800271c:	d3f9      	bcc.n	8002712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800271e:	4a09      	ldr	r2, [pc, #36]	@ (8002744 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002720:	4c09      	ldr	r4, [pc, #36]	@ (8002748 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002724:	e001      	b.n	800272a <LoopFillZerobss>

08002726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002728:	3204      	adds	r2, #4

0800272a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800272a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800272c:	d3fb      	bcc.n	8002726 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800272e:	f006 feb7 	bl	80094a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002732:	f7ff fb7d 	bl	8001e30 <main>
  bx lr
 8002736:	4770      	bx	lr
  ldr r0, =_sdata
 8002738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800273c:	20000344 	.word	0x20000344
  ldr r2, =_sidata
 8002740:	0800ce30 	.word	0x0800ce30
  ldr r2, =_sbss
 8002744:	20000344 	.word	0x20000344
  ldr r4, =_ebss
 8002748:	20002120 	.word	0x20002120

0800274c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800274c:	e7fe      	b.n	800274c <CAN1_RX1_IRQHandler>
	...

08002750 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002750:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002752:	4b0e      	ldr	r3, [pc, #56]	@ (800278c <HAL_InitTick+0x3c>)
{
 8002754:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800275c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002760:	4a0b      	ldr	r2, [pc, #44]	@ (8002790 <HAL_InitTick+0x40>)
 8002762:	6810      	ldr	r0, [r2, #0]
 8002764:	fbb0 f0f3 	udiv	r0, r0, r3
 8002768:	f000 fc54 	bl	8003014 <HAL_SYSTICK_Config>
 800276c:	4604      	mov	r4, r0
 800276e:	b958      	cbnz	r0, 8002788 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002770:	2d0f      	cmp	r5, #15
 8002772:	d809      	bhi.n	8002788 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002774:	4602      	mov	r2, r0
 8002776:	4629      	mov	r1, r5
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f000 fc0c 	bl	8002f98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002780:	4620      	mov	r0, r4
 8002782:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <HAL_InitTick+0x44>)
 8002784:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002786:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002788:	2001      	movs	r0, #1
 800278a:	e7fc      	b.n	8002786 <HAL_InitTick+0x36>
 800278c:	20000004 	.word	0x20000004
 8002790:	20000000 	.word	0x20000000
 8002794:	20000008 	.word	0x20000008

08002798 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002798:	4a07      	ldr	r2, [pc, #28]	@ (80027b8 <HAL_Init+0x20>)
{
 800279a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800279c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800279e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027a0:	f043 0310 	orr.w	r3, r3, #16
 80027a4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027a6:	f000 fbe5 	bl	8002f74 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80027aa:	200f      	movs	r0, #15
 80027ac:	f7ff ffd0 	bl	8002750 <HAL_InitTick>
  HAL_MspInit();
 80027b0:	f7ff fc98 	bl	80020e4 <HAL_MspInit>
}
 80027b4:	2000      	movs	r0, #0
 80027b6:	bd08      	pop	{r3, pc}
 80027b8:	40022000 	.word	0x40022000

080027bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80027bc:	4a03      	ldr	r2, [pc, #12]	@ (80027cc <HAL_IncTick+0x10>)
 80027be:	4b04      	ldr	r3, [pc, #16]	@ (80027d0 <HAL_IncTick+0x14>)
 80027c0:	6811      	ldr	r1, [r2, #0]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	440b      	add	r3, r1
 80027c6:	6013      	str	r3, [r2, #0]
}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000dd8 	.word	0x20000dd8
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80027d4:	4b01      	ldr	r3, [pc, #4]	@ (80027dc <HAL_GetTick+0x8>)
 80027d6:	6818      	ldr	r0, [r3, #0]
}
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	20000dd8 	.word	0x20000dd8

080027e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80027e4:	f7ff fff6 	bl	80027d4 <HAL_GetTick>
 80027e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027ea:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80027ec:	bf1e      	ittt	ne
 80027ee:	4b04      	ldrne	r3, [pc, #16]	@ (8002800 <HAL_Delay+0x20>)
 80027f0:	781b      	ldrbne	r3, [r3, #0]
 80027f2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027f4:	f7ff ffee 	bl	80027d4 <HAL_GetTick>
 80027f8:	1b43      	subs	r3, r0, r5
 80027fa:	42a3      	cmp	r3, r4
 80027fc:	d3fa      	bcc.n	80027f4 <HAL_Delay+0x14>
  {
  }
}
 80027fe:	bd38      	pop	{r3, r4, r5, pc}
 8002800:	20000004 	.word	0x20000004

08002804 <ADC_DMAConvCplt>:
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002804:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002806:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002808:	f012 0f50 	tst.w	r2, #80	@ 0x50
 800280c:	d11a      	bne.n	8002844 <ADC_DMAConvCplt+0x40>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800280e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002814:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	6892      	ldr	r2, [r2, #8]
 800281a:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800281e:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002822:	d10c      	bne.n	800283e <ADC_DMAConvCplt+0x3a>
 8002824:	7b1a      	ldrb	r2, [r3, #12]
 8002826:	b952      	cbnz	r2, 800283e <ADC_DMAConvCplt+0x3a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002828:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800282a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002832:	04d2      	lsls	r2, r2, #19
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002834:	bf5e      	ittt	pl
 8002836:	6a9a      	ldrpl	r2, [r3, #40]	@ 0x28
 8002838:	f042 0201 	orrpl.w	r2, r2, #1
 800283c:	629a      	strpl	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
 800283e:	4618      	mov	r0, r3
 8002840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002842:	4710      	bx	r2
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	4718      	bx	r3

0800284a <ADC_DMAHalfConvCplt>:
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800284a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
 800284c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800284e:	4718      	bx	r3

08002850 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002850:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002852:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002858:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800285a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
 8002862:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002864:	4718      	bx	r3

08002866 <HAL_ADC_ErrorCallback>:
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
 8002866:	4770      	bx	lr

08002868 <HAL_ADC_ConvCpltCallback>:
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
 8002868:	4770      	bx	lr

0800286a <HAL_ADC_ConvHalfCpltCallback>:
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
 800286a:	4770      	bx	lr

0800286c <HAL_ADC_LevelOutOfWindowCallback>:
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
 800286c:	4770      	bx	lr
	...

08002870 <HAL_ADC_PollForConversion>:
{
 8002870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002872:	2600      	movs	r6, #0
{
 8002874:	4604      	mov	r4, r0
 8002876:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002878:	9601      	str	r6, [sp, #4]
  tickstart = HAL_GetTick();
 800287a:	f7ff ffab 	bl	80027d4 <HAL_GetTick>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800287e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8002880:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	05d1      	lsls	r1, r2, #23
 8002886:	d508      	bpl.n	800289a <HAL_ADC_PollForConversion+0x2a>
    return HAL_ERROR;
 8002888:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800288a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    __HAL_UNLOCK(hadc);
 800288c:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	f043 0320 	orr.w	r3, r3, #32
 8002894:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002896:	b003      	add	sp, #12
 8002898:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	05d2      	lsls	r2, r2, #23
 800289e:	d403      	bmi.n	80028a8 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80028a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80028a2:	f413 0f70 	tst.w	r3, #15728640	@ 0xf00000
 80028a6:	d03d      	beq.n	8002924 <HAL_ADC_PollForConversion+0xb4>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80028a8:	4b3d      	ldr	r3, [pc, #244]	@ (80029a0 <HAL_ADC_PollForConversion+0x130>)
 80028aa:	2002      	movs	r0, #2
 80028ac:	681e      	ldr	r6, [r3, #0]
 80028ae:	f003 fb21 	bl	8005ef4 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80028b2:	6823      	ldr	r3, [r4, #0]
 80028b4:	4a3b      	ldr	r2, [pc, #236]	@ (80029a4 <HAL_ADC_PollForConversion+0x134>)
 80028b6:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80028b8:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80028bc:	4211      	tst	r1, r2
 80028be:	4a3a      	ldr	r2, [pc, #232]	@ (80029a8 <HAL_ADC_PollForConversion+0x138>)
 80028c0:	d151      	bne.n	8002966 <HAL_ADC_PollForConversion+0xf6>
 80028c2:	68d8      	ldr	r0, [r3, #12]
 80028c4:	4939      	ldr	r1, [pc, #228]	@ (80029ac <HAL_ADC_PollForConversion+0x13c>)
 80028c6:	4208      	tst	r0, r1
 80028c8:	d14d      	bne.n	8002966 <HAL_ADC_PollForConversion+0xf6>
 80028ca:	6919      	ldr	r1, [r3, #16]
 80028cc:	4211      	tst	r1, r2
 80028ce:	d15b      	bne.n	8002988 <HAL_ADC_PollForConversion+0x118>
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	4b37      	ldr	r3, [pc, #220]	@ (80029b0 <HAL_ADC_PollForConversion+0x140>)
 80028d4:	421a      	tst	r2, r3
 80028d6:	bf0c      	ite	eq
 80028d8:	2314      	moveq	r3, #20
 80028da:	2329      	movne	r3, #41	@ 0x29
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80028dc:	435e      	muls	r6, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028de:	9b01      	ldr	r3, [sp, #4]
 80028e0:	42b3      	cmp	r3, r6
 80028e2:	d223      	bcs.n	800292c <HAL_ADC_PollForConversion+0xbc>
      if(Timeout != HAL_MAX_DELAY)
 80028e4:	1c6a      	adds	r2, r5, #1
 80028e6:	d004      	beq.n	80028f2 <HAL_ADC_PollForConversion+0x82>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028e8:	2d00      	cmp	r5, #0
 80028ea:	d153      	bne.n	8002994 <HAL_ADC_PollForConversion+0x124>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80028ec:	9b01      	ldr	r3, [sp, #4]
 80028ee:	42b3      	cmp	r3, r6
 80028f0:	d30a      	bcc.n	8002908 <HAL_ADC_PollForConversion+0x98>
      Conversion_Timeout_CPU_cycles ++;
 80028f2:	9b01      	ldr	r3, [sp, #4]
 80028f4:	3301      	adds	r3, #1
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	e7f1      	b.n	80028de <HAL_ADC_PollForConversion+0x6e>
      if(Timeout != HAL_MAX_DELAY)
 80028fa:	1c6e      	adds	r6, r5, #1
 80028fc:	d013      	beq.n	8002926 <HAL_ADC_PollForConversion+0xb6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80028fe:	b965      	cbnz	r5, 800291a <HAL_ADC_PollForConversion+0xaa>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002900:	6823      	ldr	r3, [r4, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	0798      	lsls	r0, r3, #30
 8002906:	d40d      	bmi.n	8002924 <HAL_ADC_PollForConversion+0xb4>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002908:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            return HAL_TIMEOUT;
 800290a:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800290c:	f043 0304 	orr.w	r3, r3, #4
 8002910:	62a3      	str	r3, [r4, #40]	@ 0x28
            __HAL_UNLOCK(hadc);
 8002912:	2300      	movs	r3, #0
 8002914:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8002918:	e7bd      	b.n	8002896 <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800291a:	f7ff ff5b 	bl	80027d4 <HAL_GetTick>
 800291e:	1bc0      	subs	r0, r0, r7
 8002920:	42a8      	cmp	r0, r5
 8002922:	d8ed      	bhi.n	8002900 <HAL_ADC_PollForConversion+0x90>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002924:	6822      	ldr	r2, [r4, #0]
 8002926:	6813      	ldr	r3, [r2, #0]
 8002928:	0799      	lsls	r1, r3, #30
 800292a:	d5e6      	bpl.n	80028fa <HAL_ADC_PollForConversion+0x8a>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800292c:	f06f 0312 	mvn.w	r3, #18
 8002930:	6822      	ldr	r2, [r4, #0]
 8002932:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002934:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002936:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800293a:	62a3      	str	r3, [r4, #40]	@ 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800293c:	6893      	ldr	r3, [r2, #8]
 800293e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002942:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002946:	d10c      	bne.n	8002962 <HAL_ADC_PollForConversion+0xf2>
 8002948:	7b23      	ldrb	r3, [r4, #12]
 800294a:	b953      	cbnz	r3, 8002962 <HAL_ADC_PollForConversion+0xf2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800294c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800294e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002952:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002954:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002956:	04db      	lsls	r3, r3, #19
 8002958:	d403      	bmi.n	8002962 <HAL_ADC_PollForConversion+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800295a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800295c:	f043 0301 	orr.w	r3, r3, #1
 8002960:	62a3      	str	r3, [r4, #40]	@ 0x28
  return HAL_OK;
 8002962:	2000      	movs	r0, #0
 8002964:	e797      	b.n	8002896 <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002966:	6919      	ldr	r1, [r3, #16]
 8002968:	4211      	tst	r1, r2
 800296a:	d103      	bne.n	8002974 <HAL_ADC_PollForConversion+0x104>
 800296c:	68d9      	ldr	r1, [r3, #12]
 800296e:	4a10      	ldr	r2, [pc, #64]	@ (80029b0 <HAL_ADC_PollForConversion+0x140>)
 8002970:	4211      	tst	r1, r2
 8002972:	d00b      	beq.n	800298c <HAL_ADC_PollForConversion+0x11c>
 8002974:	6919      	ldr	r1, [r3, #16]
 8002976:	4a0f      	ldr	r2, [pc, #60]	@ (80029b4 <HAL_ADC_PollForConversion+0x144>)
 8002978:	4211      	tst	r1, r2
 800297a:	d109      	bne.n	8002990 <HAL_ADC_PollForConversion+0x120>
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	4213      	tst	r3, r2
 8002980:	bf0c      	ite	eq
 8002982:	2354      	moveq	r3, #84	@ 0x54
 8002984:	23fc      	movne	r3, #252	@ 0xfc
 8002986:	e7a9      	b.n	80028dc <HAL_ADC_PollForConversion+0x6c>
 8002988:	2329      	movs	r3, #41	@ 0x29
 800298a:	e7a7      	b.n	80028dc <HAL_ADC_PollForConversion+0x6c>
 800298c:	2354      	movs	r3, #84	@ 0x54
 800298e:	e7a5      	b.n	80028dc <HAL_ADC_PollForConversion+0x6c>
 8002990:	23fc      	movs	r3, #252	@ 0xfc
 8002992:	e7a3      	b.n	80028dc <HAL_ADC_PollForConversion+0x6c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002994:	f7ff ff1e 	bl	80027d4 <HAL_GetTick>
 8002998:	1bc0      	subs	r0, r0, r7
 800299a:	42a8      	cmp	r0, r5
 800299c:	d8a6      	bhi.n	80028ec <HAL_ADC_PollForConversion+0x7c>
 800299e:	e7a8      	b.n	80028f2 <HAL_ADC_PollForConversion+0x82>
 80029a0:	20000000 	.word	0x20000000
 80029a4:	24924924 	.word	0x24924924
 80029a8:	12492492 	.word	0x12492492
 80029ac:	00924924 	.word	0x00924924
 80029b0:	00492492 	.word	0x00492492
 80029b4:	00249249 	.word	0x00249249

080029b8 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 80029b8:	6803      	ldr	r3, [r0, #0]
 80029ba:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 80029bc:	4770      	bx	lr

080029be <HAL_ADC_IRQHandler>:
  uint32_t tmp_sr = hadc->Instance->SR;
 80029be:	6803      	ldr	r3, [r0, #0]
{
 80029c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80029c2:	681d      	ldr	r5, [r3, #0]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80029c4:	685e      	ldr	r6, [r3, #4]
{
 80029c6:	4604      	mov	r4, r0
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80029c8:	06b0      	lsls	r0, r6, #26
 80029ca:	d526      	bpl.n	8002a1a <HAL_ADC_IRQHandler+0x5c>
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80029cc:	07a9      	lsls	r1, r5, #30
 80029ce:	d524      	bpl.n	8002a1a <HAL_ADC_IRQHandler+0x5c>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029d0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80029d2:	06d2      	lsls	r2, r2, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029d4:	bf5e      	ittt	pl
 80029d6:	6aa2      	ldrpl	r2, [r4, #40]	@ 0x28
 80029d8:	f442 7200 	orrpl.w	r2, r2, #512	@ 0x200
 80029dc:	62a2      	strpl	r2, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 80029e4:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 80029e8:	d110      	bne.n	8002a0c <HAL_ADC_IRQHandler+0x4e>
 80029ea:	7b22      	ldrb	r2, [r4, #12]
 80029ec:	b972      	cbnz	r2, 8002a0c <HAL_ADC_IRQHandler+0x4e>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	f022 0220 	bic.w	r2, r2, #32
 80029f4:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80029f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80029f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029fc:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029fe:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a00:	04d8      	lsls	r0, r3, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a02:	bf5e      	ittt	pl
 8002a04:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8002a06:	f043 0301 	orrpl.w	r3, r3, #1
 8002a0a:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      hadc->ConvCpltCallback(hadc);
 8002a0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002a0e:	4620      	mov	r0, r4
 8002a10:	4798      	blx	r3
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a12:	f06f 0212 	mvn.w	r2, #18
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002a1a:	0631      	lsls	r1, r6, #24
 8002a1c:	d530      	bpl.n	8002a80 <HAL_ADC_IRQHandler+0xc2>
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002a1e:	076a      	lsls	r2, r5, #29
 8002a20:	d52e      	bpl.n	8002a80 <HAL_ADC_IRQHandler+0xc2>
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a22:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a24:	06db      	lsls	r3, r3, #27
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a26:	bf5e      	ittt	pl
 8002a28:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8002a2a:	f443 5300 	orrpl.w	r3, r3, #8192	@ 0x2000
 8002a2e:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002a30:	6823      	ldr	r3, [r4, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	f402 42e0 	and.w	r2, r2, #28672	@ 0x7000
 8002a38:	f5b2 4fe0 	cmp.w	r2, #28672	@ 0x7000
 8002a3c:	d00a      	beq.n	8002a54 <HAL_ADC_IRQHandler+0x96>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002a3e:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002a40:	0550      	lsls	r0, r2, #21
 8002a42:	d416      	bmi.n	8002a72 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002a44:	689a      	ldr	r2, [r3, #8]
 8002a46:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002a4a:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002a4e:	d110      	bne.n	8002a72 <HAL_ADC_IRQHandler+0xb4>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002a50:	7b22      	ldrb	r2, [r4, #12]
 8002a52:	b972      	cbnz	r2, 8002a72 <HAL_ADC_IRQHandler+0xb4>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a54:	685a      	ldr	r2, [r3, #4]
 8002a56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a5a:	605a      	str	r2, [r3, #4]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a62:	62a3      	str	r3, [r4, #40]	@ 0x28
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a64:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002a66:	05d9      	lsls	r1, r3, #23
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a68:	bf5e      	ittt	pl
 8002a6a:	6aa3      	ldrpl	r3, [r4, #40]	@ 0x28
 8002a6c:	f043 0301 	orrpl.w	r3, r3, #1
 8002a70:	62a3      	strpl	r3, [r4, #40]	@ 0x28
      hadc->InjectedConvCpltCallback(hadc);
 8002a72:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a74:	4620      	mov	r0, r4
 8002a76:	4798      	blx	r3
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a78:	f06f 020c 	mvn.w	r2, #12
 8002a7c:	6823      	ldr	r3, [r4, #0]
 8002a7e:	601a      	str	r2, [r3, #0]
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002a80:	0672      	lsls	r2, r6, #25
 8002a82:	d50c      	bpl.n	8002a9e <HAL_ADC_IRQHandler+0xe0>
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002a84:	07eb      	lsls	r3, r5, #31
 8002a86:	d50a      	bpl.n	8002a9e <HAL_ADC_IRQHandler+0xe0>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a88:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      hadc->LevelOutOfWindowCallback(hadc);
 8002a8a:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a90:	62a3      	str	r3, [r4, #40]	@ 0x28
      hadc->LevelOutOfWindowCallback(hadc);
 8002a92:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002a94:	4798      	blx	r3
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a96:	f06f 0201 	mvn.w	r2, #1
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	601a      	str	r2, [r3, #0]
}
 8002a9e:	bd70      	pop	{r4, r5, r6, pc}

08002aa0 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002aa0:	2300      	movs	r3, #0
{ 
 8002aa2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002aa4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002aa6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 8002aaa:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d06c      	beq.n	8002b8a <HAL_ADC_ConfigChannel+0xea>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 8002ab6:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ab8:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8002aba:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002abc:	6808      	ldr	r0, [r1, #0]
 8002abe:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8002ac2:	d822      	bhi.n	8002b0a <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ac4:	261f      	movs	r6, #31
 8002ac6:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8002ac8:	3b05      	subs	r3, #5
 8002aca:	409e      	lsls	r6, r3
 8002acc:	ea25 0506 	bic.w	r5, r5, r6
 8002ad0:	fa00 f303 	lsl.w	r3, r0, r3
 8002ad4:	432b      	orrs	r3, r5
 8002ad6:	6353      	str	r3, [r2, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ad8:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ada:	688b      	ldr	r3, [r1, #8]
 8002adc:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8002ae0:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002ae4:	d929      	bls.n	8002b3a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ae6:	68d6      	ldr	r6, [r2, #12]
 8002ae8:	3d1e      	subs	r5, #30
 8002aea:	40a9      	lsls	r1, r5
 8002aec:	ea26 0101 	bic.w	r1, r6, r1
 8002af0:	40ab      	lsls	r3, r5
 8002af2:	430b      	orrs	r3, r1
 8002af4:	60d3      	str	r3, [r2, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002af6:	f1a0 0310 	sub.w	r3, r0, #16
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d925      	bls.n	8002b4a <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afe:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8002b00:	2300      	movs	r3, #0
 8002b02:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002b06:	b002      	add	sp, #8
 8002b08:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8002b0a:	2d0c      	cmp	r5, #12
 8002b0c:	f04f 051f 	mov.w	r5, #31
 8002b10:	d809      	bhi.n	8002b26 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b12:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8002b14:	3b23      	subs	r3, #35	@ 0x23
 8002b16:	409d      	lsls	r5, r3
 8002b18:	ea26 0505 	bic.w	r5, r6, r5
 8002b1c:	fa00 f303 	lsl.w	r3, r0, r3
 8002b20:	432b      	orrs	r3, r5
 8002b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b24:	e7d8      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b26:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 8002b28:	3b41      	subs	r3, #65	@ 0x41
 8002b2a:	409d      	lsls	r5, r3
 8002b2c:	ea26 0505 	bic.w	r5, r6, r5
 8002b30:	fa00 f303 	lsl.w	r3, r0, r3
 8002b34:	432b      	orrs	r3, r5
 8002b36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002b38:	e7ce      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b3a:	6910      	ldr	r0, [r2, #16]
 8002b3c:	40a9      	lsls	r1, r5
 8002b3e:	ea20 0101 	bic.w	r1, r0, r1
 8002b42:	40ab      	lsls	r3, r5
 8002b44:	430b      	orrs	r3, r1
 8002b46:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b48:	e7d9      	b.n	8002afe <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 8002b4a:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <HAL_ADC_ConfigChannel+0xf0>)
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d116      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b50:	6893      	ldr	r3, [r2, #8]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	d4d3      	bmi.n	8002afe <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b56:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b58:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b5a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b5e:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b60:	d1cd      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b62:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <HAL_ADC_ConfigChannel+0xf4>)
 8002b64:	4a0c      	ldr	r2, [pc, #48]	@ (8002b98 <HAL_ADC_ConfigChannel+0xf8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b6c:	220a      	movs	r2, #10
 8002b6e:	4353      	muls	r3, r2
            wait_loop_index--;
 8002b70:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002b72:	9b01      	ldr	r3, [sp, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0c2      	beq.n	8002afe <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8002b78:	9b01      	ldr	r3, [sp, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	e7f8      	b.n	8002b70 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b7e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002b80:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b82:	f043 0320 	orr.w	r3, r3, #32
 8002b86:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8002b88:	e7ba      	b.n	8002b00 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8002b8a:	2002      	movs	r0, #2
 8002b8c:	e7bb      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x66>
 8002b8e:	bf00      	nop
 8002b90:	40012400 	.word	0x40012400
 8002b94:	20000000 	.word	0x20000000
 8002b98:	000f4240 	.word	0x000f4240

08002b9c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 8002b9c:	2300      	movs	r3, #0
{
 8002b9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8002ba0:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ba2:	6803      	ldr	r3, [r0, #0]
{
 8002ba4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	07d2      	lsls	r2, r2, #31
 8002baa:	d502      	bpl.n	8002bb2 <ADC_Enable+0x16>
  return HAL_OK;
 8002bac:	2000      	movs	r0, #0
}
 8002bae:	b003      	add	sp, #12
 8002bb0:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bba:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <ADC_Enable+0x70>)
 8002bbc:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <ADC_Enable+0x74>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8002bc4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002bc6:	9b01      	ldr	r3, [sp, #4]
 8002bc8:	b9e3      	cbnz	r3, 8002c04 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8002bca:	f7ff fe03 	bl	80027d4 <HAL_GetTick>
 8002bce:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bd0:	6823      	ldr	r3, [r4, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	07db      	lsls	r3, r3, #31
 8002bd6:	d4e9      	bmi.n	8002bac <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bd8:	f7ff fdfc 	bl	80027d4 <HAL_GetTick>
 8002bdc:	1b40      	subs	r0, r0, r5
 8002bde:	2802      	cmp	r0, #2
 8002be0:	d9f6      	bls.n	8002bd0 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f013 0301 	ands.w	r3, r3, #1
 8002bea:	d1f1      	bne.n	8002bd0 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bec:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8002bee:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf0:	f042 0210 	orr.w	r2, r2, #16
 8002bf4:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8002bf8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8002c02:	e7d4      	b.n	8002bae <ADC_Enable+0x12>
      wait_loop_index--;
 8002c04:	9b01      	ldr	r3, [sp, #4]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	e7dc      	b.n	8002bc4 <ADC_Enable+0x28>
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	000f4240 	.word	0x000f4240

08002c14 <HAL_ADC_Start>:
{
 8002c14:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8002c16:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8002c1a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d054      	beq.n	8002cca <HAL_ADC_Start+0xb6>
 8002c20:	2301      	movs	r3, #1
 8002c22:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8002c26:	f7ff ffb9 	bl	8002b9c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d149      	bne.n	8002cc2 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c30:	4a27      	ldr	r2, [pc, #156]	@ (8002cd0 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 8002c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c3e:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c40:	6823      	ldr	r3, [r4, #0]
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d104      	bne.n	8002c50 <HAL_ADC_Start+0x3c>
 8002c46:	4923      	ldr	r1, [pc, #140]	@ (8002cd4 <HAL_ADC_Start+0xc0>)
 8002c48:	684a      	ldr	r2, [r1, #4]
 8002c4a:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8002c4e:	d12e      	bne.n	8002cae <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c50:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002c52:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8002c56:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c58:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c5a:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c5c:	bf41      	itttt	mi
 8002c5e:	6aa2      	ldrmi	r2, [r4, #40]	@ 0x28
 8002c60:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 8002c64:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 8002c68:	62a2      	strmi	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c6a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002c6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c70:	bf1c      	itt	ne
 8002c72:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 8002c74:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002c78:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002c80:	f06f 0202 	mvn.w	r2, #2
 8002c84:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002c8c:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8002c90:	d113      	bne.n	8002cba <HAL_ADC_Start+0xa6>
 8002c92:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd0 <HAL_ADC_Start+0xbc>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d105      	bne.n	8002ca4 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002c98:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8002c9c:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002c9e:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8002ca2:	d10a      	bne.n	8002cba <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002caa:	609a      	str	r2, [r3, #8]
}
 8002cac:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002cae:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002cb0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002cb4:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002cb6:	684a      	ldr	r2, [r1, #4]
 8002cb8:	e7cf      	b.n	8002c5a <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002cc0:	e7f3      	b.n	8002caa <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8002cc8:	e7f0      	b.n	8002cac <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8002cca:	2002      	movs	r0, #2
 8002ccc:	e7ee      	b.n	8002cac <HAL_ADC_Start+0x98>
 8002cce:	bf00      	nop
 8002cd0:	40012800 	.word	0x40012800
 8002cd4:	40012400 	.word	0x40012400

08002cd8 <HAL_ADC_Start_DMA>:
{
 8002cd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002cdc:	4b40      	ldr	r3, [pc, #256]	@ (8002de0 <HAL_ADC_Start_DMA+0x108>)
{
 8002cde:	4690      	mov	r8, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ce0:	6802      	ldr	r2, [r0, #0]
{
 8002ce2:	4604      	mov	r4, r0
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ce4:	429a      	cmp	r2, r3
{
 8002ce6:	460f      	mov	r7, r1
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002ce8:	d002      	beq.n	8002cf0 <HAL_ADC_Start_DMA+0x18>
 8002cea:	493e      	ldr	r1, [pc, #248]	@ (8002de4 <HAL_ADC_Start_DMA+0x10c>)
 8002cec:	428a      	cmp	r2, r1
 8002cee:	d103      	bne.n	8002cf8 <HAL_ADC_Start_DMA+0x20>
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002cf6:	d16e      	bne.n	8002dd6 <HAL_ADC_Start_DMA+0xfe>
    __HAL_LOCK(hadc);
 8002cf8:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d06c      	beq.n	8002dda <HAL_ADC_Start_DMA+0x102>
 8002d00:	2301      	movs	r3, #1
    tmp_hal_status = ADC_Enable(hadc);
 8002d02:	4620      	mov	r0, r4
    __HAL_LOCK(hadc);
 8002d04:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8002d08:	f7ff ff48 	bl	8002b9c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8002d0c:	4606      	mov	r6, r0
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	d15d      	bne.n	8002dce <HAL_ADC_Start_DMA+0xf6>
      ADC_STATE_CLR_SET(hadc->State,
 8002d12:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d14:	6821      	ldr	r1, [r4, #0]
 8002d16:	4b33      	ldr	r3, [pc, #204]	@ (8002de4 <HAL_ADC_Start_DMA+0x10c>)
      ADC_STATE_CLR_SET(hadc->State,
 8002d18:	f425 6570 	bic.w	r5, r5, #3840	@ 0xf00
 8002d1c:	f025 0501 	bic.w	r5, r5, #1
 8002d20:	f445 7580 	orr.w	r5, r5, #256	@ 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d24:	4299      	cmp	r1, r3
      ADC_STATE_CLR_SET(hadc->State,
 8002d26:	62a5      	str	r5, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d28:	d104      	bne.n	8002d34 <HAL_ADC_Start_DMA+0x5c>
 8002d2a:	4a2d      	ldr	r2, [pc, #180]	@ (8002de0 <HAL_ADC_Start_DMA+0x108>)
 8002d2c:	6853      	ldr	r3, [r2, #4]
 8002d2e:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8002d32:	d13e      	bne.n	8002db2 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d34:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d36:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8002d3a:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d3c:	684b      	ldr	r3, [r1, #4]
 8002d3e:	055a      	lsls	r2, r3, #21
 8002d40:	d505      	bpl.n	8002d4e <HAL_ADC_Start_DMA+0x76>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d42:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002d44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002d48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002d4c:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d4e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d50:	6a20      	ldr	r0, [r4, #32]
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d52:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d56:	bf18      	it	ne
 8002d58:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d5a:	463a      	mov	r2, r7
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002d5c:	bf18      	it	ne
 8002d5e:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8002d62:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8002d64:	2300      	movs	r3, #0
 8002d66:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002de8 <HAL_ADC_Start_DMA+0x110>)
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d6c:	314c      	adds	r1, #76	@ 0x4c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002d6e:	6283      	str	r3, [r0, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d70:	4b1e      	ldr	r3, [pc, #120]	@ (8002dec <HAL_ADC_Start_DMA+0x114>)
 8002d72:	62c3      	str	r3, [r0, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d74:	4b1e      	ldr	r3, [pc, #120]	@ (8002df0 <HAL_ADC_Start_DMA+0x118>)
 8002d76:	6303      	str	r3, [r0, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002d78:	f06f 0302 	mvn.w	r3, #2
 8002d7c:	f841 3c4c 	str.w	r3, [r1, #-76]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002d80:	f851 3c44 	ldr.w	r3, [r1, #-68]
 8002d84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d88:	f841 3c44 	str.w	r3, [r1, #-68]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d8c:	4643      	mov	r3, r8
 8002d8e:	f000 f955 	bl	800303c <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8002d9a:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	bf0c      	ite	eq
 8002da2:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002da6:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 8002daa:	609a      	str	r2, [r3, #8]
}
 8002dac:	4630      	mov	r0, r6
 8002dae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002db2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002db4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002db8:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002dba:	6853      	ldr	r3, [r2, #4]
 8002dbc:	055b      	lsls	r3, r3, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dbe:	bf41      	itttt	mi
 8002dc0:	6aa0      	ldrmi	r0, [r4, #40]	@ 0x28
 8002dc2:	f420 5040 	bicmi.w	r0, r0, #12288	@ 0x3000
 8002dc6:	f440 5080 	orrmi.w	r0, r0, #4096	@ 0x1000
 8002dca:	62a0      	strmi	r0, [r4, #40]	@ 0x28
 8002dcc:	e7bf      	b.n	8002d4e <HAL_ADC_Start_DMA+0x76>
      __HAL_UNLOCK(hadc);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8002dd4:	e7ea      	b.n	8002dac <HAL_ADC_Start_DMA+0xd4>
    tmp_hal_status = HAL_ERROR;
 8002dd6:	2601      	movs	r6, #1
 8002dd8:	e7e8      	b.n	8002dac <HAL_ADC_Start_DMA+0xd4>
    __HAL_LOCK(hadc);
 8002dda:	2602      	movs	r6, #2
 8002ddc:	e7e6      	b.n	8002dac <HAL_ADC_Start_DMA+0xd4>
 8002dde:	bf00      	nop
 8002de0:	40012400 	.word	0x40012400
 8002de4:	40012800 	.word	0x40012800
 8002de8:	08002805 	.word	0x08002805
 8002dec:	0800284b 	.word	0x0800284b
 8002df0:	08002851 	.word	0x08002851

08002df4 <ADC_ConversionStop_Disable>:
{
 8002df4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002df6:	6803      	ldr	r3, [r0, #0]
{
 8002df8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	07d1      	lsls	r1, r2, #31
 8002dfe:	d401      	bmi.n	8002e04 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8002e00:	2000      	movs	r0, #0
}
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002e0c:	f7ff fce2 	bl	80027d4 <HAL_GetTick>
 8002e10:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	07db      	lsls	r3, r3, #31
 8002e18:	d5f2      	bpl.n	8002e00 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002e1a:	f7ff fcdb 	bl	80027d4 <HAL_GetTick>
 8002e1e:	1b40      	subs	r0, r0, r5
 8002e20:	2802      	cmp	r0, #2
 8002e22:	d9f6      	bls.n	8002e12 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	07da      	lsls	r2, r3, #31
 8002e2a:	d5f2      	bpl.n	8002e12 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8002e2e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e30:	f043 0310 	orr.w	r3, r3, #16
 8002e34:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8002e3e:	e7e0      	b.n	8002e02 <ADC_ConversionStop_Disable+0xe>

08002e40 <HAL_ADC_Init>:
{
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8002e42:	4604      	mov	r4, r0
 8002e44:	2800      	cmp	r0, #0
 8002e46:	d07c      	beq.n	8002f42 <HAL_ADC_Init+0x102>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e48:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8002e4a:	b99b      	cbnz	r3, 8002e74 <HAL_ADC_Init+0x34>
    ADC_CLEAR_ERRORCODE(hadc);
 8002e4c:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8002e4e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak callback */
 8002e52:	4b3f      	ldr	r3, [pc, #252]	@ (8002f50 <HAL_ADC_Init+0x110>)
 8002e54:	6303      	str	r3, [r0, #48]	@ 0x30
    hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak callback */
 8002e56:	4b3f      	ldr	r3, [pc, #252]	@ (8002f54 <HAL_ADC_Init+0x114>)
 8002e58:	6343      	str	r3, [r0, #52]	@ 0x34
    hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak callback */
 8002e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f58 <HAL_ADC_Init+0x118>)
 8002e5c:	6383      	str	r3, [r0, #56]	@ 0x38
    hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak callback */
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f5c <HAL_ADC_Init+0x11c>)
 8002e60:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak callback */
 8002e62:	4b3f      	ldr	r3, [pc, #252]	@ (8002f60 <HAL_ADC_Init+0x120>)
 8002e64:	6403      	str	r3, [r0, #64]	@ 0x40
    if (hadc->MspInitCallback == NULL)
 8002e66:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002e68:	b90b      	cbnz	r3, 8002e6e <HAL_ADC_Init+0x2e>
      hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 8002e6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f64 <HAL_ADC_Init+0x124>)
 8002e6c:	6443      	str	r3, [r0, #68]	@ 0x44
    hadc->MspInitCallback(hadc);
 8002e6e:	4620      	mov	r0, r4
 8002e70:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002e72:	4798      	blx	r3
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002e74:	4620      	mov	r0, r4
 8002e76:	f7ff ffbd 	bl	8002df4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e7a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002e7c:	f013 0310 	ands.w	r3, r3, #16
 8002e80:	d161      	bne.n	8002f46 <HAL_ADC_Init+0x106>
 8002e82:	2800      	cmp	r0, #0
 8002e84:	d15f      	bne.n	8002f46 <HAL_ADC_Init+0x106>
    ADC_STATE_CLR_SET(hadc->State,
 8002e86:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e88:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8002e8a:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8002e8e:	f022 0202 	bic.w	r2, r2, #2
 8002e92:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e96:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002e98:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8002e9a:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002e9c:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002e9e:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ea0:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ea4:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002ea8:	d036      	beq.n	8002f18 <HAL_ADC_Init+0xd8>
 8002eaa:	1e77      	subs	r7, r6, #1
 8002eac:	427d      	negs	r5, r7
 8002eae:	417d      	adcs	r5, r7
 8002eb0:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002eb2:	7d27      	ldrb	r7, [r4, #20]
 8002eb4:	2f01      	cmp	r7, #1
 8002eb6:	d106      	bne.n	8002ec6 <HAL_ADC_Init+0x86>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002eb8:	bb82      	cbnz	r2, 8002f1c <HAL_ADC_Init+0xdc>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002eba:	69a2      	ldr	r2, [r4, #24]
 8002ebc:	3a01      	subs	r2, #1
 8002ebe:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8002ec2:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8002ec6:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ec8:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002ecc:	6857      	ldr	r7, [r2, #4]
 8002ece:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 8002ed2:	ea45 0507 	orr.w	r5, r5, r7
 8002ed6:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002ed8:	6897      	ldr	r7, [r2, #8]
 8002eda:	4d23      	ldr	r5, [pc, #140]	@ (8002f68 <HAL_ADC_Init+0x128>)
 8002edc:	ea05 0507 	and.w	r5, r5, r7
 8002ee0:	ea45 0501 	orr.w	r5, r5, r1
 8002ee4:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002ee6:	d001      	beq.n	8002eec <HAL_ADC_Init+0xac>
 8002ee8:	2e01      	cmp	r6, #1
 8002eea:	d102      	bne.n	8002ef2 <HAL_ADC_Init+0xb2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002eec:	6923      	ldr	r3, [r4, #16]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8002ef2:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8002ef4:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 8002ef8:	432b      	orrs	r3, r5
 8002efa:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002efc:	6892      	ldr	r2, [r2, #8]
 8002efe:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_ADC_Init+0x12c>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	4299      	cmp	r1, r3
 8002f04:	d113      	bne.n	8002f2e <HAL_ADC_Init+0xee>
      ADC_CLEAR_ERRORCODE(hadc);
 8002f06:	2300      	movs	r3, #0
 8002f08:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f0c:	f023 0303 	bic.w	r3, r3, #3
 8002f10:	f043 0301 	orr.w	r3, r3, #1
 8002f14:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8002f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f18:	4635      	mov	r5, r6
 8002f1a:	e7ca      	b.n	8002eb2 <HAL_ADC_Init+0x72>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002f1e:	f042 0220 	orr.w	r2, r2, #32
 8002f22:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f24:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002f26:	f042 0201 	orr.w	r2, r2, #1
 8002f2a:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8002f2c:	e7cb      	b.n	8002ec6 <HAL_ADC_Init+0x86>
      ADC_STATE_CLR_SET(hadc->State,
 8002f2e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f30:	f023 0312 	bic.w	r3, r3, #18
 8002f34:	f043 0310 	orr.w	r3, r3, #16
 8002f38:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 8002f42:	2001      	movs	r0, #1
 8002f44:	e7e7      	b.n	8002f16 <HAL_ADC_Init+0xd6>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002f48:	f043 0310 	orr.w	r3, r3, #16
 8002f4c:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8002f4e:	e7f8      	b.n	8002f42 <HAL_ADC_Init+0x102>
 8002f50:	08002869 	.word	0x08002869
 8002f54:	0800286b 	.word	0x0800286b
 8002f58:	0800286d 	.word	0x0800286d
 8002f5c:	08002867 	.word	0x08002867
 8002f60:	08002f71 	.word	0x08002f71
 8002f64:	080011dd 	.word	0x080011dd
 8002f68:	ffe1f7fd 	.word	0xffe1f7fd
 8002f6c:	ff1f0efe 	.word	0xff1f0efe

08002f70 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f74:	4907      	ldr	r1, [pc, #28]	@ (8002f94 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f76:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f78:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f7a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f7e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002f82:	0412      	lsls	r2, r2, #16
 8002f84:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002f90:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002f92:	4770      	bx	lr
 8002f94:	e000ed00 	.word	0xe000ed00

08002f98 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f98:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f9a:	b530      	push	{r4, r5, lr}
 8002f9c:	68dc      	ldr	r4, [r3, #12]
 8002f9e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	bf28      	it	cs
 8002fac:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fae:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fb4:	bf94      	ite	ls
 8002fb6:	2400      	movls	r4, #0
 8002fb8:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fba:	fa05 f303 	lsl.w	r3, r5, r3
 8002fbe:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc2:	40a5      	lsls	r5, r4
 8002fc4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fc8:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8002fca:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fcc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd0:	bfac      	ite	ge
 8002fd2:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd6:	4a07      	ldrlt	r2, [pc, #28]	@ (8002ff4 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	bfab      	itete	ge
 8002fe0:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fe8:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fec:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002fee:	bd30      	pop	{r4, r5, pc}
 8002ff0:	e000ed00 	.word	0xe000ed00
 8002ff4:	e000ed14 	.word	0xe000ed14

08002ff8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	db07      	blt.n	800300c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	0941      	lsrs	r1, r0, #5
 8003000:	4a03      	ldr	r2, [pc, #12]	@ (8003010 <HAL_NVIC_EnableIRQ+0x18>)
 8003002:	f000 001f 	and.w	r0, r0, #31
 8003006:	4083      	lsls	r3, r0
 8003008:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	e000e100 	.word	0xe000e100

08003014 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003014:	3801      	subs	r0, #1
 8003016:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800301a:	d20b      	bcs.n	8003034 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800301c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003020:	21f0      	movs	r1, #240	@ 0xf0
 8003022:	4a05      	ldr	r2, [pc, #20]	@ (8003038 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003024:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003026:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800302c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800302e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003030:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003032:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003034:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800303c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800303e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8003042:	2c01      	cmp	r4, #1
 8003044:	d034      	beq.n	80030b0 <HAL_DMA_Start_IT+0x74>
 8003046:	2401      	movs	r4, #1
 8003048:	f880 4020 	strb.w	r4, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800304c:	f890 4021 	ldrb.w	r4, [r0, #33]	@ 0x21
 8003050:	2c01      	cmp	r4, #1
 8003052:	b2e5      	uxtb	r5, r4
 8003054:	f04f 0400 	mov.w	r4, #0
 8003058:	d128      	bne.n	80030ac <HAL_DMA_Start_IT+0x70>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800305a:	2602      	movs	r6, #2
 800305c:	f880 6021 	strb.w	r6, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003060:	6384      	str	r4, [r0, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003062:	6804      	ldr	r4, [r0, #0]
 8003064:	6826      	ldr	r6, [r4, #0]
 8003066:	f026 0601 	bic.w	r6, r6, #1
 800306a:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800306c:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	@ 0x3c
 8003070:	40bd      	lsls	r5, r7
 8003072:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003074:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003076:	6843      	ldr	r3, [r0, #4]
 8003078:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800307a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800307c:	bf0b      	itete	eq
 800307e:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003080:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8003082:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003084:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8003086:	b14b      	cbz	r3, 800309c <HAL_DMA_Start_IT+0x60>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003088:	6823      	ldr	r3, [r4, #0]
 800308a:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 800308e:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003090:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	6023      	str	r3, [r4, #0]
}
 800309a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	f023 0304 	bic.w	r3, r3, #4
 80030a2:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030a4:	6823      	ldr	r3, [r4, #0]
 80030a6:	f043 030a 	orr.w	r3, r3, #10
 80030aa:	e7f0      	b.n	800308e <HAL_DMA_Start_IT+0x52>
    __HAL_UNLOCK(hdma); 
 80030ac:	f880 4020 	strb.w	r4, [r0, #32]
  __HAL_LOCK(hdma);
 80030b0:	2002      	movs	r0, #2
 80030b2:	e7f2      	b.n	800309a <HAL_DMA_Start_IT+0x5e>

080030b4 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030b4:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
{
 80030b8:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ba:	2a02      	cmp	r2, #2
 80030bc:	d006      	beq.n	80030cc <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030be:	2204      	movs	r2, #4
 80030c0:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 80030c2:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2020 	strb.w	r2, [r3, #32]
}
 80030ca:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030cc:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030ce:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	f021 010e 	bic.w	r1, r1, #14
 80030d6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80030d8:	6811      	ldr	r1, [r2, #0]
 80030da:	f021 0101 	bic.w	r1, r1, #1
 80030de:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030e0:	2101      	movs	r1, #1
 80030e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030e4:	fa01 f202 	lsl.w	r2, r1, r2
 80030e8:	6042      	str	r2, [r0, #4]
  return status; 
 80030ea:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80030ec:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 80030f0:	e7e8      	b.n	80030c4 <HAL_DMA_Abort+0x10>
	...

080030f4 <HAL_DMA_Abort_IT>:
{  
 80030f4:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80030f6:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d003      	beq.n	8003106 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fe:	2304      	movs	r3, #4
 8003100:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8003102:	2001      	movs	r0, #1
}
 8003104:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003106:	6803      	ldr	r3, [r0, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f022 020e 	bic.w	r2, r2, #14
 800310e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003118:	4a17      	ldr	r2, [pc, #92]	@ (8003178 <HAL_DMA_Abort_IT+0x84>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d01f      	beq.n	800315e <HAL_DMA_Abort_IT+0x6a>
 800311e:	3214      	adds	r2, #20
 8003120:	4293      	cmp	r3, r2
 8003122:	d01e      	beq.n	8003162 <HAL_DMA_Abort_IT+0x6e>
 8003124:	3214      	adds	r2, #20
 8003126:	4293      	cmp	r3, r2
 8003128:	d01d      	beq.n	8003166 <HAL_DMA_Abort_IT+0x72>
 800312a:	3214      	adds	r2, #20
 800312c:	4293      	cmp	r3, r2
 800312e:	d01d      	beq.n	800316c <HAL_DMA_Abort_IT+0x78>
 8003130:	3214      	adds	r2, #20
 8003132:	4293      	cmp	r3, r2
 8003134:	d01d      	beq.n	8003172 <HAL_DMA_Abort_IT+0x7e>
 8003136:	3214      	adds	r2, #20
 8003138:	4293      	cmp	r3, r2
 800313a:	bf14      	ite	ne
 800313c:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8003140:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8003144:	4a0d      	ldr	r2, [pc, #52]	@ (800317c <HAL_DMA_Abort_IT+0x88>)
 8003146:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003148:	2301      	movs	r3, #1
 800314a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 800314e:	2300      	movs	r3, #0
 8003150:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8003154:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003156:	b103      	cbz	r3, 800315a <HAL_DMA_Abort_IT+0x66>
      hdma->XferAbortCallback(hdma);
 8003158:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800315a:	2000      	movs	r0, #0
 800315c:	e7d2      	b.n	8003104 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800315e:	2301      	movs	r3, #1
 8003160:	e7f0      	b.n	8003144 <HAL_DMA_Abort_IT+0x50>
 8003162:	2310      	movs	r3, #16
 8003164:	e7ee      	b.n	8003144 <HAL_DMA_Abort_IT+0x50>
 8003166:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800316a:	e7eb      	b.n	8003144 <HAL_DMA_Abort_IT+0x50>
 800316c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003170:	e7e8      	b.n	8003144 <HAL_DMA_Abort_IT+0x50>
 8003172:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003176:	e7e5      	b.n	8003144 <HAL_DMA_Abort_IT+0x50>
 8003178:	40020008 	.word	0x40020008
 800317c:	40020000 	.word	0x40020000

08003180 <HAL_DMA_GetState>:
  return hdma->State;
 8003180:	f890 0021 	ldrb.w	r0, [r0, #33]	@ 0x21
}
 8003184:	4770      	bx	lr
	...

08003188 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800318c:	2400      	movs	r4, #0
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800318e:	f04f 0e0f 	mov.w	lr, #15
  uint32_t position = 0x00u;
 8003192:	4626      	mov	r6, r4
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003194:	f8df c184 	ldr.w	ip, [pc, #388]	@ 800331c <HAL_GPIO_Init+0x194>
 8003198:	4b61      	ldr	r3, [pc, #388]	@ (8003320 <HAL_GPIO_Init+0x198>)
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800319a:	f100 0804 	add.w	r8, r0, #4
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800319e:	680a      	ldr	r2, [r1, #0]
 80031a0:	fa32 f506 	lsrs.w	r5, r2, r6
 80031a4:	d102      	bne.n	80031ac <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 80031a6:	b003      	add	sp, #12
 80031a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80031ac:	2501      	movs	r5, #1
 80031ae:	fa05 f706 	lsl.w	r7, r5, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	ea02 0507 	and.w	r5, r2, r7
    if (iocurrent == ioposition)
 80031b6:	ea37 0202 	bics.w	r2, r7, r2
 80031ba:	d176      	bne.n	80032aa <HAL_GPIO_Init+0x122>
      switch (GPIO_Init->Mode)
 80031bc:	684a      	ldr	r2, [r1, #4]
 80031be:	2a03      	cmp	r2, #3
 80031c0:	d807      	bhi.n	80031d2 <HAL_GPIO_Init+0x4a>
 80031c2:	3a01      	subs	r2, #1
 80031c4:	2a02      	cmp	r2, #2
 80031c6:	f200 8083 	bhi.w	80032d0 <HAL_GPIO_Init+0x148>
 80031ca:	e8df f002 	tbb	[pc, r2]
 80031ce:	9691      	.short	0x9691
 80031d0:	9c          	.byte	0x9c
 80031d1:	00          	.byte	0x00
 80031d2:	2a12      	cmp	r2, #18
 80031d4:	f000 8094 	beq.w	8003300 <HAL_GPIO_Init+0x178>
 80031d8:	d869      	bhi.n	80032ae <HAL_GPIO_Init+0x126>
 80031da:	2a11      	cmp	r2, #17
 80031dc:	f000 808a 	beq.w	80032f4 <HAL_GPIO_Init+0x16c>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80031e0:	2dff      	cmp	r5, #255	@ 0xff
 80031e2:	bf94      	ite	ls
 80031e4:	4681      	movls	r9, r0
 80031e6:	46c1      	movhi	r9, r8
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031e8:	ea4f 0286 	mov.w	r2, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031ec:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80031f0:	bf88      	it	hi
 80031f2:	3a20      	subhi	r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80031f4:	fa0e fa02 	lsl.w	sl, lr, r2
 80031f8:	ea27 070a 	bic.w	r7, r7, sl
 80031fc:	fa04 f202 	lsl.w	r2, r4, r2
 8003200:	4317      	orrs	r7, r2
 8003202:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003206:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800320a:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 800320e:	d04c      	beq.n	80032aa <HAL_GPIO_Init+0x122>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003210:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8003214:	f026 0703 	bic.w	r7, r6, #3
 8003218:	f042 0201 	orr.w	r2, r2, #1
 800321c:	f8cc 2018 	str.w	r2, [ip, #24]
 8003220:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8003224:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8003228:	f002 0201 	and.w	r2, r2, #1
 800322c:	9201      	str	r2, [sp, #4]
 800322e:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003232:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003236:	9a01      	ldr	r2, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003238:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800323c:	68ba      	ldr	r2, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800323e:	fa0e fb0a 	lsl.w	fp, lr, sl
 8003242:	ea22 0b0b 	bic.w	fp, r2, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003246:	4a37      	ldr	r2, [pc, #220]	@ (8003324 <HAL_GPIO_Init+0x19c>)
 8003248:	4290      	cmp	r0, r2
 800324a:	d060      	beq.n	800330e <HAL_GPIO_Init+0x186>
 800324c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003250:	4290      	cmp	r0, r2
 8003252:	d05e      	beq.n	8003312 <HAL_GPIO_Init+0x18a>
 8003254:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003258:	4290      	cmp	r0, r2
 800325a:	d05c      	beq.n	8003316 <HAL_GPIO_Init+0x18e>
 800325c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003260:	4290      	cmp	r0, r2
 8003262:	bf14      	ite	ne
 8003264:	2204      	movne	r2, #4
 8003266:	2203      	moveq	r2, #3
 8003268:	fa02 f20a 	lsl.w	r2, r2, sl
 800326c:	ea42 020b 	orr.w	r2, r2, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8003270:	60ba      	str	r2, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8003272:	689a      	ldr	r2, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003274:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8003278:	bf14      	ite	ne
 800327a:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800327c:	43aa      	biceq	r2, r5
 800327e:	609a      	str	r2, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8003280:	68da      	ldr	r2, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003282:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8003286:	bf14      	ite	ne
 8003288:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800328a:	43aa      	biceq	r2, r5
 800328c:	60da      	str	r2, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800328e:	685a      	ldr	r2, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003290:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8003294:	bf14      	ite	ne
 8003296:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003298:	43aa      	biceq	r2, r5
 800329a:	605a      	str	r2, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 800329c:	681a      	ldr	r2, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800329e:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80032a2:	bf14      	ite	ne
 80032a4:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032a6:	43aa      	biceq	r2, r5
 80032a8:	601a      	str	r2, [r3, #0]
	position++;
 80032aa:	3601      	adds	r6, #1
 80032ac:	e777      	b.n	800319e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80032ae:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8003328 <HAL_GPIO_Init+0x1a0>
 80032b2:	454a      	cmp	r2, r9
 80032b4:	d00c      	beq.n	80032d0 <HAL_GPIO_Init+0x148>
 80032b6:	d814      	bhi.n	80032e2 <HAL_GPIO_Init+0x15a>
 80032b8:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80032bc:	454a      	cmp	r2, r9
 80032be:	d007      	beq.n	80032d0 <HAL_GPIO_Init+0x148>
 80032c0:	f509 2970 	add.w	r9, r9, #983040	@ 0xf0000
 80032c4:	454a      	cmp	r2, r9
 80032c6:	d003      	beq.n	80032d0 <HAL_GPIO_Init+0x148>
 80032c8:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80032cc:	454a      	cmp	r2, r9
 80032ce:	d187      	bne.n	80031e0 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80032d0:	688a      	ldr	r2, [r1, #8]
 80032d2:	b1d2      	cbz	r2, 800330a <HAL_GPIO_Init+0x182>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032d4:	2a01      	cmp	r2, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032d6:	f04f 0408 	mov.w	r4, #8
            GPIOx->BSRR = ioposition;
 80032da:	bf0c      	ite	eq
 80032dc:	6107      	streq	r7, [r0, #16]
            GPIOx->BRR = ioposition;
 80032de:	6147      	strne	r7, [r0, #20]
 80032e0:	e77e      	b.n	80031e0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80032e2:	f8df 9048 	ldr.w	r9, [pc, #72]	@ 800332c <HAL_GPIO_Init+0x1a4>
 80032e6:	454a      	cmp	r2, r9
 80032e8:	d0f2      	beq.n	80032d0 <HAL_GPIO_Init+0x148>
 80032ea:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80032ee:	e7ed      	b.n	80032cc <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80032f0:	68cc      	ldr	r4, [r1, #12]
          break;
 80032f2:	e775      	b.n	80031e0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80032f4:	68cc      	ldr	r4, [r1, #12]
 80032f6:	3404      	adds	r4, #4
          break;
 80032f8:	e772      	b.n	80031e0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80032fa:	68cc      	ldr	r4, [r1, #12]
 80032fc:	3408      	adds	r4, #8
          break;
 80032fe:	e76f      	b.n	80031e0 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003300:	68cc      	ldr	r4, [r1, #12]
 8003302:	340c      	adds	r4, #12
          break;
 8003304:	e76c      	b.n	80031e0 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8003306:	2400      	movs	r4, #0
 8003308:	e76a      	b.n	80031e0 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800330a:	2404      	movs	r4, #4
 800330c:	e768      	b.n	80031e0 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800330e:	2200      	movs	r2, #0
 8003310:	e7aa      	b.n	8003268 <HAL_GPIO_Init+0xe0>
 8003312:	2201      	movs	r2, #1
 8003314:	e7a8      	b.n	8003268 <HAL_GPIO_Init+0xe0>
 8003316:	2202      	movs	r2, #2
 8003318:	e7a6      	b.n	8003268 <HAL_GPIO_Init+0xe0>
 800331a:	bf00      	nop
 800331c:	40021000 	.word	0x40021000
 8003320:	40010400 	.word	0x40010400
 8003324:	40010800 	.word	0x40010800
 8003328:	10220000 	.word	0x10220000
 800332c:	10310000 	.word	0x10310000

08003330 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003330:	b10a      	cbz	r2, 8003336 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003332:	6101      	str	r1, [r0, #16]
  }
}
 8003334:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003336:	0409      	lsls	r1, r1, #16
 8003338:	e7fb      	b.n	8003332 <HAL_GPIO_WritePin+0x2>

0800333a <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800333a:	4770      	bx	lr

0800333c <I2C_MemoryTransmit_TXE_BTF>:
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800333c:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d

  if (hi2c->EventCount == 0U)
 8003340:	6d03      	ldr	r3, [r0, #80]	@ 0x50
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003342:	b2d2      	uxtb	r2, r2
  if (hi2c->EventCount == 0U)
 8003344:	b983      	cbnz	r3, 8003368 <I2C_MemoryTransmit_TXE_BTF+0x2c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003346:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003348:	6802      	ldr	r2, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800334a:	2b01      	cmp	r3, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800334c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800334e:	d105      	bne.n	800335c <I2C_MemoryTransmit_TXE_BTF+0x20>
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003350:	b2db      	uxtb	r3, r3
 8003352:	6113      	str	r3, [r2, #16]

      hi2c->EventCount += 2U;
 8003354:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003356:	3302      	adds	r3, #2
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);

      hi2c->EventCount++;
 8003358:	6503      	str	r3, [r0, #80]	@ 0x50
 800335a:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800335c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8003360:	6113      	str	r3, [r2, #16]
      hi2c->EventCount++;
 8003362:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003364:	3301      	adds	r3, #1
 8003366:	e7f7      	b.n	8003358 <I2C_MemoryTransmit_TXE_BTF+0x1c>
    }
  }
  else if (hi2c->EventCount == 1U)
 8003368:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800336a:	2b01      	cmp	r3, #1
 800336c:	d103      	bne.n	8003376 <I2C_MemoryTransmit_TXE_BTF+0x3a>
  {
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800336e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8003370:	6802      	ldr	r2, [r0, #0]
 8003372:	b2db      	uxtb	r3, r3
 8003374:	e7f4      	b.n	8003360 <I2C_MemoryTransmit_TXE_BTF+0x24>

    hi2c->EventCount++;
  }
  else if (hi2c->EventCount == 2U)
 8003376:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003378:	2b02      	cmp	r3, #2
 800337a:	d12d      	bne.n	80033d8 <I2C_MemoryTransmit_TXE_BTF+0x9c>
  {
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800337c:	2a22      	cmp	r2, #34	@ 0x22
 800337e:	d105      	bne.n	800338c <I2C_MemoryTransmit_TXE_BTF+0x50>
    {
      /* Generate Restart */
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003380:	6802      	ldr	r2, [r0, #0]
 8003382:	6813      	ldr	r3, [r2, #0]
 8003384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003388:	6013      	str	r3, [r2, #0]

      hi2c->EventCount++;
 800338a:	e7ea      	b.n	8003362 <I2C_MemoryTransmit_TXE_BTF+0x26>
    }
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800338c:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 800338e:	b29b      	uxth	r3, r3
 8003390:	b163      	cbz	r3, 80033ac <I2C_MemoryTransmit_TXE_BTF+0x70>
 8003392:	2a21      	cmp	r2, #33	@ 0x21
 8003394:	d10a      	bne.n	80033ac <I2C_MemoryTransmit_TXE_BTF+0x70>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003396:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8003398:	6802      	ldr	r2, [r0, #0]
 800339a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800339e:	6111      	str	r1, [r2, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a0:	6243      	str	r3, [r0, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033a2:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	8543      	strh	r3, [r0, #42]	@ 0x2a
 80033aa:	4770      	bx	lr
    }
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033ac:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	b9c3      	cbnz	r3, 80033e4 <I2C_MemoryTransmit_TXE_BTF+0xa8>
 80033b2:	2a21      	cmp	r2, #33	@ 0x21
 80033b4:	d116      	bne.n	80033e4 <I2C_MemoryTransmit_TXE_BTF+0xa8>
    {
      /* Generate Stop condition then Call TxCpltCallback() */
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033b6:	6802      	ldr	r2, [r0, #0]
 80033b8:	6851      	ldr	r1, [r2, #4]
 80033ba:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 80033be:	6051      	str	r1, [r2, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	6811      	ldr	r1, [r2, #0]
 80033c2:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80033c6:	6011      	str	r1, [r2, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80033ca:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033cc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d0:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MemTxCpltCallback(hi2c);
 80033d4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80033d6:	4718      	bx	r3
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80033d8:	6803      	ldr	r3, [r0, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	0612      	lsls	r2, r2, #24
    hi2c->Instance->DR = 0x00U;
 80033de:	bf44      	itt	mi
 80033e0:	2200      	movmi	r2, #0
 80033e2:	611a      	strmi	r2, [r3, #16]
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80033e4:	4770      	bx	lr
	...

080033e8 <I2C_DMAAbort>:
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
  __IO uint32_t count = 0U;
 80033e8:	2300      	movs	r3, #0
{
 80033ea:	b433      	push	{r0, r1, r4, r5}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033ec:	f246 11a8 	movw	r1, #25000	@ 0x61a8
  __IO uint32_t count = 0U;
 80033f0:	9301      	str	r3, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033f2:	4b2b      	ldr	r3, [pc, #172]	@ (80034a0 <I2C_DMAAbort+0xb8>)
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80033f4:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033f6:	681b      	ldr	r3, [r3, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80033f8:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003400:	2123      	movs	r1, #35	@ 0x23
 8003402:	434b      	muls	r3, r1
 8003404:	9301      	str	r3, [sp, #4]
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
      break;
    }
    count--;
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003406:	6803      	ldr	r3, [r0, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003408:	b2d2      	uxtb	r2, r2
    if (count == 0U)
 800340a:	9901      	ldr	r1, [sp, #4]
 800340c:	bb41      	cbnz	r1, 8003460 <I2C_DMAAbort+0x78>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800340e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003410:	f041 0120 	orr.w	r1, r1, #32
 8003414:	6401      	str	r1, [r0, #64]	@ 0x40

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003416:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8003418:	b10c      	cbz	r4, 800341e <I2C_DMAAbort+0x36>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800341a:	2100      	movs	r1, #0
 800341c:	62a1      	str	r1, [r4, #40]	@ 0x28
  }
  if (hi2c->hdmarx != NULL)
 800341e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8003420:	b109      	cbz	r1, 8003426 <I2C_DMAAbort+0x3e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003422:	2500      	movs	r5, #0
 8003424:	628d      	str	r5, [r1, #40]	@ 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003426:	681d      	ldr	r5, [r3, #0]
 8003428:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 800342c:	601d      	str	r5, [r3, #0]

  hi2c->XferCount = 0U;
 800342e:	2500      	movs	r5, #0
 8003430:	8545      	strh	r5, [r0, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003432:	b104      	cbz	r4, 8003436 <I2C_DMAAbort+0x4e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003434:	6365      	str	r5, [r4, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003436:	b101      	cbz	r1, 800343a <I2C_DMAAbort+0x52>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003438:	634d      	str	r5, [r1, #52]	@ 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	f021 0101 	bic.w	r1, r1, #1
 8003440:	6019      	str	r1, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003442:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
 8003446:	2960      	cmp	r1, #96	@ 0x60
 8003448:	d111      	bne.n	800346e <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800344a:	2320      	movs	r3, #32
 800344c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003450:	2300      	movs	r3, #0
 8003452:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003456:	6403      	str	r3, [r0, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
 8003458:	6f43      	ldr	r3, [r0, #116]	@ 0x74
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800345a:	b002      	add	sp, #8
 800345c:	bc30      	pop	{r4, r5}
    hi2c->ErrorCallback(hi2c);
 800345e:	4718      	bx	r3
    count--;
 8003460:	9901      	ldr	r1, [sp, #4]
 8003462:	3901      	subs	r1, #1
 8003464:	9101      	str	r1, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003466:	6819      	ldr	r1, [r3, #0]
 8003468:	0589      	lsls	r1, r1, #22
 800346a:	d4ce      	bmi.n	800340a <I2C_DMAAbort+0x22>
 800346c:	e7d3      	b.n	8003416 <I2C_DMAAbort+0x2e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800346e:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 8003472:	2a28      	cmp	r2, #40	@ 0x28
 8003474:	d10d      	bne.n	8003492 <I2C_DMAAbort+0xaa>
      __HAL_I2C_ENABLE(hi2c);
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	f041 0101 	orr.w	r1, r1, #1
 800347c:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347e:	6819      	ldr	r1, [r3, #0]
 8003480:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8003484:	6019      	str	r1, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003486:	2300      	movs	r3, #0
 8003488:	6303      	str	r3, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800348a:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->ErrorCallback(hi2c);
 800348e:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8003490:	e7e3      	b.n	800345a <I2C_DMAAbort+0x72>
      hi2c->State = HAL_I2C_STATE_READY;
 8003492:	2320      	movs	r3, #32
 8003494:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	2300      	movs	r3, #0
 800349a:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
 800349e:	e7f6      	b.n	800348e <I2C_DMAAbort+0xa6>
 80034a0:	20000000 	.word	0x20000000

080034a4 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034a4:	6801      	ldr	r1, [r0, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	694b      	ldr	r3, [r1, #20]
 80034aa:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 80034ae:	d010      	beq.n	80034d2 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b0:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80034b4:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80034b6:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80034b8:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034ba:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034be:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c2:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034c8:	f043 0304 	orr.w	r3, r3, #4
 80034cc:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 80034ce:	2001      	movs	r0, #1
 80034d0:	4770      	bx	lr
  }
  return HAL_OK;
 80034d2:	4618      	mov	r0, r3
}
 80034d4:	4770      	bx	lr

080034d6 <I2C_WaitOnFlagUntilTimeout>:
{
 80034d6:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 80034da:	4606      	mov	r6, r0
 80034dc:	460f      	mov	r7, r1
 80034de:	4691      	mov	r9, r2
 80034e0:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80034e6:	6833      	ldr	r3, [r6, #0]
 80034e8:	f1ba 0f01 	cmp.w	sl, #1
 80034ec:	bf0c      	ite	eq
 80034ee:	695c      	ldreq	r4, [r3, #20]
 80034f0:	699c      	ldrne	r4, [r3, #24]
 80034f2:	ea27 0404 	bic.w	r4, r7, r4
 80034f6:	b2a4      	uxth	r4, r4
 80034f8:	fab4 f484 	clz	r4, r4
 80034fc:	0964      	lsrs	r4, r4, #5
 80034fe:	45a1      	cmp	r9, r4
 8003500:	d001      	beq.n	8003506 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8003502:	2000      	movs	r0, #0
 8003504:	e025      	b.n	8003552 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8003506:	1c6a      	adds	r2, r5, #1
 8003508:	d0ee      	beq.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350a:	f7ff f963 	bl	80027d4 <HAL_GetTick>
 800350e:	9b08      	ldr	r3, [sp, #32]
 8003510:	1ac0      	subs	r0, r0, r3
 8003512:	42a8      	cmp	r0, r5
 8003514:	d801      	bhi.n	800351a <I2C_WaitOnFlagUntilTimeout+0x44>
 8003516:	2d00      	cmp	r5, #0
 8003518:	d1e5      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800351a:	6833      	ldr	r3, [r6, #0]
 800351c:	f1ba 0f01 	cmp.w	sl, #1
 8003520:	bf0c      	ite	eq
 8003522:	695b      	ldreq	r3, [r3, #20]
 8003524:	699b      	ldrne	r3, [r3, #24]
 8003526:	ea27 0303 	bic.w	r3, r7, r3
 800352a:	b29b      	uxth	r3, r3
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	4599      	cmp	r9, r3
 8003534:	d1d7      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003536:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8003538:	2220      	movs	r2, #32
          return HAL_ERROR;
 800353a:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 800353c:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800353e:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003542:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003546:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003548:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	f042 0220 	orr.w	r2, r2, #32
 8003550:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8003552:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003556 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003556:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800355a:	4604      	mov	r4, r0
 800355c:	460f      	mov	r7, r1
 800355e:	4616      	mov	r6, r2
 8003560:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003562:	6825      	ldr	r5, [r4, #0]
 8003564:	6968      	ldr	r0, [r5, #20]
 8003566:	ea27 0000 	bic.w	r0, r7, r0
 800356a:	b280      	uxth	r0, r0
 800356c:	b1c0      	cbz	r0, 80035a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800356e:	696b      	ldr	r3, [r5, #20]
 8003570:	055a      	lsls	r2, r3, #21
 8003572:	d517      	bpl.n	80035a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003574:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003576:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003578:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800357c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800357e:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003582:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003584:	2300      	movs	r3, #0
 8003586:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003588:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800358c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003592:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003596:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003598:	2300      	movs	r3, #0
      return HAL_ERROR;
 800359a:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800359c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80035a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80035a4:	1c73      	adds	r3, r6, #1
 80035a6:	d0dd      	beq.n	8003564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a8:	f7ff f914 	bl	80027d4 <HAL_GetTick>
 80035ac:	eba0 0008 	sub.w	r0, r0, r8
 80035b0:	42b0      	cmp	r0, r6
 80035b2:	d801      	bhi.n	80035b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 80035b4:	2e00      	cmp	r6, #0
 80035b6:	d1d4      	bne.n	8003562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	695a      	ldr	r2, [r3, #20]
 80035bc:	ea27 0202 	bic.w	r2, r7, r2
 80035c0:	b292      	uxth	r2, r2
 80035c2:	2a00      	cmp	r2, #0
 80035c4:	d0cd      	beq.n	8003562 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035c6:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 80035c8:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ca:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035cc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035d6:	4313      	orrs	r3, r2
 80035d8:	e7dd      	b.n	8003596 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080035da <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80035da:	b570      	push	{r4, r5, r6, lr}
 80035dc:	4604      	mov	r4, r0
 80035de:	460d      	mov	r5, r1
 80035e0:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e2:	6823      	ldr	r3, [r4, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	061b      	lsls	r3, r3, #24
 80035e8:	d501      	bpl.n	80035ee <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80035ea:	2000      	movs	r0, #0
 80035ec:	e01e      	b.n	800362c <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035ee:	4620      	mov	r0, r4
 80035f0:	f7ff ff58 	bl	80034a4 <I2C_IsAcknowledgeFailed>
 80035f4:	b9c8      	cbnz	r0, 800362a <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	1c6a      	adds	r2, r5, #1
 80035f8:	d0f3      	beq.n	80035e2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fa:	f7ff f8eb 	bl	80027d4 <HAL_GetTick>
 80035fe:	1b80      	subs	r0, r0, r6
 8003600:	42a8      	cmp	r0, r5
 8003602:	d801      	bhi.n	8003608 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8003604:	2d00      	cmp	r5, #0
 8003606:	d1ec      	bne.n	80035e2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003608:	6823      	ldr	r3, [r4, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8003610:	d1e7      	bne.n	80035e2 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003612:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003614:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003616:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800361e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003620:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003624:	f042 0220 	orr.w	r2, r2, #32
 8003628:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800362a:	2001      	movs	r0, #1
}
 800362c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003630 <I2C_RequestMemoryWrite>:
{
 8003630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003634:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003636:	6802      	ldr	r2, [r0, #0]
{
 8003638:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363a:	6813      	ldr	r3, [r2, #0]
{
 800363c:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003642:	6013      	str	r3, [r2, #0]
{
 8003644:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8003648:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800364a:	463b      	mov	r3, r7
 800364c:	2200      	movs	r2, #0
 800364e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003652:	f8cd 8000 	str.w	r8, [sp]
{
 8003656:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003658:	f7ff ff3d 	bl	80034d6 <I2C_WaitOnFlagUntilTimeout>
 800365c:	6823      	ldr	r3, [r4, #0]
 800365e:	b138      	cbz	r0, 8003670 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	05db      	lsls	r3, r3, #23
 8003664:	d502      	bpl.n	800366c <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003666:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800366a:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 800366c:	2603      	movs	r6, #3
 800366e:	e020      	b.n	80036b2 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003670:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8003674:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003676:	463a      	mov	r2, r7
 8003678:	4643      	mov	r3, r8
 800367a:	4620      	mov	r0, r4
 800367c:	4918      	ldr	r1, [pc, #96]	@ (80036e0 <I2C_RequestMemoryWrite+0xb0>)
 800367e:	f7ff ff6a 	bl	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003682:	b9a8      	cbnz	r0, 80036b0 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	9003      	str	r0, [sp, #12]
 8003688:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800368a:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368c:	9203      	str	r2, [sp, #12]
 800368e:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003690:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003692:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003694:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003696:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003698:	f7ff ff9f 	bl	80035da <I2C_WaitOnTXEFlagUntilTimeout>
 800369c:	4606      	mov	r6, r0
 800369e:	b160      	cbz	r0, 80036ba <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80036a2:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036a4:	bf01      	itttt	eq
 80036a6:	6822      	ldreq	r2, [r4, #0]
 80036a8:	6813      	ldreq	r3, [r2, #0]
 80036aa:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80036ae:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 80036b0:	2601      	movs	r6, #1
}
 80036b2:	4630      	mov	r0, r6
 80036b4:	b005      	add	sp, #20
 80036b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036ba:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036be:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036c0:	d102      	bne.n	80036c8 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036c2:	b2ed      	uxtb	r5, r5
 80036c4:	611d      	str	r5, [r3, #16]
 80036c6:	e7f4      	b.n	80036b2 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036c8:	0a2a      	lsrs	r2, r5, #8
 80036ca:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036cc:	4639      	mov	r1, r7
 80036ce:	4642      	mov	r2, r8
 80036d0:	4620      	mov	r0, r4
 80036d2:	f7ff ff82 	bl	80035da <I2C_WaitOnTXEFlagUntilTimeout>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d1e2      	bne.n	80036a0 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036da:	6823      	ldr	r3, [r4, #0]
 80036dc:	e7f1      	b.n	80036c2 <I2C_RequestMemoryWrite+0x92>
 80036de:	bf00      	nop
 80036e0:	00010002 	.word	0x00010002

080036e4 <I2C_RequestMemoryRead>:
{
 80036e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036e8:	469a      	mov	sl, r3
 80036ea:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	6803      	ldr	r3, [r0, #0]
{
 80036f0:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f2:	681a      	ldr	r2, [r3, #0]
{
 80036f4:	460e      	mov	r6, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80036fa:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036fc:	681a      	ldr	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003706:	601a      	str	r2, [r3, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003708:	463b      	mov	r3, r7
 800370a:	2200      	movs	r2, #0
 800370c:	f8cd 8000 	str.w	r8, [sp]
{
 8003710:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003712:	f7ff fee0 	bl	80034d6 <I2C_WaitOnFlagUntilTimeout>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	b148      	cbz	r0, 800372e <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371a:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800371c:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800371e:	bf48      	it	mi
 8003720:	f44f 7300 	movmi.w	r3, #512	@ 0x200
    return HAL_TIMEOUT;
 8003724:	f04f 0003 	mov.w	r0, #3
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003728:	bf48      	it	mi
 800372a:	6423      	strmi	r3, [r4, #64]	@ 0x40
 800372c:	e021      	b.n	8003772 <I2C_RequestMemoryRead+0x8e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800372e:	fa5f f986 	uxtb.w	r9, r6
 8003732:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8003736:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003738:	463a      	mov	r2, r7
 800373a:	4643      	mov	r3, r8
 800373c:	4620      	mov	r0, r4
 800373e:	492a      	ldr	r1, [pc, #168]	@ (80037e8 <I2C_RequestMemoryRead+0x104>)
 8003740:	f7ff ff09 	bl	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003744:	b9a0      	cbnz	r0, 8003770 <I2C_RequestMemoryRead+0x8c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003746:	6823      	ldr	r3, [r4, #0]
 8003748:	9003      	str	r0, [sp, #12]
 800374a:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800374c:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800374e:	9203      	str	r2, [sp, #12]
 8003750:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003752:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003754:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003756:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003758:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800375a:	f7ff ff3e 	bl	80035da <I2C_WaitOnTXEFlagUntilTimeout>
 800375e:	b158      	cbz	r0, 8003778 <I2C_RequestMemoryRead+0x94>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003760:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003762:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	bf01      	itttt	eq
 8003766:	6822      	ldreq	r2, [r4, #0]
 8003768:	6813      	ldreq	r3, [r2, #0]
 800376a:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 800376e:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8003770:	2001      	movs	r0, #1
}
 8003772:	b004      	add	sp, #16
 8003774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003778:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800377e:	d11a      	bne.n	80037b6 <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003780:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003782:	4642      	mov	r2, r8
 8003784:	4639      	mov	r1, r7
 8003786:	4620      	mov	r0, r4
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003788:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800378a:	f7ff ff26 	bl	80035da <I2C_WaitOnTXEFlagUntilTimeout>
 800378e:	4602      	mov	r2, r0
 8003790:	2800      	cmp	r0, #0
 8003792:	d1e5      	bne.n	8003760 <I2C_RequestMemoryRead+0x7c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003794:	6821      	ldr	r1, [r4, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003796:	4620      	mov	r0, r4
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003798:	680b      	ldr	r3, [r1, #0]
 800379a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800379e:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a0:	463b      	mov	r3, r7
 80037a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80037a6:	f8cd 8000 	str.w	r8, [sp]
 80037aa:	f7ff fe94 	bl	80034d6 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	6822      	ldr	r2, [r4, #0]
 80037b0:	b160      	cbz	r0, 80037cc <I2C_RequestMemoryRead+0xe8>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037b2:	6813      	ldr	r3, [r2, #0]
 80037b4:	e7b2      	b.n	800371c <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037b6:	0a2a      	lsrs	r2, r5, #8
 80037b8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ba:	4639      	mov	r1, r7
 80037bc:	4642      	mov	r2, r8
 80037be:	4620      	mov	r0, r4
 80037c0:	f7ff ff0b 	bl	80035da <I2C_WaitOnTXEFlagUntilTimeout>
 80037c4:	2800      	cmp	r0, #0
 80037c6:	d1cb      	bne.n	8003760 <I2C_RequestMemoryRead+0x7c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	e7d9      	b.n	8003780 <I2C_RequestMemoryRead+0x9c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80037cc:	f049 0301 	orr.w	r3, r9, #1
 80037d0:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d2:	4620      	mov	r0, r4
 80037d4:	4643      	mov	r3, r8
 80037d6:	463a      	mov	r2, r7
 80037d8:	4903      	ldr	r1, [pc, #12]	@ (80037e8 <I2C_RequestMemoryRead+0x104>)
 80037da:	f7ff febc 	bl	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037de:	3800      	subs	r0, #0
 80037e0:	bf18      	it	ne
 80037e2:	2001      	movne	r0, #1
 80037e4:	e7c5      	b.n	8003772 <I2C_RequestMemoryRead+0x8e>
 80037e6:	bf00      	nop
 80037e8:	00010002 	.word	0x00010002

080037ec <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80037ec:	b570      	push	{r4, r5, r6, lr}
 80037ee:	4604      	mov	r4, r0
 80037f0:	460d      	mov	r5, r1
 80037f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	075b      	lsls	r3, r3, #29
 80037fa:	d501      	bpl.n	8003800 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80037fc:	2000      	movs	r0, #0
 80037fe:	e01e      	b.n	800383e <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003800:	4620      	mov	r0, r4
 8003802:	f7ff fe4f 	bl	80034a4 <I2C_IsAcknowledgeFailed>
 8003806:	b9c8      	cbnz	r0, 800383c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8003808:	1c6a      	adds	r2, r5, #1
 800380a:	d0f3      	beq.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fe ffe2 	bl	80027d4 <HAL_GetTick>
 8003810:	1b80      	subs	r0, r0, r6
 8003812:	42a8      	cmp	r0, r5
 8003814:	d801      	bhi.n	800381a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003816:	2d00      	cmp	r5, #0
 8003818:	d1ec      	bne.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800381a:	6823      	ldr	r3, [r4, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f013 0304 	ands.w	r3, r3, #4
 8003822:	d1e7      	bne.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8003824:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003830:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003832:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003836:	f042 0220 	orr.w	r2, r2, #32
 800383a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800383c:	2001      	movs	r0, #1
}
 800383e:	bd70      	pop	{r4, r5, r6, pc}

08003840 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	4604      	mov	r4, r0
 8003844:	460d      	mov	r5, r1
 8003846:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003848:	6821      	ldr	r1, [r4, #0]
 800384a:	694b      	ldr	r3, [r1, #20]
 800384c:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8003850:	d001      	beq.n	8003856 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8003852:	2000      	movs	r0, #0
 8003854:	e011      	b.n	800387a <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003856:	694a      	ldr	r2, [r1, #20]
 8003858:	06d2      	lsls	r2, r2, #27
 800385a:	d50f      	bpl.n	800387c <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800385c:	f06f 0210 	mvn.w	r2, #16
 8003860:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8003862:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003864:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003866:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800386e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003870:	6423      	str	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8003872:	2300      	movs	r3, #0
      return HAL_ERROR;
 8003874:	2001      	movs	r0, #1
        __HAL_UNLOCK(hi2c);
 8003876:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800387a:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387c:	f7fe ffaa 	bl	80027d4 <HAL_GetTick>
 8003880:	1b80      	subs	r0, r0, r6
 8003882:	42a8      	cmp	r0, r5
 8003884:	d801      	bhi.n	800388a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003886:	2d00      	cmp	r5, #0
 8003888:	d1de      	bne.n	8003848 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f013 0340 	ands.w	r3, r3, #64	@ 0x40
 8003892:	d1d9      	bne.n	8003848 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->State               = HAL_I2C_STATE_READY;
 8003894:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003898:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800389c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80038a2:	4313      	orrs	r3, r2
 80038a4:	e7e4      	b.n	8003870 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
	...

080038a8 <I2C_ITError>:
{
 80038a8:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038aa:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80038ae:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
{
 80038b2:	4604      	mov	r4, r0
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038b4:	2b10      	cmp	r3, #16
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80038b6:	b2d9      	uxtb	r1, r3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038b8:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80038ba:	6803      	ldr	r3, [r0, #0]
 80038bc:	d001      	beq.n	80038c2 <I2C_ITError+0x1a>
 80038be:	2940      	cmp	r1, #64	@ 0x40
 80038c0:	d113      	bne.n	80038ea <I2C_ITError+0x42>
 80038c2:	2a22      	cmp	r2, #34	@ 0x22
 80038c4:	d111      	bne.n	80038ea <I2C_ITError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80038c6:	6819      	ldr	r1, [r3, #0]
 80038c8:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 80038cc:	6019      	str	r1, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80038ce:	6859      	ldr	r1, [r3, #4]
 80038d0:	f411 6100 	ands.w	r1, r1, #2048	@ 0x800
 80038d4:	d106      	bne.n	80038e4 <I2C_ITError+0x3c>
 80038d6:	2a60      	cmp	r2, #96	@ 0x60
      hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	bf1e      	ittt	ne
 80038da:	2220      	movne	r2, #32
 80038dc:	f884 203d 	strbne.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e0:	f884 103e 	strbne.w	r1, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 80038e4:	2200      	movs	r2, #0
 80038e6:	6322      	str	r2, [r4, #48]	@ 0x30
 80038e8:	e007      	b.n	80038fa <I2C_ITError+0x52>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038ea:	f002 0128 	and.w	r1, r2, #40	@ 0x28
 80038ee:	2928      	cmp	r1, #40	@ 0x28
 80038f0:	d1ed      	bne.n	80038ce <I2C_ITError+0x26>
    hi2c->PreviousState = I2C_STATE_NONE;
 80038f2:	2200      	movs	r2, #0
 80038f4:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80038f6:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8003900:	d050      	beq.n	80039a4 <I2C_ITError+0xfc>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003902:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003904:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003906:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800390a:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800390c:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8003910:	2b01      	cmp	r3, #1
 8003912:	4b37      	ldr	r3, [pc, #220]	@ (80039f0 <I2C_ITError+0x148>)
 8003914:	d02c      	beq.n	8003970 <I2C_ITError+0xc8>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003916:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003918:	f7ff fbec 	bl	80030f4 <HAL_DMA_Abort_IT>
 800391c:	b150      	cbz	r0, 8003934 <I2C_ITError+0x8c>
        __HAL_I2C_DISABLE(hi2c);
 800391e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003920:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        __HAL_I2C_DISABLE(hi2c);
 8003922:	6813      	ldr	r3, [r2, #0]
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800392a:	2320      	movs	r3, #32
 800392c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003930:	6b43      	ldr	r3, [r0, #52]	@ 0x34
    hi2c->ErrorCallback(hi2c);
 8003932:	4798      	blx	r3
  CurrentError = hi2c->ErrorCode;
 8003934:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003936:	0719      	lsls	r1, r3, #28
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003938:	bf1f      	itttt	ne
 800393a:	6822      	ldrne	r2, [r4, #0]
 800393c:	6853      	ldrne	r3, [r2, #4]
 800393e:	f423 63e0 	bicne.w	r3, r3, #1792	@ 0x700
 8003942:	6053      	strne	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003944:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003948:	6c22      	ldr	r2, [r4, #64]	@ 0x40
  CurrentState = hi2c->State;
 800394a:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800394c:	0752      	lsls	r2, r2, #29
 800394e:	d54d      	bpl.n	80039ec <I2C_ITError+0x144>
 8003950:	2b28      	cmp	r3, #40	@ 0x28
 8003952:	d14b      	bne.n	80039ec <I2C_ITError+0x144>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003954:	4b27      	ldr	r3, [pc, #156]	@ (80039f4 <I2C_ITError+0x14c>)
    hi2c->State         = HAL_I2C_STATE_READY;
 8003956:	2220      	movs	r2, #32
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003958:	62e3      	str	r3, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800395a:	2300      	movs	r3, #0
 800395c:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800395e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003962:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ListenCpltCallback(hi2c);
 8003966:	4620      	mov	r0, r4
 8003968:	6e63      	ldr	r3, [r4, #100]	@ 0x64
}
 800396a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    hi2c->ListenCpltCallback(hi2c);
 800396e:	4718      	bx	r3
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003970:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003972:	6343      	str	r3, [r0, #52]	@ 0x34
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003974:	f7ff fbbe 	bl	80030f4 <HAL_DMA_Abort_IT>
 8003978:	2800      	cmp	r0, #0
 800397a:	d0db      	beq.n	8003934 <I2C_ITError+0x8c>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800397c:	6823      	ldr	r3, [r4, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	0651      	lsls	r1, r2, #25
 8003982:	d505      	bpl.n	8003990 <I2C_ITError+0xe8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003984:	691a      	ldr	r2, [r3, #16]
 8003986:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003988:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800398a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800398c:	3301      	adds	r3, #1
 800398e:	6263      	str	r3, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003990:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003992:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003994:	6813      	ldr	r3, [r2, #0]
 8003996:	f023 0301 	bic.w	r3, r3, #1
 800399a:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800399c:	2320      	movs	r3, #32
 800399e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039a2:	e7c5      	b.n	8003930 <I2C_ITError+0x88>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80039a4:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 80039a8:	2960      	cmp	r1, #96	@ 0x60
 80039aa:	d114      	bne.n	80039d6 <I2C_ITError+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80039ac:	2120      	movs	r1, #32
 80039ae:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b2:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	0652      	lsls	r2, r2, #25
 80039b8:	d505      	bpl.n	80039c6 <I2C_ITError+0x11e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ba:	691a      	ldr	r2, [r3, #16]
 80039bc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80039be:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80039c0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80039c2:	3301      	adds	r3, #1
 80039c4:	6263      	str	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 80039c6:	6822      	ldr	r2, [r4, #0]
 80039c8:	6813      	ldr	r3, [r2, #0]
 80039ca:	f023 0301 	bic.w	r3, r3, #1
 80039ce:	6013      	str	r3, [r2, #0]
    hi2c->AbortCpltCallback(hi2c);
 80039d0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
    hi2c->ErrorCallback(hi2c);
 80039d2:	4620      	mov	r0, r4
 80039d4:	e7ad      	b.n	8003932 <I2C_ITError+0x8a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	0650      	lsls	r0, r2, #25
 80039da:	d505      	bpl.n	80039e8 <I2C_ITError+0x140>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80039e0:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80039e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80039e4:	3301      	adds	r3, #1
 80039e6:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->ErrorCallback(hi2c);
 80039e8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80039ea:	e7f2      	b.n	80039d2 <I2C_ITError+0x12a>
}
 80039ec:	bd10      	pop	{r4, pc}
 80039ee:	bf00      	nop
 80039f0:	080033e9 	.word	0x080033e9
 80039f4:	ffff0000 	.word	0xffff0000

080039f8 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 80039f8:	4770      	bx	lr

080039fa <HAL_I2C_MasterTxCpltCallback>:
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 80039fa:	4770      	bx	lr

080039fc <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 80039fc:	4770      	bx	lr

080039fe <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 80039fe:	4770      	bx	lr

08003a00 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003a00:	4770      	bx	lr

08003a02 <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 8003a02:	4770      	bx	lr

08003a04 <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003a04:	4770      	bx	lr

08003a06 <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003a06:	4770      	bx	lr

08003a08 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8003a08:	4770      	bx	lr
	...

08003a0c <HAL_I2C_Init>:
{
 8003a0c:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8003a0e:	4604      	mov	r4, r0
 8003a10:	b908      	cbnz	r0, 8003a16 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8003a12:	2001      	movs	r0, #1
}
 8003a14:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a16:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003a1a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003a1e:	b9e3      	cbnz	r3, 8003a5a <HAL_I2C_Init+0x4e>
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003a20:	4b57      	ldr	r3, [pc, #348]	@ (8003b80 <HAL_I2C_Init+0x174>)
    hi2c->Lock = HAL_UNLOCKED;
 8003a22:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 8003a26:	6543      	str	r3, [r0, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 8003a28:	4b56      	ldr	r3, [pc, #344]	@ (8003b84 <HAL_I2C_Init+0x178>)
 8003a2a:	6583      	str	r3, [r0, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 8003a2c:	4b56      	ldr	r3, [pc, #344]	@ (8003b88 <HAL_I2C_Init+0x17c>)
 8003a2e:	65c3      	str	r3, [r0, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 8003a30:	4b56      	ldr	r3, [pc, #344]	@ (8003b8c <HAL_I2C_Init+0x180>)
 8003a32:	6603      	str	r3, [r0, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 8003a34:	4b56      	ldr	r3, [pc, #344]	@ (8003b90 <HAL_I2C_Init+0x184>)
 8003a36:	6643      	str	r3, [r0, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 8003a38:	4b56      	ldr	r3, [pc, #344]	@ (8003b94 <HAL_I2C_Init+0x188>)
 8003a3a:	6683      	str	r3, [r0, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 8003a3c:	4b56      	ldr	r3, [pc, #344]	@ (8003b98 <HAL_I2C_Init+0x18c>)
 8003a3e:	66c3      	str	r3, [r0, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8003a40:	4b56      	ldr	r3, [pc, #344]	@ (8003b9c <HAL_I2C_Init+0x190>)
 8003a42:	6703      	str	r3, [r0, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8003a44:	4b56      	ldr	r3, [pc, #344]	@ (8003ba0 <HAL_I2C_Init+0x194>)
 8003a46:	6743      	str	r3, [r0, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 8003a48:	4b56      	ldr	r3, [pc, #344]	@ (8003ba4 <HAL_I2C_Init+0x198>)
 8003a4a:	6783      	str	r3, [r0, #120]	@ 0x78
    if (hi2c->MspInitCallback == NULL)
 8003a4c:	6fc3      	ldr	r3, [r0, #124]	@ 0x7c
 8003a4e:	b90b      	cbnz	r3, 8003a54 <HAL_I2C_Init+0x48>
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 8003a50:	4b55      	ldr	r3, [pc, #340]	@ (8003ba8 <HAL_I2C_Init+0x19c>)
 8003a52:	67c3      	str	r3, [r0, #124]	@ 0x7c
    hi2c->MspInitCallback(hi2c);
 8003a54:	4620      	mov	r0, r4
 8003a56:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8003a58:	4798      	blx	r3
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a5a:	2324      	movs	r3, #36	@ 0x24
 8003a5c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003a60:	6823      	ldr	r3, [r4, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a70:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a78:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a7a:	f002 f9a1 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 8003a7e:	4603      	mov	r3, r0
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a80:	4a4a      	ldr	r2, [pc, #296]	@ (8003bac <HAL_I2C_Init+0x1a0>)
 8003a82:	6860      	ldr	r0, [r4, #4]
 8003a84:	4290      	cmp	r0, r2
 8003a86:	bf94      	ite	ls
 8003a88:	4a49      	ldrls	r2, [pc, #292]	@ (8003bb0 <HAL_I2C_Init+0x1a4>)
 8003a8a:	4a4a      	ldrhi	r2, [pc, #296]	@ (8003bb4 <HAL_I2C_Init+0x1a8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	bf8c      	ite	hi
 8003a90:	2200      	movhi	r2, #0
 8003a92:	2201      	movls	r2, #1
 8003a94:	2a00      	cmp	r2, #0
 8003a96:	d1bc      	bne.n	8003a12 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a98:	4e44      	ldr	r6, [pc, #272]	@ (8003bac <HAL_I2C_Init+0x1a0>)
  freqrange = I2C_FREQRANGE(pclk1);
 8003a9a:	4947      	ldr	r1, [pc, #284]	@ (8003bb8 <HAL_I2C_Init+0x1ac>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a9c:	42b0      	cmp	r0, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8003a9e:	fbb3 f1f1 	udiv	r1, r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aa2:	bf88      	it	hi
 8003aa4:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aa8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003aaa:	f103 33ff 	add.w	r3, r3, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aae:	6855      	ldr	r5, [r2, #4]
 8003ab0:	f025 053f 	bic.w	r5, r5, #63	@ 0x3f
 8003ab4:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ab8:	bf82      	ittt	hi
 8003aba:	4371      	mulhi	r1, r6
 8003abc:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8003ac0:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ac4:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ac6:	6a15      	ldr	r5, [r2, #32]
 8003ac8:	3101      	adds	r1, #1
 8003aca:	f025 053f 	bic.w	r5, r5, #63	@ 0x3f
 8003ace:	4329      	orrs	r1, r5
 8003ad0:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ad2:	69d1      	ldr	r1, [r2, #28]
 8003ad4:	4d35      	ldr	r5, [pc, #212]	@ (8003bac <HAL_I2C_Init+0x1a0>)
 8003ad6:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8003ada:	42a8      	cmp	r0, r5
 8003adc:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003ae0:	d832      	bhi.n	8003b48 <HAL_I2C_Init+0x13c>
 8003ae2:	0040      	lsls	r0, r0, #1
 8003ae4:	fbb3 f3f0 	udiv	r3, r3, r0
 8003ae8:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8003aec:	3301      	adds	r3, #1
 8003aee:	4203      	tst	r3, r0
 8003af0:	d042      	beq.n	8003b78 <HAL_I2C_Init+0x16c>
 8003af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003af6:	4319      	orrs	r1, r3
 8003af8:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003afa:	6811      	ldr	r1, [r2, #0]
 8003afc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8003b00:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8003b04:	4303      	orrs	r3, r0
 8003b06:	430b      	orrs	r3, r1
 8003b08:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b0a:	6891      	ldr	r1, [r2, #8]
 8003b0c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003b10:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8003b14:	4303      	orrs	r3, r0
 8003b16:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b1e:	68d1      	ldr	r1, [r2, #12]
 8003b20:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003b24:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8003b28:	4303      	orrs	r3, r0
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003b2e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b30:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8003b32:	f043 0301 	orr.w	r3, r3, #1
 8003b36:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8003b38:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b3a:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b40:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b42:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8003b46:	e765      	b.n	8003a14 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b48:	68a5      	ldr	r5, [r4, #8]
 8003b4a:	b955      	cbnz	r5, 8003b62 <HAL_I2C_Init+0x156>
 8003b4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003b50:	fbb3 f3f0 	udiv	r3, r3, r0
 8003b54:	3301      	adds	r3, #1
 8003b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5a:	b17b      	cbz	r3, 8003b7c <HAL_I2C_Init+0x170>
 8003b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b60:	e7c9      	b.n	8003af6 <HAL_I2C_Init+0xea>
 8003b62:	2519      	movs	r5, #25
 8003b64:	4368      	muls	r0, r5
 8003b66:	fbb3 f3f0 	udiv	r3, r3, r0
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b70:	b123      	cbz	r3, 8003b7c <HAL_I2C_Init+0x170>
 8003b72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b76:	e7be      	b.n	8003af6 <HAL_I2C_Init+0xea>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	e7bc      	b.n	8003af6 <HAL_I2C_Init+0xea>
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e7ba      	b.n	8003af6 <HAL_I2C_Init+0xea>
 8003b80:	080039fb 	.word	0x080039fb
 8003b84:	080039fd 	.word	0x080039fd
 8003b88:	080039ff 	.word	0x080039ff
 8003b8c:	08003a01 	.word	0x08003a01
 8003b90:	08003a03 	.word	0x08003a03
 8003b94:	08003a05 	.word	0x08003a05
 8003b98:	08003a07 	.word	0x08003a07
 8003b9c:	08003a09 	.word	0x08003a09
 8003ba0:	080039f9 	.word	0x080039f9
 8003ba4:	0800333b 	.word	0x0800333b
 8003ba8:	080018f5 	.word	0x080018f5
 8003bac:	000186a0 	.word	0x000186a0
 8003bb0:	001e847f 	.word	0x001e847f
 8003bb4:	003d08ff 	.word	0x003d08ff
 8003bb8:	000f4240 	.word	0x000f4240

08003bbc <HAL_I2C_Mem_Write>:
{
 8003bbc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003bc0:	4604      	mov	r4, r0
 8003bc2:	4699      	mov	r9, r3
 8003bc4:	460f      	mov	r7, r1
 8003bc6:	4690      	mov	r8, r2
 8003bc8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8003bca:	f7fe fe03 	bl	80027d4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bce:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003bd2:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd4:	2b20      	cmp	r3, #32
 8003bd6:	d003      	beq.n	8003be0 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8003bd8:	2002      	movs	r0, #2
}
 8003bda:	b003      	add	sp, #12
 8003bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be0:	9000      	str	r0, [sp, #0]
 8003be2:	2319      	movs	r3, #25
 8003be4:	2201      	movs	r2, #1
 8003be6:	4620      	mov	r0, r4
 8003be8:	493a      	ldr	r1, [pc, #232]	@ (8003cd4 <HAL_I2C_Mem_Write+0x118>)
 8003bea:	f7ff fc74 	bl	80034d6 <I2C_WaitOnFlagUntilTimeout>
 8003bee:	2800      	cmp	r0, #0
 8003bf0:	d1f2      	bne.n	8003bd8 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8003bf2:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d0ee      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x1c>
 8003bfa:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bfc:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003bfe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c02:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c04:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c06:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003c08:	bf58      	it	pl
 8003c0a:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c0c:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8003c0e:	bf5c      	itt	pl
 8003c10:	f043 0301 	orrpl.w	r3, r3, #1
 8003c14:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c16:	6803      	ldr	r3, [r0, #0]
 8003c18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c1c:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c1e:	2321      	movs	r3, #33	@ 0x21
 8003c20:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003c24:	2340      	movs	r3, #64	@ 0x40
 8003c26:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8003c2e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c30:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8003c32:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003c34:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8003c38:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c3a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003c3c:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c3e:	4b26      	ldr	r3, [pc, #152]	@ (8003cd8 <HAL_I2C_Mem_Write+0x11c>)
 8003c40:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c42:	464b      	mov	r3, r9
 8003c44:	e9cd 6500 	strd	r6, r5, [sp]
 8003c48:	f7ff fcf2 	bl	8003630 <I2C_RequestMemoryWrite>
 8003c4c:	2800      	cmp	r0, #0
 8003c4e:	d02a      	beq.n	8003ca6 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8003c50:	2001      	movs	r0, #1
 8003c52:	e7c2      	b.n	8003bda <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c54:	f7ff fcc1 	bl	80035da <I2C_WaitOnTXEFlagUntilTimeout>
 8003c58:	b140      	cbz	r0, 8003c6c <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003c5c:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5e:	bf01      	itttt	eq
 8003c60:	6822      	ldreq	r2, [r4, #0]
 8003c62:	6813      	ldreq	r3, [r2, #0]
 8003c64:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8003c68:	6013      	streq	r3, [r2, #0]
 8003c6a:	e7f1      	b.n	8003c50 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c6c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003c6e:	6827      	ldr	r7, [r4, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003c76:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003c78:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003c7a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8003c7c:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8003c7e:	3a01      	subs	r2, #1
 8003c80:	b292      	uxth	r2, r2
 8003c82:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c84:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003c86:	1e48      	subs	r0, r1, #1
 8003c88:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c8a:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8003c8c:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c8e:	d50a      	bpl.n	8003ca6 <HAL_I2C_Mem_Write+0xea>
 8003c90:	b148      	cbz	r0, 8003ca6 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c92:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8003c94:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c96:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003c98:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003c9a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c9c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8003ca2:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8003ca4:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ca6:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ca8:	462a      	mov	r2, r5
 8003caa:	4631      	mov	r1, r6
 8003cac:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1d0      	bne.n	8003c54 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb2:	f7ff fd9b 	bl	80037ec <I2C_WaitOnBTFFlagUntilTimeout>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d1cf      	bne.n	8003c5a <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cba:	6822      	ldr	r2, [r4, #0]
 8003cbc:	6813      	ldr	r3, [r2, #0]
 8003cbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cc2:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003cc4:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8003cc6:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cce:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8003cd2:	e782      	b.n	8003bda <HAL_I2C_Mem_Write+0x1e>
 8003cd4:	00100002 	.word	0x00100002
 8003cd8:	ffff0000 	.word	0xffff0000

08003cdc <HAL_I2C_Mem_Read>:
{
 8003cdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003ce0:	4699      	mov	r9, r3
  __IO uint32_t count = 0U;
 8003ce2:	2300      	movs	r3, #0
{
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	b089      	sub	sp, #36	@ 0x24
  __IO uint32_t count = 0U;
 8003ce8:	9303      	str	r3, [sp, #12]
{
 8003cea:	460d      	mov	r5, r1
 8003cec:	4690      	mov	r8, r2
 8003cee:	9f12      	ldr	r7, [sp, #72]	@ 0x48
  uint32_t tickstart = HAL_GetTick();
 8003cf0:	f7fe fd70 	bl	80027d4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cf4:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8003cf8:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfa:	2b20      	cmp	r3, #32
 8003cfc:	d004      	beq.n	8003d08 <HAL_I2C_Mem_Read+0x2c>
      return HAL_BUSY;
 8003cfe:	2502      	movs	r5, #2
}
 8003d00:	4628      	mov	r0, r5
 8003d02:	b009      	add	sp, #36	@ 0x24
 8003d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d08:	9000      	str	r0, [sp, #0]
 8003d0a:	2319      	movs	r3, #25
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4620      	mov	r0, r4
 8003d10:	4990      	ldr	r1, [pc, #576]	@ (8003f54 <HAL_I2C_Mem_Read+0x278>)
 8003d12:	f7ff fbe0 	bl	80034d6 <I2C_WaitOnFlagUntilTimeout>
 8003d16:	2800      	cmp	r0, #0
 8003d18:	d1f1      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x22>
    __HAL_LOCK(hi2c);
 8003d1a:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d0ed      	beq.n	8003cfe <HAL_I2C_Mem_Read+0x22>
 8003d22:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d24:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003d26:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d2a:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d2c:	4629      	mov	r1, r5
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d2e:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003d30:	bf58      	it	pl
 8003d32:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d34:	4642      	mov	r2, r8
      __HAL_I2C_ENABLE(hi2c);
 8003d36:	bf5c      	itt	pl
 8003d38:	f043 0301 	orrpl.w	r3, r3, #1
 8003d3c:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d3e:	6803      	ldr	r3, [r0, #0]
 8003d40:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d44:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d46:	2322      	movs	r3, #34	@ 0x22
 8003d48:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d4c:	2340      	movs	r3, #64	@ 0x40
 8003d4e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d52:	2300      	movs	r3, #0
 8003d54:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8003d56:	9b10      	ldr	r3, [sp, #64]	@ 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d58:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8003d5a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d5c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8003d60:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d62:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003d64:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d66:	4b7c      	ldr	r3, [pc, #496]	@ (8003f58 <HAL_I2C_Mem_Read+0x27c>)
 8003d68:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	e9cd 7600 	strd	r7, r6, [sp]
 8003d70:	f7ff fcb8 	bl	80036e4 <I2C_RequestMemoryRead>
 8003d74:	4605      	mov	r5, r0
 8003d76:	2800      	cmp	r0, #0
 8003d78:	f040 80ba 	bne.w	8003ef0 <HAL_I2C_Mem_Read+0x214>
    if (hi2c->XferSize == 0U)
 8003d7c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8003d80:	b9c2      	cbnz	r2, 8003db4 <HAL_I2C_Mem_Read+0xd8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	9004      	str	r0, [sp, #16]
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	9204      	str	r2, [sp, #16]
 8003d88:	699a      	ldr	r2, [r3, #24]
 8003d8a:	9204      	str	r2, [sp, #16]
 8003d8c:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d94:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d96:	f8df 81c4 	ldr.w	r8, [pc, #452]	@ 8003f5c <HAL_I2C_Mem_Read+0x280>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d9a:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8003f60 <HAL_I2C_Mem_Read+0x284>
    while (hi2c->XferSize > 0U)
 8003d9e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d137      	bne.n	8003e14 <HAL_I2C_Mem_Read+0x138>
    hi2c->State = HAL_I2C_STATE_READY;
 8003da4:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8003da6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8003daa:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8003db2:	e7a5      	b.n	8003d00 <HAL_I2C_Mem_Read+0x24>
    else if (hi2c->XferSize == 1U)
 8003db4:	2a01      	cmp	r2, #1
 8003db6:	d111      	bne.n	8003ddc <HAL_I2C_Mem_Read+0x100>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	9005      	str	r0, [sp, #20]
 8003dc6:	695a      	ldr	r2, [r3, #20]
 8003dc8:	9205      	str	r2, [sp, #20]
 8003dca:	699a      	ldr	r2, [r3, #24]
 8003dcc:	9205      	str	r2, [sp, #20]
 8003dce:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd8:	b662      	cpsie	i
}
 8003dda:	e7dc      	b.n	8003d96 <HAL_I2C_Mem_Read+0xba>
    else if (hi2c->XferSize == 2U)
 8003ddc:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dde:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8003de0:	d10e      	bne.n	8003e00 <HAL_I2C_Mem_Read+0x124>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003de8:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dea:	6823      	ldr	r3, [r4, #0]
 8003dec:	9006      	str	r0, [sp, #24]
 8003dee:	695a      	ldr	r2, [r3, #20]
 8003df0:	9206      	str	r2, [sp, #24]
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	9206      	str	r2, [sp, #24]
 8003df6:	9a06      	ldr	r2, [sp, #24]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dfe:	e7ea      	b.n	8003dd6 <HAL_I2C_Mem_Read+0xfa>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e00:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e04:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e06:	9007      	str	r0, [sp, #28]
 8003e08:	695a      	ldr	r2, [r3, #20]
 8003e0a:	9207      	str	r2, [sp, #28]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	9307      	str	r3, [sp, #28]
 8003e10:	9b07      	ldr	r3, [sp, #28]
 8003e12:	e7c0      	b.n	8003d96 <HAL_I2C_Mem_Read+0xba>
      if (hi2c->XferSize <= 3U)
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d878      	bhi.n	8003f0a <HAL_I2C_Mem_Read+0x22e>
        if (hi2c->XferSize == 1U)
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d115      	bne.n	8003e48 <HAL_I2C_Mem_Read+0x16c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1c:	4632      	mov	r2, r6
 8003e1e:	4639      	mov	r1, r7
 8003e20:	4620      	mov	r0, r4
 8003e22:	f7ff fd0d 	bl	8003840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e26:	2800      	cmp	r0, #0
 8003e28:	d162      	bne.n	8003ef0 <HAL_I2C_Mem_Read+0x214>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	691a      	ldr	r2, [r3, #16]
 8003e2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e30:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003e32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e34:	3301      	adds	r3, #1
 8003e36:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003e38:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003e3e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003e46:	e7aa      	b.n	8003d9e <HAL_I2C_Mem_Read+0xc2>
        else if (hi2c->XferSize == 2U)
 8003e48:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	463b      	mov	r3, r7
 8003e50:	4641      	mov	r1, r8
 8003e52:	4620      	mov	r0, r4
 8003e54:	9600      	str	r6, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8003e56:	d118      	bne.n	8003e8a <HAL_I2C_Mem_Read+0x1ae>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e58:	f7ff fb3d 	bl	80034d6 <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d147      	bne.n	8003ef0 <HAL_I2C_Mem_Read+0x214>
 8003e60:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e62:	6823      	ldr	r3, [r4, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e6a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e70:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003e72:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003e74:	3301      	adds	r3, #1
 8003e76:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003e78:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003e7e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	8563      	strh	r3, [r4, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e86:	b662      	cpsie	i
 8003e88:	e7cf      	b.n	8003e2a <HAL_I2C_Mem_Read+0x14e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e8a:	f7ff fb24 	bl	80034d6 <I2C_WaitOnFlagUntilTimeout>
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	d12e      	bne.n	8003ef0 <HAL_I2C_Mem_Read+0x214>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e92:	6822      	ldr	r2, [r4, #0]
 8003e94:	6813      	ldr	r3, [r2, #0]
 8003e96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e9a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e9c:	b672      	cpsid	i
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e9e:	f246 11a8 	movw	r1, #25000	@ 0x61a8
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003ea8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003eaa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003eac:	1c53      	adds	r3, r2, #1
 8003eae:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003eb0:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003eb6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	8563      	strh	r3, [r4, #42]	@ 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003ebe:	f8d9 3000 	ldr.w	r3, [r9]
 8003ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ec6:	2123      	movs	r1, #35	@ 0x23
 8003ec8:	434b      	muls	r3, r1
 8003eca:	9303      	str	r3, [sp, #12]
            count--;
 8003ecc:	9b03      	ldr	r3, [sp, #12]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	9303      	str	r3, [sp, #12]
            if (count == 0U)
 8003ed2:	9b03      	ldr	r3, [sp, #12]
 8003ed4:	b973      	cbnz	r3, 8003ef4 <HAL_I2C_Mem_Read+0x218>
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ed6:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ed8:	6323      	str	r3, [r4, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003eda:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ede:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003ee4:	f042 0220 	orr.w	r2, r2, #32
 8003ee8:	6422      	str	r2, [r4, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003eea:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8003eec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8003ef0:	2501      	movs	r5, #1
 8003ef2:	e705      	b.n	8003d00 <HAL_I2C_Mem_Read+0x24>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	6959      	ldr	r1, [r3, #20]
 8003ef8:	0749      	lsls	r1, r1, #29
 8003efa:	d5e7      	bpl.n	8003ecc <HAL_I2C_Mem_Read+0x1f0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	6819      	ldr	r1, [r3, #0]
 8003efe:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8003f02:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	7053      	strb	r3, [r2, #1]
 8003f08:	e7b3      	b.n	8003e72 <HAL_I2C_Mem_Read+0x196>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f0a:	4632      	mov	r2, r6
 8003f0c:	4639      	mov	r1, r7
 8003f0e:	4620      	mov	r0, r4
 8003f10:	f7ff fc96 	bl	8003840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f14:	2800      	cmp	r0, #0
 8003f16:	d1eb      	bne.n	8003ef0 <HAL_I2C_Mem_Read+0x214>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003f1e:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8003f20:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 8003f22:	6a61      	ldr	r1, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003f24:	3a01      	subs	r2, #1
 8003f26:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003f28:	1c4b      	adds	r3, r1, #1
        hi2c->XferCount--;
 8003f2a:	8562      	strh	r2, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f2c:	6822      	ldr	r2, [r4, #0]
        hi2c->pBuffPtr++;
 8003f2e:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferSize--;
 8003f30:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f32:	6950      	ldr	r0, [r2, #20]
        hi2c->XferSize--;
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f38:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 8003f3a:	8523      	strh	r3, [r4, #40]	@ 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f3c:	f57f af2f 	bpl.w	8003d9e <HAL_I2C_Mem_Read+0xc2>
          if (hi2c->XferSize == 3U)
 8003f40:	2b03      	cmp	r3, #3
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f42:	bf02      	ittt	eq
 8003f44:	6813      	ldreq	r3, [r2, #0]
 8003f46:	f423 6380 	biceq.w	r3, r3, #1024	@ 0x400
 8003f4a:	6013      	streq	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4c:	6913      	ldr	r3, [r2, #16]
 8003f4e:	704b      	strb	r3, [r1, #1]
 8003f50:	e76f      	b.n	8003e32 <HAL_I2C_Mem_Read+0x156>
 8003f52:	bf00      	nop
 8003f54:	00100002 	.word	0x00100002
 8003f58:	ffff0000 	.word	0xffff0000
 8003f5c:	00010004 	.word	0x00010004
 8003f60:	20000000 	.word	0x20000000

08003f64 <HAL_I2C_EV_IRQHandler>:
{
 8003f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f66:	4604      	mov	r4, r0
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f68:	6803      	ldr	r3, [r0, #0]
{
 8003f6a:	b08f      	sub	sp, #60	@ 0x3c
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003f6c:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003f6e:	6ac6      	ldr	r6, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f70:	f890 003e 	ldrb.w	r0, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f74:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f78:	2810      	cmp	r0, #16
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003f7a:	b2c5      	uxtb	r5, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f7c:	b2c9      	uxtb	r1, r1
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003f7e:	d002      	beq.n	8003f86 <HAL_I2C_EV_IRQHandler+0x22>
 8003f80:	2d40      	cmp	r5, #64	@ 0x40
 8003f82:	f040 82dc 	bne.w	800453e <HAL_I2C_EV_IRQHandler+0x5da>
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f86:	699f      	ldr	r7, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f88:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003f8a:	f010 0f01 	tst.w	r0, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_I2C_EV_IRQHandler+0x3c>
 8003f90:	f5b6 0f2a 	cmp.w	r6, #11141120	@ 0xaa0000
 8003f94:	d002      	beq.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 8003f96:	f1b6 4f2a 	cmp.w	r6, #2852126720	@ 0xaa000000
 8003f9a:	d151      	bne.n	8004040 <HAL_I2C_EV_IRQHandler+0xdc>
}
 8003f9c:	b00f      	add	sp, #60	@ 0x3c
 8003f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fa0:	0596      	lsls	r6, r2, #22
 8003fa2:	d54d      	bpl.n	8004040 <HAL_I2C_EV_IRQHandler+0xdc>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003fa4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003fa6:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 8003faa:	d10c      	bne.n	8003fc6 <HAL_I2C_EV_IRQHandler+0x62>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003fac:	2201      	movs	r2, #1
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003fae:	62e2      	str	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fb0:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8003fb4:	2a40      	cmp	r2, #64	@ 0x40
 8003fb6:	d111      	bne.n	8003fdc <HAL_I2C_EV_IRQHandler+0x78>
    if (hi2c->EventCount == 0U)
 8003fb8:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003fba:	b952      	cbnz	r2, 8003fd2 <HAL_I2C_EV_IRQHandler+0x6e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fbc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003fbe:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fc2:	611a      	str	r2, [r3, #16]
 8003fc4:	e7ea      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003fc6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003fc8:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_I2C_EV_IRQHandler+0x4c>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003fce:	2208      	movs	r2, #8
 8003fd0:	e7ed      	b.n	8003fae <HAL_I2C_EV_IRQHandler+0x4a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003fd2:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003fd4:	f042 0201 	orr.w	r2, r2, #1
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	e7f2      	b.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x5e>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fdc:	6922      	ldr	r2, [r4, #16]
 8003fde:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003fe2:	d11a      	bne.n	800401a <HAL_I2C_EV_IRQHandler+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fe4:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003fe8:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fea:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003fec:	d111      	bne.n	8004012 <HAL_I2C_EV_IRQHandler+0xae>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003fee:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003ff2:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003ff4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003ff6:	b10a      	cbz	r2, 8003ffc <HAL_I2C_EV_IRQHandler+0x98>
 8003ff8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003ffa:	b92a      	cbnz	r2, 8004008 <HAL_I2C_EV_IRQHandler+0xa4>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003ffc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003ffe:	2a00      	cmp	r2, #0
 8004000:	d0cc      	beq.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 8004002:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004004:	2a00      	cmp	r2, #0
 8004006:	d0c9      	beq.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800400e:	605a      	str	r2, [r3, #4]
 8004010:	e7c4      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	e7eb      	b.n	8003ff2 <HAL_I2C_EV_IRQHandler+0x8e>
      if (hi2c->EventCount == 0U)
 800401a:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800401c:	b932      	cbnz	r2, 800402c <HAL_I2C_EV_IRQHandler+0xc8>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800401e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004020:	11d2      	asrs	r2, r2, #7
 8004022:	f002 0206 	and.w	r2, r2, #6
 8004026:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 800402a:	e7ca      	b.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x5e>
      else if (hi2c->EventCount == 1U)
 800402c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800402e:	2a01      	cmp	r2, #1
 8004030:	d1b4      	bne.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004032:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004034:	11d2      	asrs	r2, r2, #7
 8004036:	f002 0206 	and.w	r2, r2, #6
 800403a:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 800403e:	e7c0      	b.n	8003fc2 <HAL_I2C_EV_IRQHandler+0x5e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004040:	0706      	lsls	r6, r0, #28
 8004042:	d503      	bpl.n	800404c <HAL_I2C_EV_IRQHandler+0xe8>
 8004044:	0596      	lsls	r6, r2, #22
 8004046:	d501      	bpl.n	800404c <HAL_I2C_EV_IRQHandler+0xe8>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004048:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800404a:	e7e4      	b.n	8004016 <HAL_I2C_EV_IRQHandler+0xb2>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800404c:	0786      	lsls	r6, r0, #30
 800404e:	f140 80f0 	bpl.w	8004232 <HAL_I2C_EV_IRQHandler+0x2ce>
 8004052:	0596      	lsls	r6, r2, #22
 8004054:	f140 80ed 	bpl.w	8004232 <HAL_I2C_EV_IRQHandler+0x2ce>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004058:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800405c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800405e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004060:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004064:	b2c9      	uxtb	r1, r1
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004066:	2822      	cmp	r0, #34	@ 0x22
 8004068:	f040 80db 	bne.w	8004222 <HAL_I2C_EV_IRQHandler+0x2be>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800406c:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 800406e:	b940      	cbnz	r0, 8004082 <HAL_I2C_EV_IRQHandler+0x11e>
 8004070:	2940      	cmp	r1, #64	@ 0x40
 8004072:	d106      	bne.n	8004082 <HAL_I2C_EV_IRQHandler+0x11e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004074:	9000      	str	r0, [sp, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	9200      	str	r2, [sp, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	9b00      	ldr	r3, [sp, #0]
 8004080:	e78c      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004082:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8004084:	b989      	cbnz	r1, 80040aa <HAL_I2C_EV_IRQHandler+0x146>
 8004086:	6920      	ldr	r0, [r4, #16]
 8004088:	f5b0 4f40 	cmp.w	r0, #49152	@ 0xc000
 800408c:	d10d      	bne.n	80040aa <HAL_I2C_EV_IRQHandler+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408e:	9101      	str	r1, [sp, #4]
 8004090:	695a      	ldr	r2, [r3, #20]
 8004092:	9201      	str	r2, [sp, #4]
 8004094:	699a      	ldr	r2, [r3, #24]
 8004096:	9201      	str	r2, [sp, #4]
 8004098:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040a0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80040a2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80040a4:	3301      	adds	r3, #1
      hi2c->EventCount = 0U;
 80040a6:	6523      	str	r3, [r4, #80]	@ 0x50
 80040a8:	e778      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
      if (hi2c->XferCount == 0U)
 80040aa:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80040ac:	b289      	uxth	r1, r1
 80040ae:	b951      	cbnz	r1, 80040c6 <HAL_I2C_EV_IRQHandler+0x162>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b0:	9102      	str	r1, [sp, #8]
 80040b2:	695a      	ldr	r2, [r3, #20]
 80040b4:	9202      	str	r2, [sp, #8]
 80040b6:	699a      	ldr	r2, [r3, #24]
 80040b8:	9202      	str	r2, [sp, #8]
 80040ba:	9a02      	ldr	r2, [sp, #8]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	e019      	b.n	80040fa <HAL_I2C_EV_IRQHandler+0x196>
      else if (hi2c->XferCount == 1U)
 80040c6:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 80040c8:	b289      	uxth	r1, r1
 80040ca:	2901      	cmp	r1, #1
 80040cc:	d149      	bne.n	8004162 <HAL_I2C_EV_IRQHandler+0x1fe>
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80040ce:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80040d2:	d11b      	bne.n	800410c <HAL_I2C_EV_IRQHandler+0x1a8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040da:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 80040e2:	d00c      	beq.n	80040fe <HAL_I2C_EV_IRQHandler+0x19a>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ea:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040ec:	2200      	movs	r2, #0
 80040ee:	9203      	str	r2, [sp, #12]
 80040f0:	695a      	ldr	r2, [r3, #20]
 80040f2:	9203      	str	r2, [sp, #12]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	9303      	str	r3, [sp, #12]
 80040f8:	9b03      	ldr	r3, [sp, #12]
      hi2c->EventCount = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e7d3      	b.n	80040a6 <HAL_I2C_EV_IRQHandler+0x142>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fe:	9204      	str	r2, [sp, #16]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	9204      	str	r2, [sp, #16]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	9204      	str	r2, [sp, #16]
 8004108:	9a04      	ldr	r2, [sp, #16]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800410a:	e7d7      	b.n	80040bc <HAL_I2C_EV_IRQHandler+0x158>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800410c:	2a08      	cmp	r2, #8
 800410e:	d01c      	beq.n	800414a <HAL_I2C_EV_IRQHandler+0x1e6>
 8004110:	2a20      	cmp	r2, #32
 8004112:	d01a      	beq.n	800414a <HAL_I2C_EV_IRQHandler+0x1e6>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004114:	2d12      	cmp	r5, #18
 8004116:	d10d      	bne.n	8004134 <HAL_I2C_EV_IRQHandler+0x1d0>
 8004118:	2a01      	cmp	r2, #1
 800411a:	d116      	bne.n	800414a <HAL_I2C_EV_IRQHandler+0x1e6>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004124:	2200      	movs	r2, #0
 8004126:	9205      	str	r2, [sp, #20]
 8004128:	695a      	ldr	r2, [r3, #20]
 800412a:	9205      	str	r2, [sp, #20]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	9305      	str	r3, [sp, #20]
 8004130:	9b05      	ldr	r3, [sp, #20]
 8004132:	e7e2      	b.n	80040fa <HAL_I2C_EV_IRQHandler+0x196>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004134:	2a10      	cmp	r2, #16
 8004136:	d8f1      	bhi.n	800411c <HAL_I2C_EV_IRQHandler+0x1b8>
 8004138:	4986      	ldr	r1, [pc, #536]	@ (8004354 <HAL_I2C_EV_IRQHandler+0x3f0>)
 800413a:	fa41 f202 	asr.w	r2, r1, r2
 800413e:	07d7      	lsls	r7, r2, #31
 8004140:	d4ec      	bmi.n	800411c <HAL_I2C_EV_IRQHandler+0x1b8>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004148:	e7eb      	b.n	8004122 <HAL_I2C_EV_IRQHandler+0x1be>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004150:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004152:	2200      	movs	r2, #0
 8004154:	9206      	str	r2, [sp, #24]
 8004156:	695a      	ldr	r2, [r3, #20]
 8004158:	9206      	str	r2, [sp, #24]
 800415a:	699a      	ldr	r2, [r3, #24]
 800415c:	9206      	str	r2, [sp, #24]
 800415e:	9a06      	ldr	r2, [sp, #24]
 8004160:	e7ac      	b.n	80040bc <HAL_I2C_EV_IRQHandler+0x158>
      else if (hi2c->XferCount == 2U)
 8004162:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
 8004164:	b289      	uxth	r1, r1
 8004166:	2902      	cmp	r1, #2
 8004168:	d138      	bne.n	80041dc <HAL_I2C_EV_IRQHandler+0x278>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800416a:	2a10      	cmp	r2, #16
 800416c:	d803      	bhi.n	8004176 <HAL_I2C_EV_IRQHandler+0x212>
 800416e:	497a      	ldr	r1, [pc, #488]	@ (8004358 <HAL_I2C_EV_IRQHandler+0x3f4>)
 8004170:	40d1      	lsrs	r1, r2
 8004172:	07ce      	lsls	r6, r1, #31
 8004174:	d418      	bmi.n	80041a8 <HAL_I2C_EV_IRQHandler+0x244>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004176:	6819      	ldr	r1, [r3, #0]
 8004178:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 800417c:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2100      	movs	r1, #0
 8004180:	9107      	str	r1, [sp, #28]
 8004182:	6959      	ldr	r1, [r3, #20]
 8004184:	9107      	str	r1, [sp, #28]
 8004186:	6999      	ldr	r1, [r3, #24]
 8004188:	9107      	str	r1, [sp, #28]
 800418a:	9907      	ldr	r1, [sp, #28]
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800418c:	6819      	ldr	r1, [r3, #0]
 800418e:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8004192:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004194:	6859      	ldr	r1, [r3, #4]
 8004196:	050d      	lsls	r5, r1, #20
 8004198:	d5af      	bpl.n	80040fa <HAL_I2C_EV_IRQHandler+0x196>
 800419a:	2a20      	cmp	r2, #32
 800419c:	d81b      	bhi.n	80041d6 <HAL_I2C_EV_IRQHandler+0x272>
 800419e:	2a07      	cmp	r2, #7
 80041a0:	d80e      	bhi.n	80041c0 <HAL_I2C_EV_IRQHandler+0x25c>
 80041a2:	2a01      	cmp	r2, #1
 80041a4:	d1a9      	bne.n	80040fa <HAL_I2C_EV_IRQHandler+0x196>
 80041a6:	e011      	b.n	80041cc <HAL_I2C_EV_IRQHandler+0x268>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80041ae:	6019      	str	r1, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b0:	2100      	movs	r1, #0
 80041b2:	9108      	str	r1, [sp, #32]
 80041b4:	6959      	ldr	r1, [r3, #20]
 80041b6:	9108      	str	r1, [sp, #32]
 80041b8:	6999      	ldr	r1, [r3, #24]
 80041ba:	9108      	str	r1, [sp, #32]
 80041bc:	9908      	ldr	r1, [sp, #32]
 80041be:	e7e9      	b.n	8004194 <HAL_I2C_EV_IRQHandler+0x230>
 80041c0:	f1a2 0108 	sub.w	r1, r2, #8
 80041c4:	4a65      	ldr	r2, [pc, #404]	@ (800435c <HAL_I2C_EV_IRQHandler+0x3f8>)
 80041c6:	40ca      	lsrs	r2, r1
 80041c8:	07d0      	lsls	r0, r2, #31
 80041ca:	d596      	bpl.n	80040fa <HAL_I2C_EV_IRQHandler+0x196>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041d2:	605a      	str	r2, [r3, #4]
 80041d4:	e791      	b.n	80040fa <HAL_I2C_EV_IRQHandler+0x196>
 80041d6:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80041da:	e7e3      	b.n	80041a4 <HAL_I2C_EV_IRQHandler+0x240>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041dc:	6819      	ldr	r1, [r3, #0]
 80041de:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 80041e2:	6019      	str	r1, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80041e4:	6859      	ldr	r1, [r3, #4]
 80041e6:	0509      	lsls	r1, r1, #20
 80041e8:	d510      	bpl.n	800420c <HAL_I2C_EV_IRQHandler+0x2a8>
 80041ea:	2a20      	cmp	r2, #32
 80041ec:	d816      	bhi.n	800421c <HAL_I2C_EV_IRQHandler+0x2b8>
 80041ee:	2a07      	cmp	r2, #7
 80041f0:	d806      	bhi.n	8004200 <HAL_I2C_EV_IRQHandler+0x29c>
 80041f2:	2a01      	cmp	r2, #1
 80041f4:	d10a      	bne.n	800420c <HAL_I2C_EV_IRQHandler+0x2a8>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041f6:	685a      	ldr	r2, [r3, #4]
 80041f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80041fc:	605a      	str	r2, [r3, #4]
 80041fe:	e005      	b.n	800420c <HAL_I2C_EV_IRQHandler+0x2a8>
 8004200:	f1a2 0108 	sub.w	r1, r2, #8
 8004204:	4a55      	ldr	r2, [pc, #340]	@ (800435c <HAL_I2C_EV_IRQHandler+0x3f8>)
 8004206:	40ca      	lsrs	r2, r1
 8004208:	07d2      	lsls	r2, r2, #31
 800420a:	d4f4      	bmi.n	80041f6 <HAL_I2C_EV_IRQHandler+0x292>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420c:	2200      	movs	r2, #0
 800420e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	9209      	str	r2, [sp, #36]	@ 0x24
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	9309      	str	r3, [sp, #36]	@ 0x24
 8004218:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800421a:	e76e      	b.n	80040fa <HAL_I2C_EV_IRQHandler+0x196>
 800421c:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8004220:	e7e8      	b.n	80041f4 <HAL_I2C_EV_IRQHandler+0x290>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2200      	movs	r2, #0
 8004224:	920a      	str	r2, [sp, #40]	@ 0x28
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	920a      	str	r2, [sp, #40]	@ 0x28
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	930a      	str	r3, [sp, #40]	@ 0x28
 800422e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004230:	e6b4      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004232:	077f      	lsls	r7, r7, #29
 8004234:	f140 8094 	bpl.w	8004360 <HAL_I2C_EV_IRQHandler+0x3fc>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004238:	685e      	ldr	r6, [r3, #4]
 800423a:	0536      	lsls	r6, r6, #20
 800423c:	f53f aeae 	bmi.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004240:	0607      	lsls	r7, r0, #24
 8004242:	f000 0604 	and.w	r6, r0, #4
 8004246:	d53c      	bpl.n	80042c2 <HAL_I2C_EV_IRQHandler+0x35e>
 8004248:	0550      	lsls	r0, r2, #21
 800424a:	d53a      	bpl.n	80042c2 <HAL_I2C_EV_IRQHandler+0x35e>
 800424c:	2e00      	cmp	r6, #0
 800424e:	d13b      	bne.n	80042c8 <HAL_I2C_EV_IRQHandler+0x364>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004250:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004254:	8d25      	ldrh	r5, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004256:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800425a:	b2d2      	uxtb	r2, r2
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800425c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800425e:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004260:	b9b5      	cbnz	r5, 8004290 <HAL_I2C_EV_IRQHandler+0x32c>
 8004262:	2a21      	cmp	r2, #33	@ 0x21
 8004264:	d116      	bne.n	8004294 <HAL_I2C_EV_IRQHandler+0x330>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004266:	2808      	cmp	r0, #8
 8004268:	d056      	beq.n	8004318 <HAL_I2C_EV_IRQHandler+0x3b4>
 800426a:	2820      	cmp	r0, #32
 800426c:	d054      	beq.n	8004318 <HAL_I2C_EV_IRQHandler+0x3b4>
 800426e:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8004272:	d051      	beq.n	8004318 <HAL_I2C_EV_IRQHandler+0x3b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800427a:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800427c:	2311      	movs	r3, #17
 800427e:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004280:	2300      	movs	r3, #0
 8004282:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004286:	2320      	movs	r3, #32
 8004288:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
          hi2c->MasterTxCpltCallback(hi2c);
 800428c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800428e:	e057      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x3dc>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004290:	2a21      	cmp	r2, #33	@ 0x21
 8004292:	d005      	beq.n	80042a0 <HAL_I2C_EV_IRQHandler+0x33c>
 8004294:	2940      	cmp	r1, #64	@ 0x40
 8004296:	f47f ae81 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800429a:	2a22      	cmp	r2, #34	@ 0x22
 800429c:	f47f ae7e 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount == 0U)
 80042a0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80042a2:	b292      	uxth	r2, r2
 80042a4:	b91a      	cbnz	r2, 80042ae <HAL_I2C_EV_IRQHandler+0x34a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042ac:	e6af      	b.n	800400e <HAL_I2C_EV_IRQHandler+0xaa>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042ae:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 80042b2:	2a40      	cmp	r2, #64	@ 0x40
 80042b4:	d116      	bne.n	80042e4 <HAL_I2C_EV_IRQHandler+0x380>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042b6:	4620      	mov	r0, r4
}
 80042b8:	b00f      	add	sp, #60	@ 0x3c
 80042ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80042be:	f7ff b83d 	b.w	800333c <I2C_MemoryTransmit_TXE_BTF>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042c2:	2e00      	cmp	r6, #0
 80042c4:	f43f ae6a 	beq.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 80042c8:	0597      	lsls	r7, r2, #22
 80042ca:	f57f ae67 	bpl.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80042ce:	2921      	cmp	r1, #33	@ 0x21
 80042d0:	d13b      	bne.n	800434a <HAL_I2C_EV_IRQHandler+0x3e6>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80042d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80042d4:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80042d8:	2a21      	cmp	r2, #33	@ 0x21
 80042da:	f47f ae5f 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
    if (hi2c->XferCount != 0U)
 80042de:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80042e0:	b292      	uxth	r2, r2
 80042e2:	b14a      	cbz	r2, 80042f8 <HAL_I2C_EV_IRQHandler+0x394>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80042e6:	f812 1b01 	ldrb.w	r1, [r2], #1
 80042ea:	6119      	str	r1, [r3, #16]
    hi2c->pBuffPtr++;
 80042ec:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80042ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 80042f6:	e651      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80042f8:	2908      	cmp	r1, #8
 80042fa:	d00d      	beq.n	8004318 <HAL_I2C_EV_IRQHandler+0x3b4>
 80042fc:	2920      	cmp	r1, #32
 80042fe:	d00b      	beq.n	8004318 <HAL_I2C_EV_IRQHandler+0x3b4>
 8004300:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8004304:	d008      	beq.n	8004318 <HAL_I2C_EV_IRQHandler+0x3b4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004306:	6859      	ldr	r1, [r3, #4]
 8004308:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 800430c:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800430e:	2311      	movs	r3, #17
 8004310:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004312:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
 8004316:	e7b6      	b.n	8004286 <HAL_I2C_EV_IRQHandler+0x322>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800431e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004326:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004328:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800432a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800432c:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800432e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004332:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004336:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800433a:	2a40      	cmp	r2, #64	@ 0x40
 800433c:	d1a6      	bne.n	800428c <HAL_I2C_EV_IRQHandler+0x328>
          hi2c->MemTxCpltCallback(hi2c);
 800433e:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
      hi2c->SlaveRxCpltCallback(hi2c);
 8004340:	4620      	mov	r0, r4
}
 8004342:	b00f      	add	sp, #60	@ 0x3c
 8004344:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hi2c->SlaveRxCpltCallback(hi2c);
 8004348:	4718      	bx	r3
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800434a:	2d40      	cmp	r5, #64	@ 0x40
 800434c:	f47f ae26 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 8004350:	e7b1      	b.n	80042b6 <HAL_I2C_EV_IRQHandler+0x352>
 8004352:	bf00      	nop
 8004354:	fffeffeb 	.word	0xfffeffeb
 8004358:	00010014 	.word	0x00010014
 800435c:	01000101 	.word	0x01000101
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	050e      	lsls	r6, r1, #20
 8004364:	f53f ae1a 	bmi.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004368:	0645      	lsls	r5, r0, #25
 800436a:	f000 0104 	and.w	r1, r0, #4
 800436e:	d57b      	bpl.n	8004468 <HAL_I2C_EV_IRQHandler+0x504>
 8004370:	0550      	lsls	r0, r2, #21
 8004372:	d579      	bpl.n	8004468 <HAL_I2C_EV_IRQHandler+0x504>
 8004374:	2900      	cmp	r1, #0
 8004376:	d17a      	bne.n	800446e <HAL_I2C_EV_IRQHandler+0x50a>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004378:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800437c:	2a22      	cmp	r2, #34	@ 0x22
 800437e:	f47f ae0d 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
    CurrentXferOptions = hi2c->XferOptions;
 8004382:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 8004384:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004386:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8004388:	2a03      	cmp	r2, #3
 800438a:	d914      	bls.n	80043b6 <HAL_I2C_EV_IRQHandler+0x452>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004390:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004392:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004394:	3301      	adds	r3, #1
 8004396:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8004398:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800439a:	3b01      	subs	r3, #1
 800439c:	b29b      	uxth	r3, r3
 800439e:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 80043a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b03      	cmp	r3, #3
 80043a6:	f47f adf9 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80043aa:	6822      	ldr	r2, [r4, #0]
 80043ac:	6853      	ldr	r3, [r2, #4]
 80043ae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043b2:	6053      	str	r3, [r2, #4]
 80043b4:	e5f2      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80043b6:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80043b8:	2d02      	cmp	r5, #2
 80043ba:	f43f af74 	beq.w	80042a6 <HAL_I2C_EV_IRQHandler+0x342>
 80043be:	2a01      	cmp	r2, #1
 80043c0:	f63f af71 	bhi.w	80042a6 <HAL_I2C_EV_IRQHandler+0x342>
  __IO uint32_t count = 0U;
 80043c4:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80043c6:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 80043ca:	4a76      	ldr	r2, [pc, #472]	@ (80045a4 <HAL_I2C_EV_IRQHandler+0x640>)
 80043cc:	6812      	ldr	r2, [r2, #0]
 80043ce:	fbb2 f2f1 	udiv	r2, r2, r1
 80043d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80043d6:	920b      	str	r2, [sp, #44]	@ 0x2c
    count--;
 80043d8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80043da:	3a01      	subs	r2, #1
 80043dc:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 80043de:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80043e0:	b9c1      	cbnz	r1, 8004414 <HAL_I2C_EV_IRQHandler+0x4b0>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80043e4:	f042 0220 	orr.w	r2, r2, #32
 80043e8:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80043f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043f2:	691a      	ldr	r2, [r3, #16]
 80043f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80043f6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80043fa:	3301      	adds	r3, #1
 80043fc:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80043fe:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004400:	3b01      	subs	r3, #1
 8004402:	b29b      	uxth	r3, r3
 8004404:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004406:	2320      	movs	r3, #32
 8004408:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->ErrorCallback(hi2c);
 800440c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        hi2c->ErrorCallback(hi2c);
 8004412:	e795      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x3dc>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 800441a:	d1dd      	bne.n	80043d8 <HAL_I2C_EV_IRQHandler+0x474>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8004422:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004424:	6859      	ldr	r1, [r3, #4]
 8004426:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 800442a:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800442c:	6919      	ldr	r1, [r3, #16]
 800442e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004430:	7019      	strb	r1, [r3, #0]
        hi2c->pBuffPtr++;
 8004432:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004434:	3301      	adds	r3, #1
 8004436:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8004438:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800443a:	3b01      	subs	r3, #1
 800443c:	b29b      	uxth	r3, r3
 800443e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004440:	2320      	movs	r3, #32
 8004442:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004446:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800444a:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800444e:	2b40      	cmp	r3, #64	@ 0x40
 8004450:	d102      	bne.n	8004458 <HAL_I2C_EV_IRQHandler+0x4f4>
          hi2c->PreviousState = I2C_STATE_NONE;
 8004452:	6322      	str	r2, [r4, #48]	@ 0x30
      hi2c->MemRxCpltCallback(hi2c);
 8004454:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8004456:	e773      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x3dc>
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004458:	2808      	cmp	r0, #8
 800445a:	d001      	beq.n	8004460 <HAL_I2C_EV_IRQHandler+0x4fc>
 800445c:	2820      	cmp	r0, #32
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800445e:	d16c      	bne.n	800453a <HAL_I2C_EV_IRQHandler+0x5d6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004460:	2300      	movs	r3, #0
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004462:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->MasterRxCpltCallback(hi2c);
 8004464:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004466:	e76b      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x3dc>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004468:	2900      	cmp	r1, #0
 800446a:	f43f ad97 	beq.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 800446e:	0592      	lsls	r2, r2, #22
 8004470:	f57f ad94 	bpl.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004474:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 8004476:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004478:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (hi2c->XferCount == 4U)
 800447a:	b280      	uxth	r0, r0
 800447c:	2804      	cmp	r0, #4
 800447e:	d109      	bne.n	8004494 <HAL_I2C_EV_IRQHandler+0x530>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004486:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800448c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800448e:	3301      	adds	r3, #1
 8004490:	6263      	str	r3, [r4, #36]	@ 0x24
 8004492:	e72c      	b.n	80042ee <HAL_I2C_EV_IRQHandler+0x38a>
  else if (hi2c->XferCount == 3U)
 8004494:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8004496:	b280      	uxth	r0, r0
 8004498:	2803      	cmp	r0, #3
 800449a:	d10c      	bne.n	80044b6 <HAL_I2C_EV_IRQHandler+0x552>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800449c:	6858      	ldr	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800449e:	2a04      	cmp	r2, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044a0:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
 80044a4:	6058      	str	r0, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044a6:	d0ef      	beq.n	8004488 <HAL_I2C_EV_IRQHandler+0x524>
 80044a8:	2a02      	cmp	r2, #2
 80044aa:	d0ed      	beq.n	8004488 <HAL_I2C_EV_IRQHandler+0x524>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b4:	e7e8      	b.n	8004488 <HAL_I2C_EV_IRQHandler+0x524>
  else if (hi2c->XferCount == 2U)
 80044b6:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80044b8:	b280      	uxth	r0, r0
 80044ba:	2802      	cmp	r0, #2
 80044bc:	d1e4      	bne.n	8004488 <HAL_I2C_EV_IRQHandler+0x524>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80044be:	2a04      	cmp	r2, #4
 80044c0:	d033      	beq.n	800452a <HAL_I2C_EV_IRQHandler+0x5c6>
 80044c2:	d807      	bhi.n	80044d4 <HAL_I2C_EV_IRQHandler+0x570>
 80044c4:	2a01      	cmp	r2, #1
 80044c6:	d007      	beq.n	80044d8 <HAL_I2C_EV_IRQHandler+0x574>
 80044c8:	2a02      	cmp	r2, #2
 80044ca:	d02e      	beq.n	800452a <HAL_I2C_EV_IRQHandler+0x5c6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044cc:	6818      	ldr	r0, [r3, #0]
 80044ce:	f440 7000 	orr.w	r0, r0, #512	@ 0x200
 80044d2:	e004      	b.n	80044de <HAL_I2C_EV_IRQHandler+0x57a>
 80044d4:	2a10      	cmp	r2, #16
 80044d6:	d1f9      	bne.n	80044cc <HAL_I2C_EV_IRQHandler+0x568>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	6018      	str	r0, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 80044e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80044e6:	1c4b      	adds	r3, r1, #1
 80044e8:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80044ea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80044ec:	3b01      	subs	r3, #1
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	6823      	ldr	r3, [r4, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	704b      	strb	r3, [r1, #1]
    hi2c->pBuffPtr++;
 80044f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80044fa:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 80044fc:	3301      	adds	r3, #1
 80044fe:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004500:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004502:	3b01      	subs	r3, #1
 8004504:	b29b      	uxth	r3, r3
 8004506:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004508:	684b      	ldr	r3, [r1, #4]
 800450a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800450e:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004510:	2320      	movs	r3, #32
 8004512:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004516:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 800451a:	2b40      	cmp	r3, #64	@ 0x40
 800451c:	f04f 0300 	mov.w	r3, #0
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004524:	d105      	bne.n	8004532 <HAL_I2C_EV_IRQHandler+0x5ce>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004526:	6323      	str	r3, [r4, #48]	@ 0x30
 8004528:	e794      	b.n	8004454 <HAL_I2C_EV_IRQHandler+0x4f0>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
 8004530:	e7d5      	b.n	80044de <HAL_I2C_EV_IRQHandler+0x57a>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004532:	2a08      	cmp	r2, #8
 8004534:	d094      	beq.n	8004460 <HAL_I2C_EV_IRQHandler+0x4fc>
 8004536:	2a20      	cmp	r2, #32
 8004538:	e791      	b.n	800445e <HAL_I2C_EV_IRQHandler+0x4fa>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800453a:	2312      	movs	r3, #18
 800453c:	e791      	b.n	8004462 <HAL_I2C_EV_IRQHandler+0x4fe>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800453e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8004540:	b318      	cbz	r0, 800458a <HAL_I2C_EV_IRQHandler+0x626>
  uint32_t sr2itflags               = 0U;
 8004542:	2500      	movs	r5, #0
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004544:	6958      	ldr	r0, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004546:	0787      	lsls	r7, r0, #30
 8004548:	d52e      	bpl.n	80045a8 <HAL_I2C_EV_IRQHandler+0x644>
 800454a:	0596      	lsls	r6, r2, #22
 800454c:	d52c      	bpl.n	80045a8 <HAL_I2C_EV_IRQHandler+0x644>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800454e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004550:	b102      	cbz	r2, 8004554 <HAL_I2C_EV_IRQHandler+0x5f0>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004552:	699d      	ldr	r5, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004554:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8004558:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 800455c:	2a28      	cmp	r2, #40	@ 0x28
 800455e:	d117      	bne.n	8004590 <HAL_I2C_EV_IRQHandler+0x62c>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004560:	685a      	ldr	r2, [r3, #4]
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004562:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004568:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2c);
 800456a:	2300      	movs	r3, #0
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800456c:	062f      	lsls	r7, r5, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800456e:	f085 0104 	eor.w	r1, r5, #4
    __HAL_UNLOCK(hi2c);
 8004572:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004576:	bf54      	ite	pl
 8004578:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800457a:	8b22      	ldrhmi	r2, [r4, #24]
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800457c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800457e:	f3c1 0180 	ubfx	r1, r1, #2, #1
}
 8004582:	b00f      	add	sp, #60	@ 0x3c
 8004584:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004588:	4718      	bx	r3
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800458a:	699d      	ldr	r5, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800458c:	6958      	ldr	r0, [r3, #20]
 800458e:	e7da      	b.n	8004546 <HAL_I2C_EV_IRQHandler+0x5e2>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004590:	2200      	movs	r2, #0
 8004592:	920c      	str	r2, [sp, #48]	@ 0x30
 8004594:	6959      	ldr	r1, [r3, #20]
 8004596:	910c      	str	r1, [sp, #48]	@ 0x30
 8004598:	699b      	ldr	r3, [r3, #24]
    __HAL_UNLOCK(hi2c);
 800459a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459e:	930c      	str	r3, [sp, #48]	@ 0x30
 80045a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80045a2:	e4fb      	b.n	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 80045a4:	20000000 	.word	0x20000000
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a8:	06c6      	lsls	r6, r0, #27
 80045aa:	f140 80ad 	bpl.w	8004708 <HAL_I2C_EV_IRQHandler+0x7a4>
 80045ae:	0595      	lsls	r5, r2, #22
 80045b0:	f140 80aa 	bpl.w	8004708 <HAL_I2C_EV_IRQHandler+0x7a4>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045b4:	f894 503d 	ldrb.w	r5, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045b8:	685a      	ldr	r2, [r3, #4]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045ba:	b2ed      	uxtb	r5, r5
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80045bc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80045c0:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80045c2:	2200      	movs	r2, #0
 80045c4:	920d      	str	r2, [sp, #52]	@ 0x34
 80045c6:	695a      	ldr	r2, [r3, #20]
 80045c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	f042 0201 	orr.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
 80045d2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045da:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	0510      	lsls	r0, r2, #20
 80045e0:	d520      	bpl.n	8004624 <HAL_I2C_EV_IRQHandler+0x6c0>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045e2:	f005 02f7 	and.w	r2, r5, #247	@ 0xf7
 80045e6:	2a22      	cmp	r2, #34	@ 0x22
 80045e8:	d14a      	bne.n	8004680 <HAL_I2C_EV_IRQHandler+0x71c>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80045ea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80045ec:	6802      	ldr	r2, [r0, #0]
 80045ee:	6852      	ldr	r2, [r2, #4]
 80045f0:	b292      	uxth	r2, r2
 80045f2:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 80045f4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80045f6:	b292      	uxth	r2, r2
 80045f8:	b11a      	cbz	r2, 8004602 <HAL_I2C_EV_IRQHandler+0x69e>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045fa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80045fc:	f042 0204 	orr.w	r2, r2, #4
 8004600:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004608:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800460a:	f7fe fdb9 	bl	8003180 <HAL_DMA_GetState>
 800460e:	2801      	cmp	r0, #1
 8004610:	d008      	beq.n	8004624 <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004612:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004614:	4b76      	ldr	r3, [pc, #472]	@ (80047f0 <HAL_I2C_EV_IRQHandler+0x88c>)
 8004616:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004618:	f7fe fd6c 	bl	80030f4 <HAL_DMA_Abort_IT>
 800461c:	b110      	cbz	r0, 8004624 <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800461e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004620:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8004622:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8004624:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004626:	b29b      	uxth	r3, r3
 8004628:	b313      	cbz	r3, 8004670 <HAL_I2C_EV_IRQHandler+0x70c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	695a      	ldr	r2, [r3, #20]
 800462e:	0751      	lsls	r1, r2, #29
 8004630:	d509      	bpl.n	8004646 <HAL_I2C_EV_IRQHandler+0x6e2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004632:	691a      	ldr	r2, [r3, #16]
 8004634:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004636:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004638:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800463a:	3301      	adds	r3, #1
 800463c:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800463e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004640:	3b01      	subs	r3, #1
 8004642:	b29b      	uxth	r3, r3
 8004644:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004646:	6823      	ldr	r3, [r4, #0]
 8004648:	695a      	ldr	r2, [r3, #20]
 800464a:	0652      	lsls	r2, r2, #25
 800464c:	d509      	bpl.n	8004662 <HAL_I2C_EV_IRQHandler+0x6fe>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800464e:	691a      	ldr	r2, [r3, #16]
 8004650:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004652:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004654:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004656:	3301      	adds	r3, #1
 8004658:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800465a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800465c:	3b01      	subs	r3, #1
 800465e:	b29b      	uxth	r3, r3
 8004660:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004662:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	b11b      	cbz	r3, 8004670 <HAL_I2C_EV_IRQHandler+0x70c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004668:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800466a:	f043 0304 	orr.w	r3, r3, #4
 800466e:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004670:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004672:	b313      	cbz	r3, 80046ba <HAL_I2C_EV_IRQHandler+0x756>
    I2C_ITError(hi2c);
 8004674:	4620      	mov	r0, r4
}
 8004676:	b00f      	add	sp, #60	@ 0x3c
 8004678:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 800467c:	f7ff b914 	b.w	80038a8 <I2C_ITError>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004680:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8004682:	6802      	ldr	r2, [r0, #0]
 8004684:	6852      	ldr	r2, [r2, #4]
 8004686:	b292      	uxth	r2, r2
 8004688:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 800468a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800468c:	b292      	uxth	r2, r2
 800468e:	b11a      	cbz	r2, 8004698 <HAL_I2C_EV_IRQHandler+0x734>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004690:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004692:	f042 0204 	orr.w	r2, r2, #4
 8004696:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800469e:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046a0:	f7fe fd6e 	bl	8003180 <HAL_DMA_GetState>
 80046a4:	2801      	cmp	r0, #1
 80046a6:	d0bd      	beq.n	8004624 <HAL_I2C_EV_IRQHandler+0x6c0>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046a8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80046aa:	4b51      	ldr	r3, [pc, #324]	@ (80047f0 <HAL_I2C_EV_IRQHandler+0x88c>)
 80046ac:	6343      	str	r3, [r0, #52]	@ 0x34
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046ae:	f7fe fd21 	bl	80030f4 <HAL_DMA_Abort_IT>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	d0b6      	beq.n	8004624 <HAL_I2C_EV_IRQHandler+0x6c0>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046b6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80046b8:	e7b2      	b.n	8004620 <HAL_I2C_EV_IRQHandler+0x6bc>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80046ba:	2d2a      	cmp	r5, #42	@ 0x2a
 80046bc:	d106      	bne.n	80046cc <HAL_I2C_EV_IRQHandler+0x768>
      hi2c->PreviousState = I2C_STATE_NONE;
 80046be:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046c0:	2328      	movs	r3, #40	@ 0x28
      hi2c->SlaveRxCpltCallback(hi2c);
 80046c2:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046c4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      hi2c->SlaveRxCpltCallback(hi2c);
 80046c8:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80046ca:	4798      	blx	r3
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80046cc:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80046d0:	2b28      	cmp	r3, #40	@ 0x28
 80046d2:	d10a      	bne.n	80046ea <HAL_I2C_EV_IRQHandler+0x786>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046d4:	4b47      	ldr	r3, [pc, #284]	@ (80047f4 <HAL_I2C_EV_IRQHandler+0x890>)
      hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	2220      	movs	r2, #32
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80046da:	2300      	movs	r3, #0
 80046dc:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80046de:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ListenCpltCallback(hi2c);
 80046e6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80046e8:	e62a      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x3dc>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80046ea:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80046ec:	2b22      	cmp	r3, #34	@ 0x22
 80046ee:	d002      	beq.n	80046f6 <HAL_I2C_EV_IRQHandler+0x792>
 80046f0:	2d22      	cmp	r5, #34	@ 0x22
 80046f2:	f47f ac53 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
        hi2c->PreviousState = I2C_STATE_NONE;
 80046f6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80046f8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80046fa:	6323      	str	r3, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046fc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->SlaveRxCpltCallback(hi2c);
 8004704:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8004706:	e61b      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x3dc>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004708:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 800470c:	2921      	cmp	r1, #33	@ 0x21
 800470e:	f000 0504 	and.w	r5, r0, #4
 8004712:	d133      	bne.n	800477c <HAL_I2C_EV_IRQHandler+0x818>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004714:	0607      	lsls	r7, r0, #24
 8004716:	d525      	bpl.n	8004764 <HAL_I2C_EV_IRQHandler+0x800>
 8004718:	0556      	lsls	r6, r2, #21
 800471a:	d523      	bpl.n	8004764 <HAL_I2C_EV_IRQHandler+0x800>
 800471c:	bb2d      	cbnz	r5, 800476a <HAL_I2C_EV_IRQHandler+0x806>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800471e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 8004722:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004724:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8004726:	b292      	uxth	r2, r2
 8004728:	2a00      	cmp	r2, #0
 800472a:	f43f ac37 	beq.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800472e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004730:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004734:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8004736:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8004738:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800473a:	3a01      	subs	r2, #1
 800473c:	b292      	uxth	r2, r2
 800473e:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004740:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004742:	b292      	uxth	r2, r2
 8004744:	2a00      	cmp	r2, #0
 8004746:	f47f ac29 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 800474a:	2829      	cmp	r0, #41	@ 0x29
 800474c:	f47f ac26 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004756:	605a      	str	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004758:	2328      	movs	r3, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800475a:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800475c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      hi2c->SlaveTxCpltCallback(hi2c);
 8004760:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004762:	e5ed      	b.n	8004340 <HAL_I2C_EV_IRQHandler+0x3dc>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004764:	2d00      	cmp	r5, #0
 8004766:	f43f ac19 	beq.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 800476a:	0595      	lsls	r5, r2, #22
 800476c:	f57f ac16 	bpl.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 8004770:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8004772:	b292      	uxth	r2, r2
 8004774:	2a00      	cmp	r2, #0
 8004776:	f43f ac11 	beq.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 800477a:	e5b3      	b.n	80042e4 <HAL_I2C_EV_IRQHandler+0x380>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800477c:	0640      	lsls	r0, r0, #25
 800477e:	d527      	bpl.n	80047d0 <HAL_I2C_EV_IRQHandler+0x86c>
 8004780:	0551      	lsls	r1, r2, #21
 8004782:	d525      	bpl.n	80047d0 <HAL_I2C_EV_IRQHandler+0x86c>
 8004784:	bb3d      	cbnz	r5, 80047d6 <HAL_I2C_EV_IRQHandler+0x872>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004786:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 800478a:	8d61      	ldrh	r1, [r4, #42]	@ 0x2a
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800478c:	b2d2      	uxtb	r2, r2
  if (hi2c->XferCount != 0U)
 800478e:	b289      	uxth	r1, r1
 8004790:	2900      	cmp	r1, #0
 8004792:	f43f ac03 	beq.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004796:	6919      	ldr	r1, [r3, #16]
 8004798:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800479a:	7019      	strb	r1, [r3, #0]
    hi2c->pBuffPtr++;
 800479c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800479e:	3301      	adds	r3, #1
 80047a0:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80047a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f47f abf4 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 80047b4:	2a2a      	cmp	r2, #42	@ 0x2a
 80047b6:	f47f abf1 	bne.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047ba:	6822      	ldr	r2, [r4, #0]
 80047bc:	6853      	ldr	r3, [r2, #4]
 80047be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047c2:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047c4:	2322      	movs	r3, #34	@ 0x22
 80047c6:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047c8:	2328      	movs	r3, #40	@ 0x28
 80047ca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
 80047ce:	e799      	b.n	8004704 <HAL_I2C_EV_IRQHandler+0x7a0>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d0:	2d00      	cmp	r5, #0
 80047d2:	f43f abe3 	beq.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
 80047d6:	0592      	lsls	r2, r2, #22
 80047d8:	f57f abe0 	bpl.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
  if (hi2c->XferCount != 0U)
 80047dc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80047de:	b292      	uxth	r2, r2
 80047e0:	2a00      	cmp	r2, #0
 80047e2:	f43f abdb 	beq.w	8003f9c <HAL_I2C_EV_IRQHandler+0x38>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047e6:	691a      	ldr	r2, [r3, #16]
 80047e8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e64e      	b.n	800448c <HAL_I2C_EV_IRQHandler+0x528>
 80047ee:	bf00      	nop
 80047f0:	080033e9 	.word	0x080033e9
 80047f4:	ffff0000 	.word	0xffff0000

080047f8 <HAL_I2C_ER_IRQHandler>:
{
 80047f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80047fa:	6803      	ldr	r3, [r0, #0]
{
 80047fc:	4604      	mov	r4, r0
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80047fe:	695f      	ldr	r7, [r3, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004800:	685e      	ldr	r6, [r3, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004802:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004806:	f417 7580 	ands.w	r5, r7, #256	@ 0x100
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800480a:	b2d2      	uxtb	r2, r2
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800480c:	d00a      	beq.n	8004824 <HAL_I2C_ER_IRQHandler+0x2c>
 800480e:	f416 7580 	ands.w	r5, r6, #256	@ 0x100
 8004812:	d007      	beq.n	8004824 <HAL_I2C_ER_IRQHandler+0x2c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004814:	f46f 7180 	mvn.w	r1, #256	@ 0x100
    error |= HAL_I2C_ERROR_BERR;
 8004818:	2501      	movs	r5, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800481a:	6159      	str	r1, [r3, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800481c:	6819      	ldr	r1, [r3, #0]
 800481e:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004822:	6019      	str	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004824:	05b8      	lsls	r0, r7, #22
 8004826:	d506      	bpl.n	8004836 <HAL_I2C_ER_IRQHandler+0x3e>
 8004828:	05f1      	lsls	r1, r6, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800482a:	bf42      	ittt	mi
 800482c:	f46f 7100 	mvnmi.w	r1, #512	@ 0x200
    error |= HAL_I2C_ERROR_ARLO;
 8004830:	f045 0502 	orrmi.w	r5, r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004834:	6159      	strmi	r1, [r3, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004836:	0578      	lsls	r0, r7, #21
 8004838:	d536      	bpl.n	80048a8 <HAL_I2C_ER_IRQHandler+0xb0>
 800483a:	05f1      	lsls	r1, r6, #23
 800483c:	d534      	bpl.n	80048a8 <HAL_I2C_ER_IRQHandler+0xb0>
    tmp2 = hi2c->XferCount;
 800483e:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
    tmp3 = hi2c->State;
 8004840:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004844:	2a20      	cmp	r2, #32
    tmp4 = hi2c->PreviousState;
 8004846:	f8d4 c030 	ldr.w	ip, [r4, #48]	@ 0x30
    tmp2 = hi2c->XferCount;
 800484a:	b280      	uxth	r0, r0
    tmp3 = hi2c->State;
 800484c:	b2c9      	uxtb	r1, r1
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800484e:	d15d      	bne.n	800490c <HAL_I2C_ER_IRQHandler+0x114>
 8004850:	2800      	cmp	r0, #0
 8004852:	d15b      	bne.n	800490c <HAL_I2C_ER_IRQHandler+0x114>
 8004854:	f001 00f7 	and.w	r0, r1, #247	@ 0xf7
 8004858:	2821      	cmp	r0, #33	@ 0x21
 800485a:	d004      	beq.n	8004866 <HAL_I2C_ER_IRQHandler+0x6e>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800485c:	2928      	cmp	r1, #40	@ 0x28
 800485e:	d155      	bne.n	800490c <HAL_I2C_ER_IRQHandler+0x114>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004860:	f1bc 0f21 	cmp.w	ip, #33	@ 0x21
 8004864:	d152      	bne.n	800490c <HAL_I2C_ER_IRQHandler+0x114>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004866:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800486a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800486c:	b2d2      	uxtb	r2, r2
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800486e:	2908      	cmp	r1, #8
 8004870:	d001      	beq.n	8004876 <HAL_I2C_ER_IRQHandler+0x7e>
 8004872:	2920      	cmp	r1, #32
 8004874:	d12a      	bne.n	80048cc <HAL_I2C_ER_IRQHandler+0xd4>
 8004876:	2a28      	cmp	r2, #40	@ 0x28
 8004878:	d128      	bne.n	80048cc <HAL_I2C_ER_IRQHandler+0xd4>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800487a:	4a2d      	ldr	r2, [pc, #180]	@ (8004930 <HAL_I2C_ER_IRQHandler+0x138>)
 800487c:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004884:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004886:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800488a:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004892:	601a      	str	r2, [r3, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8004894:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8004896:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8004898:	6323      	str	r3, [r4, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800489a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800489e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ListenCpltCallback(hi2c);
 80048a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
    hi2c->SlaveTxCpltCallback(hi2c);
 80048a4:	4620      	mov	r0, r4
 80048a6:	4798      	blx	r3
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048a8:	053a      	lsls	r2, r7, #20
 80048aa:	d53d      	bpl.n	8004928 <HAL_I2C_ER_IRQHandler+0x130>
 80048ac:	05f3      	lsls	r3, r6, #23
 80048ae:	d53b      	bpl.n	8004928 <HAL_I2C_ER_IRQHandler+0x130>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048b0:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 80048b4:	6823      	ldr	r3, [r4, #0]
    error |= HAL_I2C_ERROR_OVR;
 80048b6:	f045 0508 	orr.w	r5, r5, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048ba:	615a      	str	r2, [r3, #20]
    hi2c->ErrorCode |= error;
 80048bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
    I2C_ITError(hi2c);
 80048be:	4620      	mov	r0, r4
    hi2c->ErrorCode |= error;
 80048c0:	432b      	orrs	r3, r5
 80048c2:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80048c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80048c8:	f7fe bfee 	b.w	80038a8 <I2C_ITError>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80048cc:	2a21      	cmp	r2, #33	@ 0x21
 80048ce:	d119      	bne.n	8004904 <HAL_I2C_ER_IRQHandler+0x10c>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048d0:	4917      	ldr	r1, [pc, #92]	@ (8004930 <HAL_I2C_ER_IRQHandler+0x138>)
 80048d2:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048d4:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048d6:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80048d8:	2220      	movs	r2, #32
 80048da:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048de:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80048e8:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80048ee:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80048f6:	601a      	str	r2, [r3, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	0610      	lsls	r0, r2, #24
    hi2c->Instance->DR = 0x00U;
 80048fc:	bf48      	it	mi
 80048fe:	6119      	strmi	r1, [r3, #16]
    hi2c->SlaveTxCpltCallback(hi2c);
 8004900:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8004902:	e7cf      	b.n	80048a4 <HAL_I2C_ER_IRQHandler+0xac>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004904:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004908:	615a      	str	r2, [r3, #20]
 800490a:	e7cd      	b.n	80048a8 <HAL_I2C_ER_IRQHandler+0xb0>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800490c:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004910:	2a10      	cmp	r2, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004912:	6159      	str	r1, [r3, #20]
      error |= HAL_I2C_ERROR_AF;
 8004914:	f045 0504 	orr.w	r5, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004918:	d001      	beq.n	800491e <HAL_I2C_ER_IRQHandler+0x126>
 800491a:	2a40      	cmp	r2, #64	@ 0x40
 800491c:	d1c4      	bne.n	80048a8 <HAL_I2C_ER_IRQHandler+0xb0>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004924:	601a      	str	r2, [r3, #0]
 8004926:	e7bf      	b.n	80048a8 <HAL_I2C_ER_IRQHandler+0xb0>
  if (error != HAL_I2C_ERROR_NONE)
 8004928:	2d00      	cmp	r5, #0
 800492a:	d1c7      	bne.n	80048bc <HAL_I2C_ER_IRQHandler+0xc4>
}
 800492c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800492e:	bf00      	nop
 8004930:	ffff0000 	.word	0xffff0000

08004934 <HAL_PCD_ISOINIncompleteCallback>:
  * @brief  Incomplete ISO IN callback.
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval None
  */
__weak void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 8004934:	4770      	bx	lr

08004936 <HAL_PCD_ISOOUTIncompleteCallback>:
__weak void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
 8004936:	4770      	bx	lr

08004938 <HAL_PCD_ResumeCallback>:
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
 8004938:	4770      	bx	lr

0800493a <HAL_PCD_ResetCallback>:
__weak void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
 800493a:	4770      	bx	lr

0800493c <HAL_PCD_SuspendCallback>:
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
 800493c:	4770      	bx	lr

0800493e <HAL_PCD_ConnectCallback>:
/**
  * @brief  Connection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
 800493e:	4770      	bx	lr

08004940 <HAL_PCD_DisconnectCallback>:
/**
  * @brief  Disconnection event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
 8004940:	4770      	bx	lr

08004942 <HAL_PCD_SetupStageCallback>:
__weak void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
 8004942:	4770      	bx	lr

08004944 <HAL_PCD_SOFCallback>:
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
 8004944:	4770      	bx	lr
	...

08004948 <HAL_PCD_Init>:
{
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hpcd == NULL)
 800494a:	4604      	mov	r4, r0
 800494c:	2800      	cmp	r0, #0
 800494e:	d045      	beq.n	80049dc <HAL_PCD_Init+0x94>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004950:	f890 3291 	ldrb.w	r3, [r0, #657]	@ 0x291
 8004954:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004958:	bb63      	cbnz	r3, 80049b4 <HAL_PCD_Init+0x6c>
    hpcd->SOFCallback = HAL_PCD_SOFCallback;
 800495a:	4b42      	ldr	r3, [pc, #264]	@ (8004a64 <HAL_PCD_Init+0x11c>)
    hpcd->Lock = HAL_UNLOCKED;
 800495c:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
    hpcd->SOFCallback = HAL_PCD_SOFCallback;
 8004960:	f8c0 32d8 	str.w	r3, [r0, #728]	@ 0x2d8
    hpcd->SetupStageCallback = HAL_PCD_SetupStageCallback;
 8004964:	4b40      	ldr	r3, [pc, #256]	@ (8004a68 <HAL_PCD_Init+0x120>)
 8004966:	f8c0 32dc 	str.w	r3, [r0, #732]	@ 0x2dc
    hpcd->ResetCallback = HAL_PCD_ResetCallback;
 800496a:	4b40      	ldr	r3, [pc, #256]	@ (8004a6c <HAL_PCD_Init+0x124>)
 800496c:	f8c0 32e0 	str.w	r3, [r0, #736]	@ 0x2e0
    hpcd->SuspendCallback = HAL_PCD_SuspendCallback;
 8004970:	4b3f      	ldr	r3, [pc, #252]	@ (8004a70 <HAL_PCD_Init+0x128>)
 8004972:	f8c0 32e4 	str.w	r3, [r0, #740]	@ 0x2e4
    hpcd->ResumeCallback = HAL_PCD_ResumeCallback;
 8004976:	4b3f      	ldr	r3, [pc, #252]	@ (8004a74 <HAL_PCD_Init+0x12c>)
 8004978:	f8c0 32e8 	str.w	r3, [r0, #744]	@ 0x2e8
    hpcd->ConnectCallback = HAL_PCD_ConnectCallback;
 800497c:	4b3e      	ldr	r3, [pc, #248]	@ (8004a78 <HAL_PCD_Init+0x130>)
 800497e:	f8c0 32ec 	str.w	r3, [r0, #748]	@ 0x2ec
    hpcd->DisconnectCallback = HAL_PCD_DisconnectCallback;
 8004982:	4b3e      	ldr	r3, [pc, #248]	@ (8004a7c <HAL_PCD_Init+0x134>)
 8004984:	f8c0 32f0 	str.w	r3, [r0, #752]	@ 0x2f0
    hpcd->DataOutStageCallback = HAL_PCD_DataOutStageCallback;
 8004988:	4b3d      	ldr	r3, [pc, #244]	@ (8004a80 <HAL_PCD_Init+0x138>)
 800498a:	f8c0 32f4 	str.w	r3, [r0, #756]	@ 0x2f4
    hpcd->DataInStageCallback = HAL_PCD_DataInStageCallback;
 800498e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a84 <HAL_PCD_Init+0x13c>)
 8004990:	f8c0 32f8 	str.w	r3, [r0, #760]	@ 0x2f8
    hpcd->ISOOUTIncompleteCallback = HAL_PCD_ISOOUTIncompleteCallback;
 8004994:	4b3c      	ldr	r3, [pc, #240]	@ (8004a88 <HAL_PCD_Init+0x140>)
 8004996:	f8c0 32fc 	str.w	r3, [r0, #764]	@ 0x2fc
    hpcd->ISOINIncompleteCallback = HAL_PCD_ISOINIncompleteCallback;
 800499a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a8c <HAL_PCD_Init+0x144>)
 800499c:	f8c0 3300 	str.w	r3, [r0, #768]	@ 0x300
    if (hpcd->MspInitCallback == NULL)
 80049a0:	f8d0 3304 	ldr.w	r3, [r0, #772]	@ 0x304
 80049a4:	b913      	cbnz	r3, 80049ac <HAL_PCD_Init+0x64>
      hpcd->MspInitCallback = HAL_PCD_MspInit;
 80049a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004a90 <HAL_PCD_Init+0x148>)
 80049a8:	f8c0 3304 	str.w	r3, [r0, #772]	@ 0x304
    hpcd->MspInitCallback(hpcd);
 80049ac:	4620      	mov	r0, r4
 80049ae:	f8d4 3304 	ldr.w	r3, [r4, #772]	@ 0x304
 80049b2:	4798      	blx	r3
  hpcd->State = HAL_PCD_STATE_BUSY;
 80049b4:	2303      	movs	r3, #3
 80049b6:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  hpcd->Init.dma_enable = 0U;
 80049ba:	2300      	movs	r3, #0
  __HAL_PCD_DISABLE(hpcd);
 80049bc:	4625      	mov	r5, r4
  hpcd->Init.dma_enable = 0U;
 80049be:	7163      	strb	r3, [r4, #5]
  __HAL_PCD_DISABLE(hpcd);
 80049c0:	f855 0b04 	ldr.w	r0, [r5], #4
 80049c4:	f002 f888 	bl	8006ad8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049c8:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80049cc:	6820      	ldr	r0, [r4, #0]
 80049ce:	f002 f873 	bl	8006ab8 <USB_CoreInit>
 80049d2:	4601      	mov	r1, r0
 80049d4:	b128      	cbz	r0, 80049e2 <HAL_PCD_Init+0x9a>
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049d6:	2302      	movs	r3, #2
 80049d8:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
    return HAL_ERROR;
 80049dc:	2501      	movs	r5, #1
}
 80049de:	4628      	mov	r0, r5
 80049e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80049e2:	6820      	ldr	r0, [r4, #0]
 80049e4:	f002 f882 	bl	8006aec <USB_SetCurrentMode>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d1f4      	bne.n	80049d6 <HAL_PCD_Init+0x8e>
 80049ec:	4602      	mov	r2, r0
    hpcd->IN_ep[i].is_in = 1U;
 80049ee:	2701      	movs	r7, #1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f0:	7926      	ldrb	r6, [r4, #4]
 80049f2:	f104 0310 	add.w	r3, r4, #16
 80049f6:	b2c1      	uxtb	r1, r0
 80049f8:	428e      	cmp	r6, r1
 80049fa:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 80049fe:	d818      	bhi.n	8004a32 <HAL_PCD_Init+0xea>
 8004a00:	2100      	movs	r1, #0
    hpcd->OUT_ep[i].is_in = 0U;
 8004a02:	460a      	mov	r2, r1
 8004a04:	f504 73a8 	add.w	r3, r4, #336	@ 0x150
 8004a08:	b2c8      	uxtb	r0, r1
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0a:	4286      	cmp	r6, r0
 8004a0c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8004a10:	d81b      	bhi.n	8004a4a <HAL_PCD_Init+0x102>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a12:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8004a16:	6820      	ldr	r0, [r4, #0]
 8004a18:	f002 f86a 	bl	8006af0 <USB_DevInit>
 8004a1c:	4605      	mov	r5, r0
 8004a1e:	2800      	cmp	r0, #0
 8004a20:	d1d9      	bne.n	80049d6 <HAL_PCD_Init+0x8e>
  hpcd->State = HAL_PCD_STATE_READY;
 8004a22:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8004a24:	7360      	strb	r0, [r4, #13]
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a26:	6820      	ldr	r0, [r4, #0]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a28:	f884 3291 	strb.w	r3, [r4, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a2c:	f002 fb16 	bl	800705c <USB_DevDisconnect>
  return HAL_OK;
 8004a30:	e7d5      	b.n	80049de <HAL_PCD_Init+0x96>
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a32:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->IN_ep[i].is_in = 1U;
 8004a36:	f803 7c27 	strb.w	r7, [r3, #-39]
    hpcd->IN_ep[i].num = i;
 8004a3a:	f803 1c28 	strb.w	r1, [r3, #-40]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a3e:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a42:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a46:	3001      	adds	r0, #1
 8004a48:	e7d5      	b.n	80049f6 <HAL_PCD_Init+0xae>
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a4a:	e943 2206 	strd	r2, r2, [r3, #-24]
    hpcd->OUT_ep[i].is_in = 0U;
 8004a4e:	f803 2c27 	strb.w	r2, [r3, #-39]
    hpcd->OUT_ep[i].num = i;
 8004a52:	f803 0c28 	strb.w	r0, [r3, #-40]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a56:	f803 2c25 	strb.w	r2, [r3, #-37]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a5a:	f843 2c10 	str.w	r2, [r3, #-16]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a5e:	3101      	adds	r1, #1
 8004a60:	e7d2      	b.n	8004a08 <HAL_PCD_Init+0xc0>
 8004a62:	bf00      	nop
 8004a64:	08004945 	.word	0x08004945
 8004a68:	08004943 	.word	0x08004943
 8004a6c:	0800493b 	.word	0x0800493b
 8004a70:	0800493d 	.word	0x0800493d
 8004a74:	08004939 	.word	0x08004939
 8004a78:	0800493f 	.word	0x0800493f
 8004a7c:	08004941 	.word	0x08004941
 8004a80:	080026e5 	.word	0x080026e5
 8004a84:	080026f5 	.word	0x080026f5
 8004a88:	08004937 	.word	0x08004937
 8004a8c:	08004935 	.word	0x08004935
 8004a90:	080081c9 	.word	0x080081c9

08004a94 <HAL_PCD_RegisterCallback>:
{
 8004a94:	4603      	mov	r3, r0
  if (pCallback == NULL)
 8004a96:	b93a      	cbnz	r2, 8004aa8 <HAL_PCD_RegisterCallback+0x14>
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004a98:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004a9c:	f042 0210 	orr.w	r2, r2, #16
 8004aa0:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
    return HAL_ERROR;
 8004aa4:	2001      	movs	r0, #1
 8004aa6:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004aa8:	f890 0290 	ldrb.w	r0, [r0, #656]	@ 0x290
 8004aac:	2801      	cmp	r0, #1
 8004aae:	d03e      	beq.n	8004b2e <HAL_PCD_RegisterCallback+0x9a>
 8004ab0:	2001      	movs	r0, #1
 8004ab2:	f883 0290 	strb.w	r0, [r3, #656]	@ 0x290
  if (hpcd->State == HAL_PCD_STATE_READY)
 8004ab6:	f893 0291 	ldrb.w	r0, [r3, #657]	@ 0x291
 8004aba:	2801      	cmp	r0, #1
 8004abc:	d128      	bne.n	8004b10 <HAL_PCD_RegisterCallback+0x7c>
    switch (CallbackID)
 8004abe:	3901      	subs	r1, #1
 8004ac0:	2908      	cmp	r1, #8
 8004ac2:	d82c      	bhi.n	8004b1e <HAL_PCD_RegisterCallback+0x8a>
 8004ac4:	e8df f001 	tbb	[pc, r1]
 8004ac8:	120f0c05 	.word	0x120f0c05
 8004acc:	1e1b1815 	.word	0x1e1b1815
 8004ad0:	21          	.byte	0x21
 8004ad1:	00          	.byte	0x00
        hpcd->SOFCallback = pCallback;
 8004ad2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2000      	movs	r0, #0
  __HAL_UNLOCK(hpcd);
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return status;
 8004ade:	4770      	bx	lr
        hpcd->SetupStageCallback = pCallback;
 8004ae0:	f8c3 22dc 	str.w	r2, [r3, #732]	@ 0x2dc
        break;
 8004ae4:	e7f7      	b.n	8004ad6 <HAL_PCD_RegisterCallback+0x42>
        hpcd->ResetCallback = pCallback;
 8004ae6:	f8c3 22e0 	str.w	r2, [r3, #736]	@ 0x2e0
        break;
 8004aea:	e7f4      	b.n	8004ad6 <HAL_PCD_RegisterCallback+0x42>
        hpcd->SuspendCallback = pCallback;
 8004aec:	f8c3 22e4 	str.w	r2, [r3, #740]	@ 0x2e4
        break;
 8004af0:	e7f1      	b.n	8004ad6 <HAL_PCD_RegisterCallback+0x42>
        hpcd->ResumeCallback = pCallback;
 8004af2:	f8c3 22e8 	str.w	r2, [r3, #744]	@ 0x2e8
        break;
 8004af6:	e7ee      	b.n	8004ad6 <HAL_PCD_RegisterCallback+0x42>
        hpcd->ConnectCallback = pCallback;
 8004af8:	f8c3 22ec 	str.w	r2, [r3, #748]	@ 0x2ec
        break;
 8004afc:	e7eb      	b.n	8004ad6 <HAL_PCD_RegisterCallback+0x42>
        hpcd->DisconnectCallback = pCallback;
 8004afe:	f8c3 22f0 	str.w	r2, [r3, #752]	@ 0x2f0
        break;
 8004b02:	e7e8      	b.n	8004ad6 <HAL_PCD_RegisterCallback+0x42>
        hpcd->MspInitCallback = pCallback;
 8004b04:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304
        break;
 8004b08:	e7e5      	b.n	8004ad6 <HAL_PCD_RegisterCallback+0x42>
        hpcd->MspDeInitCallback = pCallback;
 8004b0a:	f8c3 2308 	str.w	r2, [r3, #776]	@ 0x308
        break;
 8004b0e:	e7e2      	b.n	8004ad6 <HAL_PCD_RegisterCallback+0x42>
  else if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b10:	f893 0291 	ldrb.w	r0, [r3, #657]	@ 0x291
 8004b14:	b918      	cbnz	r0, 8004b1e <HAL_PCD_RegisterCallback+0x8a>
    switch (CallbackID)
 8004b16:	2908      	cmp	r1, #8
 8004b18:	d0f4      	beq.n	8004b04 <HAL_PCD_RegisterCallback+0x70>
 8004b1a:	2909      	cmp	r1, #9
 8004b1c:	d0f5      	beq.n	8004b0a <HAL_PCD_RegisterCallback+0x76>
        hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004b1e:	f8d3 2294 	ldr.w	r2, [r3, #660]	@ 0x294
    status =  HAL_ERROR;
 8004b22:	2001      	movs	r0, #1
        hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004b24:	f042 0210 	orr.w	r2, r2, #16
 8004b28:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        break;
 8004b2c:	e7d4      	b.n	8004ad8 <HAL_PCD_RegisterCallback+0x44>
  __HAL_LOCK(hpcd);
 8004b2e:	2002      	movs	r0, #2
}
 8004b30:	4770      	bx	lr

08004b32 <HAL_PCD_RegisterDataOutStageCallback>:
{
 8004b32:	4603      	mov	r3, r0
  if (pCallback == NULL)
 8004b34:	b939      	cbnz	r1, 8004b46 <HAL_PCD_RegisterDataOutStageCallback+0x14>
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004b36:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004b3a:	f042 0210 	orr.w	r2, r2, #16
 8004b3e:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
    return HAL_ERROR;
 8004b42:	2001      	movs	r0, #1
 8004b44:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004b46:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
 8004b4a:	2a01      	cmp	r2, #1
 8004b4c:	d015      	beq.n	8004b7a <HAL_PCD_RegisterDataOutStageCallback+0x48>
 8004b4e:	2001      	movs	r0, #1
  if (hpcd->State == HAL_PCD_STATE_READY)
 8004b50:	f893 2291 	ldrb.w	r2, [r3, #657]	@ 0x291
  __HAL_LOCK(hpcd);
 8004b54:	f883 0290 	strb.w	r0, [r3, #656]	@ 0x290
  if (hpcd->State == HAL_PCD_STATE_READY)
 8004b58:	4282      	cmp	r2, r0
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004b5a:	bf17      	itett	ne
 8004b5c:	f8d3 2294 	ldrne.w	r2, [r3, #660]	@ 0x294
  HAL_StatusTypeDef status = HAL_OK;
 8004b60:	2000      	moveq	r0, #0
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004b62:	f042 0210 	orrne.w	r2, r2, #16
 8004b66:	f8c3 2294 	strne.w	r2, [r3, #660]	@ 0x294
  __HAL_UNLOCK(hpcd);
 8004b6a:	f04f 0200 	mov.w	r2, #0
    hpcd->DataOutStageCallback = pCallback;
 8004b6e:	bf08      	it	eq
 8004b70:	f8c3 12f4 	streq.w	r1, [r3, #756]	@ 0x2f4
  __HAL_UNLOCK(hpcd);
 8004b74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return status;
 8004b78:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004b7a:	2002      	movs	r0, #2
}
 8004b7c:	4770      	bx	lr

08004b7e <HAL_PCD_RegisterDataInStageCallback>:
{
 8004b7e:	4603      	mov	r3, r0
  if (pCallback == NULL)
 8004b80:	b939      	cbnz	r1, 8004b92 <HAL_PCD_RegisterDataInStageCallback+0x14>
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004b82:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004b86:	f042 0210 	orr.w	r2, r2, #16
 8004b8a:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
    return HAL_ERROR;
 8004b8e:	2001      	movs	r0, #1
 8004b90:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004b92:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
 8004b96:	2a01      	cmp	r2, #1
 8004b98:	d015      	beq.n	8004bc6 <HAL_PCD_RegisterDataInStageCallback+0x48>
 8004b9a:	2001      	movs	r0, #1
  if (hpcd->State == HAL_PCD_STATE_READY)
 8004b9c:	f893 2291 	ldrb.w	r2, [r3, #657]	@ 0x291
  __HAL_LOCK(hpcd);
 8004ba0:	f883 0290 	strb.w	r0, [r3, #656]	@ 0x290
  if (hpcd->State == HAL_PCD_STATE_READY)
 8004ba4:	4282      	cmp	r2, r0
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004ba6:	bf17      	itett	ne
 8004ba8:	f8d3 2294 	ldrne.w	r2, [r3, #660]	@ 0x294
  HAL_StatusTypeDef status = HAL_OK;
 8004bac:	2000      	moveq	r0, #0
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004bae:	f042 0210 	orrne.w	r2, r2, #16
 8004bb2:	f8c3 2294 	strne.w	r2, [r3, #660]	@ 0x294
  __HAL_UNLOCK(hpcd);
 8004bb6:	f04f 0200 	mov.w	r2, #0
    hpcd->DataInStageCallback = pCallback;
 8004bba:	bf08      	it	eq
 8004bbc:	f8c3 12f8 	streq.w	r1, [r3, #760]	@ 0x2f8
  __HAL_UNLOCK(hpcd);
 8004bc0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return status;
 8004bc4:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004bc6:	2002      	movs	r0, #2
}
 8004bc8:	4770      	bx	lr

08004bca <HAL_PCD_RegisterIsoOutIncpltCallback>:
{
 8004bca:	4603      	mov	r3, r0
  if (pCallback == NULL)
 8004bcc:	b939      	cbnz	r1, 8004bde <HAL_PCD_RegisterIsoOutIncpltCallback+0x14>
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004bce:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004bd2:	f042 0210 	orr.w	r2, r2, #16
 8004bd6:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
    return HAL_ERROR;
 8004bda:	2001      	movs	r0, #1
 8004bdc:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004bde:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
 8004be2:	2a01      	cmp	r2, #1
 8004be4:	d015      	beq.n	8004c12 <HAL_PCD_RegisterIsoOutIncpltCallback+0x48>
 8004be6:	2001      	movs	r0, #1
  if (hpcd->State == HAL_PCD_STATE_READY)
 8004be8:	f893 2291 	ldrb.w	r2, [r3, #657]	@ 0x291
  __HAL_LOCK(hpcd);
 8004bec:	f883 0290 	strb.w	r0, [r3, #656]	@ 0x290
  if (hpcd->State == HAL_PCD_STATE_READY)
 8004bf0:	4282      	cmp	r2, r0
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004bf2:	bf17      	itett	ne
 8004bf4:	f8d3 2294 	ldrne.w	r2, [r3, #660]	@ 0x294
  HAL_StatusTypeDef status = HAL_OK;
 8004bf8:	2000      	moveq	r0, #0
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004bfa:	f042 0210 	orrne.w	r2, r2, #16
 8004bfe:	f8c3 2294 	strne.w	r2, [r3, #660]	@ 0x294
  __HAL_UNLOCK(hpcd);
 8004c02:	f04f 0200 	mov.w	r2, #0
    hpcd->ISOOUTIncompleteCallback = pCallback;
 8004c06:	bf08      	it	eq
 8004c08:	f8c3 12fc 	streq.w	r1, [r3, #764]	@ 0x2fc
  __HAL_UNLOCK(hpcd);
 8004c0c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return status;
 8004c10:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004c12:	2002      	movs	r0, #2
}
 8004c14:	4770      	bx	lr

08004c16 <HAL_PCD_RegisterIsoInIncpltCallback>:
{
 8004c16:	4603      	mov	r3, r0
  if (pCallback == NULL)
 8004c18:	b939      	cbnz	r1, 8004c2a <HAL_PCD_RegisterIsoInIncpltCallback+0x14>
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004c1a:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 8004c1e:	f042 0210 	orr.w	r2, r2, #16
 8004c22:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294
    return HAL_ERROR;
 8004c26:	2001      	movs	r0, #1
 8004c28:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004c2a:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
 8004c2e:	2a01      	cmp	r2, #1
 8004c30:	d015      	beq.n	8004c5e <HAL_PCD_RegisterIsoInIncpltCallback+0x48>
 8004c32:	2001      	movs	r0, #1
  if (hpcd->State == HAL_PCD_STATE_READY)
 8004c34:	f893 2291 	ldrb.w	r2, [r3, #657]	@ 0x291
  __HAL_LOCK(hpcd);
 8004c38:	f883 0290 	strb.w	r0, [r3, #656]	@ 0x290
  if (hpcd->State == HAL_PCD_STATE_READY)
 8004c3c:	4282      	cmp	r2, r0
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004c3e:	bf17      	itett	ne
 8004c40:	f8d3 2294 	ldrne.w	r2, [r3, #660]	@ 0x294
  HAL_StatusTypeDef status = HAL_OK;
 8004c44:	2000      	moveq	r0, #0
    hpcd->ErrorCode |= HAL_PCD_ERROR_INVALID_CALLBACK;
 8004c46:	f042 0210 	orrne.w	r2, r2, #16
 8004c4a:	f8c3 2294 	strne.w	r2, [r3, #660]	@ 0x294
  __HAL_UNLOCK(hpcd);
 8004c4e:	f04f 0200 	mov.w	r2, #0
    hpcd->ISOINIncompleteCallback = pCallback;
 8004c52:	bf08      	it	eq
 8004c54:	f8c3 1300 	streq.w	r1, [r3, #768]	@ 0x300
  __HAL_UNLOCK(hpcd);
 8004c58:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return status;
 8004c5c:	4770      	bx	lr
  __HAL_LOCK(hpcd);
 8004c5e:	2002      	movs	r0, #2
}
 8004c60:	4770      	bx	lr

08004c62 <HAL_PCD_Start>:
{
 8004c62:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hpcd);
 8004c64:	f890 3290 	ldrb.w	r3, [r0, #656]	@ 0x290
{
 8004c68:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d010      	beq.n	8004c90 <HAL_PCD_Start+0x2e>
 8004c6e:	2501      	movs	r5, #1
 8004c70:	f880 5290 	strb.w	r5, [r0, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004c74:	6800      	ldr	r0, [r0, #0]
 8004c76:	f001 ff26 	bl	8006ac6 <USB_EnableGlobalInt>
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f000 fe3f 	bl	8005900 <HAL_PCDEx_SetConnectionState>
  (void)USB_DevConnect(hpcd->Instance);
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	f002 f9e8 	bl	8007058 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c88:	2000      	movs	r0, #0
 8004c8a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 8004c8e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8004c90:	2002      	movs	r0, #2
 8004c92:	e7fc      	b.n	8004c8e <HAL_PCD_Start+0x2c>

08004c94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c94:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8004c96:	f890 2290 	ldrb.w	r2, [r0, #656]	@ 0x290
{
 8004c9a:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8004c9c:	2a01      	cmp	r2, #1
 8004c9e:	d00a      	beq.n	8004cb6 <HAL_PCD_SetAddress+0x22>
 8004ca0:	2201      	movs	r2, #1
  hpcd->USB_Address = address;
 8004ca2:	7341      	strb	r1, [r0, #13]
  __HAL_LOCK(hpcd);
 8004ca4:	f880 2290 	strb.w	r2, [r0, #656]	@ 0x290
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ca8:	6800      	ldr	r0, [r0, #0]
 8004caa:	f002 f9cf 	bl	800704c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004cae:	2000      	movs	r0, #0
 8004cb0:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290

  return HAL_OK;
}
 8004cb4:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8004cb6:	2002      	movs	r0, #2
 8004cb8:	e7fc      	b.n	8004cb4 <HAL_PCD_SetAddress+0x20>
	...

08004cbc <HAL_PCD_IRQHandler>:
{
 8004cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc0:	4604      	mov	r4, r0
 8004cc2:	b085      	sub	sp, #20
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004cc4:	6800      	ldr	r0, [r0, #0]
 8004cc6:	f002 f9cb 	bl	8007060 <USB_ReadInterrupts>
  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004cca:	f410 4500 	ands.w	r5, r0, #32768	@ 0x8000
 8004cce:	f000 845b 	beq.w	8005588 <HAL_PCD_IRQHandler+0x8cc>
        ep = &hpcd->IN_ep[epindex];

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);

        if (ep->type == EP_TYPE_ISOC)
 8004cd2:	2528      	movs	r5, #40	@ 0x28
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004cd4:	4ec8      	ldr	r6, [pc, #800]	@ (8004ff8 <HAL_PCD_IRQHandler+0x33c>)
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004cd6:	6820      	ldr	r0, [r4, #0]
 8004cd8:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
 8004cdc:	041f      	lsls	r7, r3, #16
 8004cde:	d402      	bmi.n	8004ce6 <HAL_PCD_IRQHandler+0x2a>
}
 8004ce0:	b005      	add	sp, #20
 8004ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    wIstr = hpcd->Instance->ISTR;
 8004ce6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	@ 0x44
    if (epindex == 0U)
 8004cea:	f013 070f 	ands.w	r7, r3, #15
    wIstr = hpcd->Instance->ISTR;
 8004cee:	b299      	uxth	r1, r3
    if (epindex == 0U)
 8004cf0:	f040 80c3 	bne.w	8004e7a <HAL_PCD_IRQHandler+0x1be>
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004cf4:	f011 0110 	ands.w	r1, r1, #16
 8004cf8:	d127      	bne.n	8004d4a <HAL_PCD_IRQHandler+0x8e>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004cfa:	8803      	ldrh	r3, [r0, #0]
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	4033      	ands	r3, r6
 8004d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004d04:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d06:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004d0a:	7c22      	ldrb	r2, [r4, #16]
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d12:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004d16:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	@ 0x404
        ep->xfer_buff += ep->xfer_count;
 8004d1a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
        ep->xfer_buff += ep->xfer_count;
 8004d20:	441a      	add	r2, r3
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004d22:	62e3      	str	r3, [r4, #44]	@ 0x2c
        hpcd->DataInStageCallback(hpcd, 0U);
 8004d24:	4620      	mov	r0, r4
 8004d26:	f8d4 32f8 	ldr.w	r3, [r4, #760]	@ 0x2f8
        ep->xfer_buff += ep->xfer_count;
 8004d2a:	6262      	str	r2, [r4, #36]	@ 0x24
        hpcd->DataInStageCallback(hpcd, 0U);
 8004d2c:	4798      	blx	r3
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d2e:	7b63      	ldrb	r3, [r4, #13]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0d0      	beq.n	8004cd6 <HAL_PCD_IRQHandler+0x1a>
 8004d34:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d36:	6821      	ldr	r1, [r4, #0]
        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004d38:	2a00      	cmp	r2, #0
 8004d3a:	d1cc      	bne.n	8004cd6 <HAL_PCD_IRQHandler+0x1a>
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004d3c:	7b63      	ldrb	r3, [r4, #13]
 8004d3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d42:	f8a1 304c 	strh.w	r3, [r1, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8004d46:	7362      	strb	r2, [r4, #13]
 8004d48:	e7c5      	b.n	8004cd6 <HAL_PCD_IRQHandler+0x1a>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004d4a:	8807      	ldrh	r7, [r0, #0]
 8004d4c:	b2bb      	uxth	r3, r7
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d4e:	f417 6700 	ands.w	r7, r7, #2048	@ 0x800
 8004d52:	d022      	beq.n	8004d9a <HAL_PCD_IRQHandler+0xde>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d54:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004d58:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004d62:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004d66:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d6a:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8004d6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d72:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d76:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8004d7a:	f002 fbbc 	bl	80074f6 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d7e:	6822      	ldr	r2, [r4, #0]
          hpcd->SetupStageCallback(hpcd);
 8004d80:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d82:	8813      	ldrh	r3, [r2, #0]
 8004d84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d88:	051b      	lsls	r3, r3, #20
 8004d8a:	0d1b      	lsrs	r3, r3, #20
 8004d8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d90:	8013      	strh	r3, [r2, #0]
          hpcd->SetupStageCallback(hpcd);
 8004d92:	f8d4 32dc 	ldr.w	r3, [r4, #732]	@ 0x2dc
 8004d96:	4798      	blx	r3
 8004d98:	e79d      	b.n	8004cd6 <HAL_PCD_IRQHandler+0x1a>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d9a:	0419      	lsls	r1, r3, #16
 8004d9c:	d59b      	bpl.n	8004cd6 <HAL_PCD_IRQHandler+0x1a>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d9e:	8803      	ldrh	r3, [r0, #0]
 8004da0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004da4:	051b      	lsls	r3, r3, #20
 8004da6:	0d1b      	lsrs	r3, r3, #20
 8004da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dac:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004dae:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004db2:	f894 2150 	ldrb.w	r2, [r4, #336]	@ 0x150
 8004db6:	b29b      	uxth	r3, r3
 8004db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004dbc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004dc0:	f8b3 340c 	ldrh.w	r3, [r3, #1036]	@ 0x40c
 8004dc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dc8:	f8c4 316c 	str.w	r3, [r4, #364]	@ 0x16c
          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004dcc:	b193      	cbz	r3, 8004df4 <HAL_PCD_IRQHandler+0x138>
 8004dce:	f8d4 1164 	ldr.w	r1, [r4, #356]	@ 0x164
 8004dd2:	b179      	cbz	r1, 8004df4 <HAL_PCD_IRQHandler+0x138>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004dd4:	f8b4 2156 	ldrh.w	r2, [r4, #342]	@ 0x156
 8004dd8:	f002 fb8d 	bl	80074f6 <USB_ReadPMA>
            ep->xfer_buff += ep->xfer_count;
 8004ddc:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
 8004de0:	f8d4 216c 	ldr.w	r2, [r4, #364]	@ 0x16c
            hpcd->DataOutStageCallback(hpcd, 0U);
 8004de4:	4639      	mov	r1, r7
            ep->xfer_buff += ep->xfer_count;
 8004de6:	4413      	add	r3, r2
 8004de8:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
            hpcd->DataOutStageCallback(hpcd, 0U);
 8004dec:	4620      	mov	r0, r4
 8004dee:	f8d4 32f4 	ldr.w	r3, [r4, #756]	@ 0x2f4
 8004df2:	4798      	blx	r3
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004df4:	6821      	ldr	r1, [r4, #0]
 8004df6:	880a      	ldrh	r2, [r1, #0]
 8004df8:	b293      	uxth	r3, r2
          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004dfa:	0512      	lsls	r2, r2, #20
 8004dfc:	f53f af6b 	bmi.w	8004cd6 <HAL_PCD_IRQHandler+0x1a>
 8004e00:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004e04:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e08:	f43f af65 	beq.w	8004cd6 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e0c:	f8b1 2050 	ldrh.w	r2, [r1, #80]	@ 0x50
 8004e10:	f201 400c 	addw	r0, r1, #1036	@ 0x40c
 8004e14:	b292      	uxth	r2, r2
 8004e16:	5a83      	ldrh	r3, [r0, r2]
 8004e18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e1c:	5283      	strh	r3, [r0, r2]
 8004e1e:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
 8004e22:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e24:	d91d      	bls.n	8004e62 <HAL_PCD_IRQHandler+0x1a6>
 8004e26:	095f      	lsrs	r7, r3, #5
 8004e28:	06db      	lsls	r3, r3, #27
 8004e2a:	5a83      	ldrh	r3, [r0, r2]
 8004e2c:	bf08      	it	eq
 8004e2e:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8004e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	5283      	strh	r3, [r0, r2]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004e44:	880b      	ldrh	r3, [r1, #0]
 8004e46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	0c1b      	lsrs	r3, r3, #16
 8004e52:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8004e56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e5e:	800b      	strh	r3, [r1, #0]
 8004e60:	e739      	b.n	8004cd6 <HAL_PCD_IRQHandler+0x1a>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e62:	b90b      	cbnz	r3, 8004e68 <HAL_PCD_IRQHandler+0x1ac>
 8004e64:	5a83      	ldrh	r3, [r0, r2]
 8004e66:	e7e7      	b.n	8004e38 <HAL_PCD_IRQHandler+0x17c>
 8004e68:	085f      	lsrs	r7, r3, #1
 8004e6a:	07db      	lsls	r3, r3, #31
 8004e6c:	5a83      	ldrh	r3, [r0, r2]
 8004e6e:	bf48      	it	mi
 8004e70:	3701      	addmi	r7, #1
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	ea43 2387 	orr.w	r3, r3, r7, lsl #10
 8004e78:	e7e2      	b.n	8004e40 <HAL_PCD_IRQHandler+0x184>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004e7a:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e7e:	0419      	lsls	r1, r3, #16
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004e80:	fa1f f883 	uxth.w	r8, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e84:	f140 80f8 	bpl.w	8005078 <HAL_PCD_IRQHandler+0x3bc>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004e88:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8004e8c:	fb05 4107 	mla	r1, r5, r7, r4
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004e90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e94:	051b      	lsls	r3, r3, #20
 8004e96:	0d1b      	lsrs	r3, r3, #20
 8004e98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004e9c:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0U)
 8004ea0:	f891 315c 	ldrb.w	r3, [r1, #348]	@ 0x15c
 8004ea4:	f500 6e80 	add.w	lr, r0, #1024	@ 0x400
 8004ea8:	b9bb      	cbnz	r3, 8004eda <HAL_PCD_IRQHandler+0x21e>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004eaa:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8004eae:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3306      	adds	r3, #6
 8004eb6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004eba:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004ebe:	f3c9 0909 	ubfx	r9, r9, #0, #10
          if (count != 0U)
 8004ec2:	f1b9 0f00 	cmp.w	r9, #0
 8004ec6:	f000 80bb 	beq.w	8005040 <HAL_PCD_IRQHandler+0x384>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004eca:	464b      	mov	r3, r9
 8004ecc:	f8b1 2156 	ldrh.w	r2, [r1, #342]	@ 0x156
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ed0:	f8d1 1164 	ldr.w	r1, [r1, #356]	@ 0x164
 8004ed4:	f002 fb0f 	bl	80074f6 <USB_ReadPMA>
 8004ed8:	e0b2      	b.n	8005040 <HAL_PCD_IRQHandler+0x384>
          if (ep->type == EP_TYPE_BULK)
 8004eda:	f891 3153 	ldrb.w	r3, [r1, #339]	@ 0x153

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ede:	f891 2150 	ldrb.w	r2, [r1, #336]	@ 0x150
          if (ep->type == EP_TYPE_BULK)
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	f040 808a 	bne.w	8004ffc <HAL_PCD_IRQHandler+0x340>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004ee8:	f8b0 9050 	ldrh.w	r9, [r0, #80]	@ 0x50
 8004eec:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 8004ef0:	fa1f f989 	uxth.w	r9, r9
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ef4:	f418 4a80 	ands.w	sl, r8, #16384	@ 0x4000

    if (ep->xfer_len >= count)
 8004ef8:	f8d1 3168 	ldr.w	r3, [r1, #360]	@ 0x168
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004efc:	44d9      	add	r9, fp
 8004efe:	f008 0c40 	and.w	ip, r8, #64	@ 0x40
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f02:	d03c      	beq.n	8004f7e <HAL_PCD_IRQHandler+0x2c2>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f04:	f109 0902 	add.w	r9, r9, #2
 8004f08:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8004f0c:	f3c9 0909 	ubfx	r9, r9, #0, #10
    if (ep->xfer_len >= count)
 8004f10:	4599      	cmp	r9, r3
 8004f12:	d913      	bls.n	8004f3c <HAL_PCD_IRQHandler+0x280>
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f26:	041b      	lsls	r3, r3, #16
 8004f28:	0c1b      	lsrs	r3, r3, #16
 8004f2a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f36:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004f3a:	e005      	b.n	8004f48 <HAL_PCD_IRQHandler+0x28c>
      ep->xfer_len -= count;
 8004f3c:	eba3 0309 	sub.w	r3, r3, r9
 8004f40:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0e8      	beq.n	8004f1a <HAL_PCD_IRQHandler+0x25e>
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004f48:	f1bc 0f00 	cmp.w	ip, #0
 8004f4c:	d00d      	beq.n	8004f6a <HAL_PCD_IRQHandler+0x2ae>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004f4e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5a:	041b      	lsls	r3, r3, #16
 8004f5c:	0c1b      	lsrs	r3, r3, #16
 8004f5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004f66:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8004f6a:	f1b9 0f00 	cmp.w	r9, #0
 8004f6e:	d067      	beq.n	8005040 <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f70:	2128      	movs	r1, #40	@ 0x28
 8004f72:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f76:	464b      	mov	r3, r9
 8004f78:	f8b1 2158 	ldrh.w	r2, [r1, #344]	@ 0x158
 8004f7c:	e7a8      	b.n	8004ed0 <HAL_PCD_IRQHandler+0x214>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f7e:	f109 0906 	add.w	r9, r9, #6
 8004f82:	f83e 9019 	ldrh.w	r9, [lr, r9, lsl #1]
 8004f86:	f3c9 0909 	ubfx	r9, r9, #0, #10

    if (ep->xfer_len >= count)
 8004f8a:	4599      	cmp	r9, r3
 8004f8c:	d912      	bls.n	8004fb4 <HAL_PCD_IRQHandler+0x2f8>
 8004f8e:	f8c1 a168 	str.w	sl, [r1, #360]	@ 0x168
    }

    if (ep->xfer_len == 0U)
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004f96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f9e:	041b      	lsls	r3, r3, #16
 8004fa0:	0c1b      	lsrs	r3, r3, #16
 8004fa2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8004fa6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fae:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8004fb2:	e005      	b.n	8004fc0 <HAL_PCD_IRQHandler+0x304>
      ep->xfer_len -= count;
 8004fb4:	eba3 0309 	sub.w	r3, r3, r9
 8004fb8:	f8c1 3168 	str.w	r3, [r1, #360]	@ 0x168
    if (ep->xfer_len == 0U)
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0e8      	beq.n	8004f92 <HAL_PCD_IRQHandler+0x2d6>
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004fc0:	f1bc 0f00 	cmp.w	ip, #0
 8004fc4:	d10d      	bne.n	8004fe2 <HAL_PCD_IRQHandler+0x326>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004fc6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8004fca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fd2:	041b      	lsls	r3, r3, #16
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fda:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004fde:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }

    if (count != 0U)
 8004fe2:	f1b9 0f00 	cmp.w	r9, #0
 8004fe6:	d02b      	beq.n	8005040 <HAL_PCD_IRQHandler+0x384>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004fe8:	2128      	movs	r1, #40	@ 0x28
 8004fea:	fb01 4107 	mla	r1, r1, r7, r4
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004fee:	464b      	mov	r3, r9
 8004ff0:	f8b1 215a 	ldrh.w	r2, [r1, #346]	@ 0x15a
 8004ff4:	e76c      	b.n	8004ed0 <HAL_PCD_IRQHandler+0x214>
 8004ff6:	bf00      	nop
 8004ff8:	ffff8f0f 	.word	0xffff8f0f
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ffc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8005000:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005004:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005008:	041b      	lsls	r3, r3, #16
 800500a:	0c1b      	lsrs	r3, r3, #16
 800500c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005010:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005014:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005018:	f891 3150 	ldrb.w	r3, [r1, #336]	@ 0x150
 800501c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	f412 4f80 	tst.w	r2, #16384	@ 0x4000
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005026:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800502a:	b292      	uxth	r2, r2
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800502c:	d055      	beq.n	80050da <HAL_PCD_IRQHandler+0x41e>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800502e:	3202      	adds	r2, #2
 8005030:	4413      	add	r3, r2
 8005032:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8005036:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 800503a:	f1b9 0f00 	cmp.w	r9, #0
 800503e:	d19a      	bne.n	8004f76 <HAL_PCD_IRQHandler+0x2ba>
        ep->xfer_count += count;
 8005040:	fb05 f107 	mul.w	r1, r5, r7
 8005044:	1863      	adds	r3, r4, r1
 8005046:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 800504a:	444a      	add	r2, r9
 800504c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
        ep->xfer_buff += count;
 8005050:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8005054:	444a      	add	r2, r9
 8005056:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800505a:	f8d3 2168 	ldr.w	r2, [r3, #360]	@ 0x168
 800505e:	b11a      	cbz	r2, 8005068 <HAL_PCD_IRQHandler+0x3ac>
 8005060:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8005064:	4599      	cmp	r9, r3
 8005066:	d242      	bcs.n	80050ee <HAL_PCD_IRQHandler+0x432>
          hpcd->DataOutStageCallback(hpcd, ep->num);
 8005068:	fb05 4307 	mla	r3, r5, r7, r4
 800506c:	4620      	mov	r0, r4
 800506e:	f8d4 22f4 	ldr.w	r2, [r4, #756]	@ 0x2f4
 8005072:	f893 1150 	ldrb.w	r1, [r3, #336]	@ 0x150
 8005076:	4790      	blx	r2
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005078:	f018 0f80 	tst.w	r8, #128	@ 0x80
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800507c:	6820      	ldr	r0, [r4, #0]
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800507e:	f43f ae2a 	beq.w	8004cd6 <HAL_PCD_IRQHandler+0x1a>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005082:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8005086:	fb05 fc07 	mul.w	ip, r5, r7
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800508a:	b29b      	uxth	r3, r3
 800508c:	4033      	ands	r3, r6
 800508e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005092:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->type == EP_TYPE_ISOC)
 8005096:	eb04 030c 	add.w	r3, r4, ip
 800509a:	7cda      	ldrb	r2, [r3, #19]
 800509c:	2a01      	cmp	r2, #1
 800509e:	d157      	bne.n	8005150 <HAL_PCD_IRQHandler+0x494>
          ep->xfer_len = 0U;
 80050a0:	2100      	movs	r1, #0
 80050a2:	fb07 5205 	mla	r2, r7, r5, r5
 80050a6:	50a1      	str	r1, [r4, r2]
          if (ep->doublebuffer != 0U)
 80050a8:	7f1a      	ldrb	r2, [r3, #28]
 80050aa:	b392      	cbz	r2, 8005112 <HAL_PCD_IRQHandler+0x456>
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050ac:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050b0:	7c5a      	ldrb	r2, [r3, #17]
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80050b2:	d037      	beq.n	8005124 <HAL_PCD_IRQHandler+0x468>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050b4:	bb12      	cbnz	r2, 80050fc <HAL_PCD_IRQHandler+0x440>
 80050b6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80050ba:	7c1b      	ldrb	r3, [r3, #16]
 80050bc:	b292      	uxth	r2, r2
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	f200 4004 	addw	r0, r0, #1028	@ 0x404
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050c4:	4410      	add	r0, r2
 80050c6:	5a1a      	ldrh	r2, [r3, r0]
 80050c8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80050cc:	521a      	strh	r2, [r3, r0]
 80050ce:	5a1a      	ldrh	r2, [r3, r0]
 80050d0:	b292      	uxth	r2, r2
 80050d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050d6:	521a      	strh	r2, [r3, r0]
 80050d8:	e01b      	b.n	8005112 <HAL_PCD_IRQHandler+0x456>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050da:	3206      	adds	r2, #6
 80050dc:	4413      	add	r3, r2
 80050de:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 80050e2:	f3c9 0909 	ubfx	r9, r9, #0, #10
              if (count != 0U)
 80050e6:	f1b9 0f00 	cmp.w	r9, #0
 80050ea:	d0a9      	beq.n	8005040 <HAL_PCD_IRQHandler+0x384>
 80050ec:	e77f      	b.n	8004fee <HAL_PCD_IRQHandler+0x332>
        ep = &hpcd->OUT_ep[epindex];
 80050ee:	f501 71a8 	add.w	r1, r1, #336	@ 0x150
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80050f2:	6820      	ldr	r0, [r4, #0]
 80050f4:	4421      	add	r1, r4
 80050f6:	f001 ffc9 	bl	800708c <USB_EPStartXfer>
 80050fa:	e7bd      	b.n	8005078 <HAL_PCD_IRQHandler+0x3bc>
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050fc:	2a01      	cmp	r2, #1
 80050fe:	d108      	bne.n	8005112 <HAL_PCD_IRQHandler+0x456>
 8005100:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005104:	7c1b      	ldrb	r3, [r3, #16]
 8005106:	b292      	uxth	r2, r2
 8005108:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 800510c:	011b      	lsls	r3, r3, #4
 800510e:	4410      	add	r0, r2
 8005110:	5219      	strh	r1, [r3, r0]
          hpcd->DataInStageCallback(hpcd, ep->num);
 8005112:	2328      	movs	r3, #40	@ 0x28
 8005114:	fb03 4307 	mla	r3, r3, r7, r4
 8005118:	4620      	mov	r0, r4
 800511a:	f8d4 22f8 	ldr.w	r2, [r4, #760]	@ 0x2f8
 800511e:	7c19      	ldrb	r1, [r3, #16]
 8005120:	4790      	blx	r2
 8005122:	e5d8      	b.n	8004cd6 <HAL_PCD_IRQHandler+0x1a>
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005124:	b93a      	cbnz	r2, 8005136 <HAL_PCD_IRQHandler+0x47a>
 8005126:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800512a:	7c1b      	ldrb	r3, [r3, #16]
 800512c:	b292      	uxth	r2, r2
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8005134:	e7c6      	b.n	80050c4 <HAL_PCD_IRQHandler+0x408>
 8005136:	2a01      	cmp	r2, #1
 8005138:	d1eb      	bne.n	8005112 <HAL_PCD_IRQHandler+0x456>
 800513a:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 800513e:	7c1b      	ldrb	r3, [r3, #16]
 8005140:	b292      	uxth	r2, r2
 8005142:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	4410      	add	r0, r2
 800514a:	f823 8000 	strh.w	r8, [r3, r0]
 800514e:	e7e0      	b.n	8005112 <HAL_PCD_IRQHandler+0x456>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005150:	7c19      	ldrb	r1, [r3, #16]
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005152:	f418 7e80 	ands.w	lr, r8, #256	@ 0x100
            if (ep->xfer_len > TxPctSize)
 8005156:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005158:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 800515c:	f500 6980 	add.w	r9, r0, #1024	@ 0x400
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005160:	d11f      	bne.n	80051a2 <HAL_PCD_IRQHandler+0x4e6>
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005162:	f8b0 7050 	ldrh.w	r7, [r0, #80]	@ 0x50
 8005166:	b2bf      	uxth	r7, r7
 8005168:	4457      	add	r7, sl
 800516a:	3702      	adds	r7, #2
 800516c:	f839 7017 	ldrh.w	r7, [r9, r7, lsl #1]
            if (ep->xfer_len > TxPctSize)
 8005170:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005174:	4297      	cmp	r7, r2
 8005176:	d306      	bcc.n	8005186 <HAL_PCD_IRQHandler+0x4ca>
 8005178:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
              hpcd->DataInStageCallback(hpcd, ep->num);
 800517c:	4620      	mov	r0, r4
 800517e:	f8d4 32f8 	ldr.w	r3, [r4, #760]	@ 0x2f8
 8005182:	4798      	blx	r3
 8005184:	e5a7      	b.n	8004cd6 <HAL_PCD_IRQHandler+0x1a>
              ep->xfer_len -= TxPctSize;
 8005186:	1bd2      	subs	r2, r2, r7
 8005188:	629a      	str	r2, [r3, #40]	@ 0x28
              ep->xfer_buff += TxPctSize;
 800518a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        ep = &hpcd->IN_ep[epindex];
 800518c:	f10c 0110 	add.w	r1, ip, #16
              ep->xfer_buff += TxPctSize;
 8005190:	443a      	add	r2, r7
 8005192:	625a      	str	r2, [r3, #36]	@ 0x24
              ep->xfer_count += TxPctSize;
 8005194:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005196:	4421      	add	r1, r4
              ep->xfer_count += TxPctSize;
 8005198:	443a      	add	r2, r7
 800519a:	62da      	str	r2, [r3, #44]	@ 0x2c
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800519c:	f001 ff76 	bl	800708c <USB_EPStartXfer>
 80051a0:	e599      	b.n	8004cd6 <HAL_PCD_IRQHandler+0x1a>

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051a2:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051a6:	f018 0e40 	ands.w	lr, r8, #64	@ 0x40
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051aa:	fa1f fc8c 	uxth.w	ip, ip
 80051ae:	44d4      	add	ip, sl
 80051b0:	f408 4880 	and.w	r8, r8, #16384	@ 0x4000
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051b4:	f000 80f5 	beq.w	80053a2 <HAL_PCD_IRQHandler+0x6e6>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80051b8:	f10c 0c02 	add.w	ip, ip, #2
 80051bc:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 80051c0:	fa1f f888 	uxth.w	r8, r8

    if (ep->xfer_len > TxPctSize)
 80051c4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80051c8:	4594      	cmp	ip, r2
    {
      ep->xfer_len -= TxPctSize;
    }
    else
    {
      ep->xfer_len = 0U;
 80051ca:	bf2c      	ite	cs
 80051cc:	2200      	movcs	r2, #0
      ep->xfer_len -= TxPctSize;
 80051ce:	eba2 020c 	subcc.w	r2, r2, ip
 80051d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80051d4:	2a00      	cmp	r2, #0
 80051d6:	d15c      	bne.n	8005292 <HAL_PCD_IRQHandler+0x5d6>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051d8:	2328      	movs	r3, #40	@ 0x28
 80051da:	fb03 4307 	mla	r3, r3, r7, r4
 80051de:	7c5b      	ldrb	r3, [r3, #17]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d142      	bne.n	800526a <HAL_PCD_IRQHandler+0x5ae>
 80051e4:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80051e8:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80051ec:	b292      	uxth	r2, r2
 80051ee:	010b      	lsls	r3, r1, #4
 80051f0:	4494      	add	ip, r2
 80051f2:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80051f6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80051fa:	f82c 2003 	strh.w	r2, [ip, r3]
 80051fe:	f83c 2003 	ldrh.w	r2, [ip, r3]
 8005202:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005206:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800520a:	b292      	uxth	r2, r2
 800520c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005210:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005214:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8005218:	b292      	uxth	r2, r2
 800521a:	4410      	add	r0, r2
 800521c:	5ac2      	ldrh	r2, [r0, r3]
 800521e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005222:	52c2      	strh	r2, [r0, r3]
 8005224:	5ac2      	ldrh	r2, [r0, r3]
 8005226:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800522a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800522e:	b292      	uxth	r2, r2
 8005230:	52c2      	strh	r2, [r0, r3]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
 8005232:	4620      	mov	r0, r4
 8005234:	f8d4 32f8 	ldr.w	r3, [r4, #760]	@ 0x2f8
 8005238:	4798      	blx	r3
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800523a:	f1b8 0f00 	cmp.w	r8, #0
 800523e:	f000 80f5 	beq.w	800542c <HAL_PCD_IRQHandler+0x770>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005242:	2328      	movs	r3, #40	@ 0x28
 8005244:	fb03 4307 	mla	r3, r3, r7, r4
 8005248:	6822      	ldr	r2, [r4, #0]
 800524a:	7c19      	ldrb	r1, [r3, #16]
 800524c:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8005250:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	0c1b      	lsrs	r3, r3, #16
 800525c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005264:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8005268:	e0e0      	b.n	800542c <HAL_PCD_IRQHandler+0x770>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800526a:	2b01      	cmp	r3, #1
 800526c:	d1e1      	bne.n	8005232 <HAL_PCD_IRQHandler+0x576>
 800526e:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8005272:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8005276:	fa1f fe8e 	uxth.w	lr, lr
 800527a:	44f4      	add	ip, lr
 800527c:	010b      	lsls	r3, r1, #4
 800527e:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005282:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8005286:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 800528a:	fa1f fc8c 	uxth.w	ip, ip
 800528e:	4460      	add	r0, ip
 8005290:	e7ce      	b.n	8005230 <HAL_PCD_IRQHandler+0x574>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005292:	f1b8 0f00 	cmp.w	r8, #0
 8005296:	d00d      	beq.n	80052b4 <HAL_PCD_IRQHandler+0x5f8>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005298:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800529c:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80052a0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80052a4:	0412      	lsls	r2, r2, #16
 80052a6:	0c12      	lsrs	r2, r2, #16
 80052a8:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 80052ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052b0:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80052b4:	f04f 0828 	mov.w	r8, #40	@ 0x28
 80052b8:	fb08 4807 	mla	r8, r8, r7, r4
 80052bc:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 80052c0:	2a01      	cmp	r2, #1
 80052c2:	f040 80b3 	bne.w	800542c <HAL_PCD_IRQHandler+0x770>
        ep->xfer_buff += TxPctSize;
 80052c6:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80052ca:	eb02 0e0c 	add.w	lr, r2, ip
 80052ce:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80052d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d4:	4462      	add	r2, ip
 80052d6:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80052d8:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80052dc:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d335      	bcc.n	8005350 <HAL_PCD_IRQHandler+0x694>
          ep->xfer_len_db -= len;
 80052e4:	1a9b      	subs	r3, r3, r2
 80052e6:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80052ea:	2328      	movs	r3, #40	@ 0x28
 80052ec:	fb03 4307 	mla	r3, r3, r7, r4
 80052f0:	f893 c011 	ldrb.w	ip, [r3, #17]
 80052f4:	b293      	uxth	r3, r2
 80052f6:	f1bc 0f00 	cmp.w	ip, #0
 80052fa:	d145      	bne.n	8005388 <HAL_PCD_IRQHandler+0x6cc>
 80052fc:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 8005300:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8005304:	fa1f f888 	uxth.w	r8, r8
 8005308:	44c4      	add	ip, r8
 800530a:	0109      	lsls	r1, r1, #4
 800530c:	f83c 8001 	ldrh.w	r8, [ip, r1]
 8005310:	2a3e      	cmp	r2, #62	@ 0x3e
 8005312:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005316:	f82c 8001 	strh.w	r8, [ip, r1]
 800531a:	d925      	bls.n	8005368 <HAL_PCD_IRQHandler+0x6ac>
 800531c:	ea4f 1852 	mov.w	r8, r2, lsr #5
 8005320:	06d2      	lsls	r2, r2, #27
 8005322:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8005326:	bf08      	it	eq
 8005328:	f108 38ff 	addeq.w	r8, r8, #4294967295
 800532c:	b292      	uxth	r2, r2
 800532e:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8005332:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005336:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800533a:	b292      	uxth	r2, r2
 800533c:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005340:	2228      	movs	r2, #40	@ 0x28
 8005342:	fb02 4207 	mla	r2, r2, r7, r4
 8005346:	8b12      	ldrh	r2, [r2, #24]

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005348:	4671      	mov	r1, lr
 800534a:	f001 fe8f 	bl	800706c <USB_WritePMA>
 800534e:	e06d      	b.n	800542c <HAL_PCD_IRQHandler+0x770>
        else if (ep->xfer_len_db == 0U)
 8005350:	b91b      	cbnz	r3, 800535a <HAL_PCD_IRQHandler+0x69e>
          len = TxPctSize;
 8005352:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 8005354:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 8005358:	e7c7      	b.n	80052ea <HAL_PCD_IRQHandler+0x62e>
          ep->xfer_fill_db = 0U;
 800535a:	2200      	movs	r2, #0
 800535c:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          ep->xfer_len_db = 0U;
 8005360:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          len = ep->xfer_len_db;
 8005364:	461a      	mov	r2, r3
 8005366:	e7c0      	b.n	80052ea <HAL_PCD_IRQHandler+0x62e>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005368:	b912      	cbnz	r2, 8005370 <HAL_PCD_IRQHandler+0x6b4>
 800536a:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800536e:	e7e0      	b.n	8005332 <HAL_PCD_IRQHandler+0x676>
 8005370:	ea4f 0852 	mov.w	r8, r2, lsr #1
 8005374:	07d2      	lsls	r2, r2, #31
 8005376:	f83c 2001 	ldrh.w	r2, [ip, r1]
 800537a:	bf48      	it	mi
 800537c:	f108 0801 	addmi.w	r8, r8, #1
 8005380:	b292      	uxth	r2, r2
 8005382:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 8005386:	e7d8      	b.n	800533a <HAL_PCD_IRQHandler+0x67e>
 8005388:	f1bc 0f01 	cmp.w	ip, #1
 800538c:	d1d8      	bne.n	8005340 <HAL_PCD_IRQHandler+0x684>
 800538e:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8005392:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8005396:	fa1f fc8c 	uxth.w	ip, ip
 800539a:	4462      	add	r2, ip
 800539c:	0109      	lsls	r1, r1, #4
 800539e:	5253      	strh	r3, [r2, r1]
 80053a0:	e7ce      	b.n	8005340 <HAL_PCD_IRQHandler+0x684>
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053a2:	f10c 0c06 	add.w	ip, ip, #6
 80053a6:	f839 c01c 	ldrh.w	ip, [r9, ip, lsl #1]
 80053aa:	fa1f f888 	uxth.w	r8, r8
    if (ep->xfer_len >= TxPctSize)
 80053ae:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80053b2:	4594      	cmp	ip, r2
      ep->xfer_len = 0U;
 80053b4:	bf8c      	ite	hi
 80053b6:	4672      	movhi	r2, lr
      ep->xfer_len -= TxPctSize;
 80053b8:	eba2 020c 	subls.w	r2, r2, ip
 80053bc:	629a      	str	r2, [r3, #40]	@ 0x28
    if (ep->xfer_len == 0U)
 80053be:	2a00      	cmp	r2, #0
 80053c0:	d15e      	bne.n	8005480 <HAL_PCD_IRQHandler+0x7c4>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053c2:	2328      	movs	r3, #40	@ 0x28
 80053c4:	fb03 4307 	mla	r3, r3, r7, r4
 80053c8:	7c5b      	ldrb	r3, [r3, #17]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d144      	bne.n	8005458 <HAL_PCD_IRQHandler+0x79c>
 80053ce:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80053d2:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 80053d6:	b292      	uxth	r2, r2
 80053d8:	010b      	lsls	r3, r1, #4
 80053da:	4494      	add	ip, r2
 80053dc:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80053e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80053e4:	f82c 2003 	strh.w	r2, [ip, r3]
 80053e8:	f83c 2003 	ldrh.w	r2, [ip, r3]
 80053ec:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80053f0:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80053f4:	b292      	uxth	r2, r2
 80053f6:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80053fa:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 80053fe:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8005402:	b292      	uxth	r2, r2
 8005404:	4410      	add	r0, r2
 8005406:	5ac2      	ldrh	r2, [r0, r3]
 8005408:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800540c:	52c2      	strh	r2, [r0, r3]
 800540e:	5ac2      	ldrh	r2, [r0, r3]
 8005410:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005414:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005418:	b292      	uxth	r2, r2
 800541a:	52c2      	strh	r2, [r0, r3]
      hpcd->DataInStageCallback(hpcd, ep->num);
 800541c:	4620      	mov	r0, r4
 800541e:	f8d4 32f8 	ldr.w	r3, [r4, #760]	@ 0x2f8
 8005422:	4798      	blx	r3
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005424:	f1b8 0f00 	cmp.w	r8, #0
 8005428:	f43f af0b 	beq.w	8005242 <HAL_PCD_IRQHandler+0x586>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800542c:	2328      	movs	r3, #40	@ 0x28
 800542e:	fb03 4307 	mla	r3, r3, r7, r4
 8005432:	6822      	ldr	r2, [r4, #0]
 8005434:	7c19      	ldrb	r1, [r3, #16]
 8005436:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800543a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800543e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005442:	041b      	lsls	r3, r3, #16
 8005444:	0c1b      	lsrs	r3, r3, #16
 8005446:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
 800544a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800544e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005452:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]

  return HAL_OK;
 8005456:	e43e      	b.n	8004cd6 <HAL_PCD_IRQHandler+0x1a>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005458:	2b01      	cmp	r3, #1
 800545a:	d1df      	bne.n	800541c <HAL_PCD_IRQHandler+0x760>
 800545c:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
 8005460:	f200 4c04 	addw	ip, r0, #1028	@ 0x404
 8005464:	fa1f fe8e 	uxth.w	lr, lr
 8005468:	44f4      	add	ip, lr
 800546a:	010b      	lsls	r3, r1, #4
 800546c:	f82c 2003 	strh.w	r2, [ip, r3]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005470:	f8b0 c050 	ldrh.w	ip, [r0, #80]	@ 0x50
 8005474:	f200 400c 	addw	r0, r0, #1036	@ 0x40c
 8005478:	fa1f fc8c 	uxth.w	ip, ip
 800547c:	4460      	add	r0, ip
 800547e:	e7cc      	b.n	800541a <HAL_PCD_IRQHandler+0x75e>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005480:	f1b8 0f00 	cmp.w	r8, #0
 8005484:	d10d      	bne.n	80054a2 <HAL_PCD_IRQHandler+0x7e6>
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005486:	f830 2021 	ldrh.w	r2, [r0, r1, lsl #2]
 800548a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 800548e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005492:	0412      	lsls	r2, r2, #16
 8005494:	0c12      	lsrs	r2, r2, #16
 8005496:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 800549a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800549e:	f820 2021 	strh.w	r2, [r0, r1, lsl #2]
      if (ep->xfer_fill_db == 1U)
 80054a2:	f04f 0828 	mov.w	r8, #40	@ 0x28
 80054a6:	fb08 4807 	mla	r8, r8, r7, r4
 80054aa:	f898 2034 	ldrb.w	r2, [r8, #52]	@ 0x34
 80054ae:	2a01      	cmp	r2, #1
 80054b0:	d1bc      	bne.n	800542c <HAL_PCD_IRQHandler+0x770>
        ep->xfer_buff += TxPctSize;
 80054b2:	f8d8 2024 	ldr.w	r2, [r8, #36]	@ 0x24
 80054b6:	eb02 0e0c 	add.w	lr, r2, ip
 80054ba:	f8c8 e024 	str.w	lr, [r8, #36]	@ 0x24
        ep->xfer_count += TxPctSize;
 80054be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c0:	4462      	add	r2, ip
 80054c2:	62da      	str	r2, [r3, #44]	@ 0x2c
        if (ep->xfer_len_db >= ep->maxpacket)
 80054c4:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80054c8:	f8d8 2020 	ldr.w	r2, [r8, #32]
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d332      	bcc.n	8005536 <HAL_PCD_IRQHandler+0x87a>
          ep->xfer_len_db -= len;
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	f8c8 3030 	str.w	r3, [r8, #48]	@ 0x30
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80054d6:	2328      	movs	r3, #40	@ 0x28
 80054d8:	fb03 4307 	mla	r3, r3, r7, r4
 80054dc:	f893 c011 	ldrb.w	ip, [r3, #17]
 80054e0:	b293      	uxth	r3, r2
 80054e2:	f1bc 0f00 	cmp.w	ip, #0
 80054e6:	d142      	bne.n	800556e <HAL_PCD_IRQHandler+0x8b2>
 80054e8:	f8b0 8050 	ldrh.w	r8, [r0, #80]	@ 0x50
 80054ec:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 80054f0:	fa1f f888 	uxth.w	r8, r8
 80054f4:	44c4      	add	ip, r8
 80054f6:	0109      	lsls	r1, r1, #4
 80054f8:	f83c 8001 	ldrh.w	r8, [ip, r1]
 80054fc:	2a3e      	cmp	r2, #62	@ 0x3e
 80054fe:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005502:	f82c 8001 	strh.w	r8, [ip, r1]
 8005506:	d922      	bls.n	800554e <HAL_PCD_IRQHandler+0x892>
 8005508:	ea4f 1852 	mov.w	r8, r2, lsr #5
 800550c:	06d2      	lsls	r2, r2, #27
 800550e:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8005512:	bf08      	it	eq
 8005514:	f108 38ff 	addeq.w	r8, r8, #4294967295
 8005518:	b292      	uxth	r2, r2
 800551a:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800551e:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8005522:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 8005526:	b292      	uxth	r2, r2
 8005528:	f82c 2001 	strh.w	r2, [ip, r1]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800552c:	2228      	movs	r2, #40	@ 0x28
 800552e:	fb02 4207 	mla	r2, r2, r7, r4
 8005532:	8b52      	ldrh	r2, [r2, #26]
 8005534:	e708      	b.n	8005348 <HAL_PCD_IRQHandler+0x68c>
        else if (ep->xfer_len_db == 0U)
 8005536:	b91b      	cbnz	r3, 8005540 <HAL_PCD_IRQHandler+0x884>
          len = TxPctSize;
 8005538:	4662      	mov	r2, ip
          ep->xfer_fill_db = 0U;
 800553a:	f888 3034 	strb.w	r3, [r8, #52]	@ 0x34
 800553e:	e7ca      	b.n	80054d6 <HAL_PCD_IRQHandler+0x81a>
          ep->xfer_len_db = 0U;
 8005540:	2200      	movs	r2, #0
 8005542:	f8c8 2030 	str.w	r2, [r8, #48]	@ 0x30
          ep->xfer_fill_db = 0;
 8005546:	f888 2034 	strb.w	r2, [r8, #52]	@ 0x34
          len = ep->xfer_len_db;
 800554a:	461a      	mov	r2, r3
 800554c:	e7c3      	b.n	80054d6 <HAL_PCD_IRQHandler+0x81a>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800554e:	b912      	cbnz	r2, 8005556 <HAL_PCD_IRQHandler+0x89a>
 8005550:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8005554:	e7e3      	b.n	800551e <HAL_PCD_IRQHandler+0x862>
 8005556:	ea4f 0852 	mov.w	r8, r2, lsr #1
 800555a:	07d2      	lsls	r2, r2, #31
 800555c:	f83c 2001 	ldrh.w	r2, [ip, r1]
 8005560:	bf48      	it	mi
 8005562:	f108 0801 	addmi.w	r8, r8, #1
 8005566:	b292      	uxth	r2, r2
 8005568:	ea42 2288 	orr.w	r2, r2, r8, lsl #10
 800556c:	e7db      	b.n	8005526 <HAL_PCD_IRQHandler+0x86a>
 800556e:	f1bc 0f01 	cmp.w	ip, #1
 8005572:	d1db      	bne.n	800552c <HAL_PCD_IRQHandler+0x870>
 8005574:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8005578:	f200 4c0c 	addw	ip, r0, #1036	@ 0x40c
 800557c:	b292      	uxth	r2, r2
 800557e:	4494      	add	ip, r2
 8005580:	010a      	lsls	r2, r1, #4
 8005582:	f82c 3002 	strh.w	r3, [ip, r2]
 8005586:	e7d1      	b.n	800552c <HAL_PCD_IRQHandler+0x870>
  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005588:	0546      	lsls	r6, r0, #21
 800558a:	d513      	bpl.n	80055b4 <HAL_PCD_IRQHandler+0x8f8>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800558c:	6822      	ldr	r2, [r4, #0]
    hpcd->ResetCallback(hpcd);
 800558e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005590:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005594:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005598:	041b      	lsls	r3, r3, #16
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->ResetCallback(hpcd);
 80055a0:	f8d4 32e0 	ldr.w	r3, [r4, #736]	@ 0x2e0
 80055a4:	4798      	blx	r3
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80055a6:	4629      	mov	r1, r5
 80055a8:	4620      	mov	r0, r4
}
 80055aa:	b005      	add	sp, #20
 80055ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80055b0:	f7ff bb70 	b.w	8004c94 <HAL_PCD_SetAddress>
  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80055b4:	0441      	lsls	r1, r0, #17
 80055b6:	d50a      	bpl.n	80055ce <HAL_PCD_IRQHandler+0x912>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80055be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80055c2:	041b      	lsls	r3, r3, #16
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    return;
 80055ca:	f7ff bb89 	b.w	8004ce0 <HAL_PCD_IRQHandler+0x24>
  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80055ce:	0482      	lsls	r2, r0, #18
 80055d0:	d505      	bpl.n	80055de <HAL_PCD_IRQHandler+0x922>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80055d2:	6822      	ldr	r2, [r4, #0]
 80055d4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80055d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055dc:	e7f1      	b.n	80055c2 <HAL_PCD_IRQHandler+0x906>
  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80055de:	04c3      	lsls	r3, r0, #19
 80055e0:	d51a      	bpl.n	8005618 <HAL_PCD_IRQHandler+0x95c>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80055e2:	6822      	ldr	r2, [r4, #0]
    hpcd->ResumeCallback(hpcd);
 80055e4:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80055e6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80055ea:	f023 0304 	bic.w	r3, r3, #4
 80055ee:	041b      	lsls	r3, r3, #16
 80055f0:	0c1b      	lsrs	r3, r3, #16
 80055f2:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80055f6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	@ 0x40
 80055fa:	f023 0308 	bic.w	r3, r3, #8
 80055fe:	041b      	lsls	r3, r3, #16
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    hpcd->ResumeCallback(hpcd);
 8005606:	f8d4 32e8 	ldr.w	r3, [r4, #744]	@ 0x2e8
 800560a:	4798      	blx	r3
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 8005612:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005616:	e7d4      	b.n	80055c2 <HAL_PCD_IRQHandler+0x906>
  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005618:	0507      	lsls	r7, r0, #20
 800561a:	d54a      	bpl.n	80056b2 <HAL_PCD_IRQHandler+0x9f6>
 800561c:	4668      	mov	r0, sp
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	4606      	mov	r6, r0
 8005622:	4619      	mov	r1, r3
 8005624:	461a      	mov	r2, r3
 8005626:	f103 0520 	add.w	r5, r3, #32
 800562a:	f832 7b04 	ldrh.w	r7, [r2], #4
    for (i = 0U; i < 8U; i++)
 800562e:	4295      	cmp	r5, r2
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8005630:	f826 7b02 	strh.w	r7, [r6], #2
    for (i = 0U; i < 8U; i++)
 8005634:	d1f9      	bne.n	800562a <HAL_PCD_IRQHandler+0x96e>
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8005636:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800563a:	b292      	uxth	r2, r2
 800563c:	f042 0201 	orr.w	r2, r2, #1
 8005640:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8005644:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	0412      	lsls	r2, r2, #16
 800564e:	0c12      	lsrs	r2, r2, #16
 8005650:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8005654:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8005658:	0556      	lsls	r6, r2, #21
 800565a:	d5fb      	bpl.n	8005654 <HAL_PCD_IRQHandler+0x998>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800565c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 8005660:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005664:	0412      	lsls	r2, r2, #16
 8005666:	0c12      	lsrs	r2, r2, #16
 8005668:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800566c:	f830 2b02 	ldrh.w	r2, [r0], #2
 8005670:	f821 2b04 	strh.w	r2, [r1], #4
    for (i = 0U; i < 8U; i++)
 8005674:	428d      	cmp	r5, r1
 8005676:	d1f9      	bne.n	800566c <HAL_PCD_IRQHandler+0x9b0>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005678:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800567c:	b292      	uxth	r2, r2
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005686:	f8b3 2044 	ldrh.w	r2, [r3, #68]	@ 0x44
 800568a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800568e:	0412      	lsls	r2, r2, #16
 8005690:	0c12      	lsrs	r2, r2, #16
 8005692:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8005696:	f8b3 2040 	ldrh.w	r2, [r3, #64]	@ 0x40
 800569a:	b292      	uxth	r2, r2
 800569c:	f042 0204 	orr.w	r2, r2, #4
 80056a0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->SuspendCallback(hpcd);
 80056a4:	f8d4 32e4 	ldr.w	r3, [r4, #740]	@ 0x2e4
    hpcd->SOFCallback(hpcd);
 80056a8:	4620      	mov	r0, r4
}
 80056aa:	b005      	add	sp, #20
 80056ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    hpcd->SOFCallback(hpcd);
 80056b0:	4718      	bx	r3
  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80056b2:	0582      	lsls	r2, r0, #22
 80056b4:	d50b      	bpl.n	80056ce <HAL_PCD_IRQHandler+0xa12>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80056bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056c0:	041b      	lsls	r3, r3, #16
 80056c2:	0c1b      	lsrs	r3, r3, #16
 80056c4:	f8a2 3044 	strh.w	r3, [r2, #68]	@ 0x44
    hpcd->SOFCallback(hpcd);
 80056c8:	f8d4 32d8 	ldr.w	r3, [r4, #728]	@ 0x2d8
 80056cc:	e7ec      	b.n	80056a8 <HAL_PCD_IRQHandler+0x9ec>
  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80056ce:	05c3      	lsls	r3, r0, #23
 80056d0:	f57f ab06 	bpl.w	8004ce0 <HAL_PCD_IRQHandler+0x24>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80056d4:	6822      	ldr	r2, [r4, #0]
 80056d6:	f8b2 3044 	ldrh.w	r3, [r2, #68]	@ 0x44
 80056da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056de:	e770      	b.n	80055c2 <HAL_PCD_IRQHandler+0x906>

080056e0 <HAL_PCD_EP_Open>:
{
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	2428      	movs	r4, #40	@ 0x28
 80056e4:	4605      	mov	r5, r0
 80056e6:	f001 0007 	and.w	r0, r1, #7
 80056ea:	4344      	muls	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 80056ec:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056f0:	bf14      	ite	ne
 80056f2:	f104 0110 	addne.w	r1, r4, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056f6:	f504 71a8 	addeq.w	r1, r4, #336	@ 0x150
 80056fa:	eb05 0604 	add.w	r6, r5, r4
    ep->is_in = 1U;
 80056fe:	bf15      	itete	ne
 8005700:	2401      	movne	r4, #1
    ep->is_in = 0U;
 8005702:	2400      	moveq	r4, #0
    ep->is_in = 1U;
 8005704:	7474      	strbne	r4, [r6, #17]
    ep->is_in = 0U;
 8005706:	f886 4151 	strbeq.w	r4, [r6, #337]	@ 0x151
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800570a:	bf14      	ite	ne
 800570c:	1949      	addne	r1, r1, r5
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800570e:	1949      	addeq	r1, r1, r5
  if (ep_type == EP_TYPE_BULK)
 8005710:	2b02      	cmp	r3, #2
  ep->type = ep_type;
 8005712:	70cb      	strb	r3, [r1, #3]
    ep->data_pid_start = 0U;
 8005714:	bf08      	it	eq
 8005716:	2300      	moveq	r3, #0
  ep->num = ep_addr & EP_ADDR_MSK;
 8005718:	7008      	strb	r0, [r1, #0]
    ep->data_pid_start = 0U;
 800571a:	bf08      	it	eq
 800571c:	710b      	strbeq	r3, [r1, #4]
  ep->maxpacket = ep_mps;
 800571e:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8005720:	f895 3290 	ldrb.w	r3, [r5, #656]	@ 0x290
 8005724:	2b01      	cmp	r3, #1
 8005726:	d009      	beq.n	800573c <HAL_PCD_EP_Open+0x5c>
 8005728:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800572a:	6828      	ldr	r0, [r5, #0]
  __HAL_LOCK(hpcd);
 800572c:	f885 3290 	strb.w	r3, [r5, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005730:	f001 f9f0 	bl	8006b14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005734:	2000      	movs	r0, #0
 8005736:	f885 0290 	strb.w	r0, [r5, #656]	@ 0x290
}
 800573a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 800573c:	2002      	movs	r0, #2
 800573e:	e7fc      	b.n	800573a <HAL_PCD_EP_Open+0x5a>

08005740 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 8005740:	2328      	movs	r3, #40	@ 0x28
 8005742:	f001 0207 	and.w	r2, r1, #7
 8005746:	4353      	muls	r3, r2
 8005748:	f011 0f80 	tst.w	r1, #128	@ 0x80
{
 800574c:	b510      	push	{r4, lr}
 800574e:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005750:	bf18      	it	ne
 8005752:	f103 0110 	addne.w	r1, r3, #16
 8005756:	4418      	add	r0, r3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005758:	bf0b      	itete	eq
 800575a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
    ep->is_in = 1U;
 800575e:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8005760:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005762:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005764:	bf0a      	itet	eq
 8005766:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 8005768:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 800576a:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->num = ep_addr & EP_ADDR_MSK;
 800576e:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 8005770:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 8005774:	2b01      	cmp	r3, #1
 8005776:	d009      	beq.n	800578c <HAL_PCD_EP_Close+0x4c>
 8005778:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800577a:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800577c:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005780:	f001 fb28 	bl	8006dd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005784:	2000      	movs	r0, #0
 8005786:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800578a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800578c:	2002      	movs	r0, #2
 800578e:	e7fc      	b.n	800578a <HAL_PCD_EP_Close+0x4a>

08005790 <HAL_PCD_EP_Receive>:
{
 8005790:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 8005792:	2428      	movs	r4, #40	@ 0x28
  ep->xfer_count = 0U;
 8005794:	2600      	movs	r6, #0
 8005796:	f001 0107 	and.w	r1, r1, #7
  ep->xfer_buff = pBuf;
 800579a:	434c      	muls	r4, r1
 800579c:	1905      	adds	r5, r0, r4
  ep->num = ep_addr & EP_ADDR_MSK;
 800579e:	f885 1150 	strb.w	r1, [r5, #336]	@ 0x150
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057a2:	f504 71a8 	add.w	r1, r4, #336	@ 0x150
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057a6:	4401      	add	r1, r0
  ep->xfer_len = len;
 80057a8:	e9c5 2359 	strd	r2, r3, [r5, #356]	@ 0x164
  ep->xfer_count = 0U;
 80057ac:	f8c5 616c 	str.w	r6, [r5, #364]	@ 0x16c
  ep->is_in = 0U;
 80057b0:	f885 6151 	strb.w	r6, [r5, #337]	@ 0x151
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057b4:	6800      	ldr	r0, [r0, #0]
 80057b6:	f001 fc69 	bl	800708c <USB_EPStartXfer>
}
 80057ba:	4630      	mov	r0, r6
 80057bc:	bd70      	pop	{r4, r5, r6, pc}

080057be <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057be:	2328      	movs	r3, #40	@ 0x28
 80057c0:	f001 0107 	and.w	r1, r1, #7
 80057c4:	fb03 0001 	mla	r0, r3, r1, r0
}
 80057c8:	f8d0 016c 	ldr.w	r0, [r0, #364]	@ 0x16c
 80057cc:	4770      	bx	lr

080057ce <HAL_PCD_EP_Transmit>:
{
 80057ce:	b570      	push	{r4, r5, r6, lr}
 80057d0:	2528      	movs	r5, #40	@ 0x28
 80057d2:	f001 0107 	and.w	r1, r1, #7
 80057d6:	434d      	muls	r5, r1
  ep->xfer_buff = pBuf;
 80057d8:	1944      	adds	r4, r0, r5
  ep->xfer_count = 0U;
 80057da:	2600      	movs	r6, #0
  ep->xfer_len = len;
 80057dc:	e9c4 2309 	strd	r2, r3, [r4, #36]	@ 0x24
  ep->xfer_fill_db = 1U;
 80057e0:	2201      	movs	r2, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 80057e2:	7421      	strb	r1, [r4, #16]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057e4:	f105 0110 	add.w	r1, r5, #16
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057e8:	4401      	add	r1, r0
  ep->xfer_fill_db = 1U;
 80057ea:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  ep->xfer_len_db = len;
 80057ee:	6323      	str	r3, [r4, #48]	@ 0x30
  ep->xfer_count = 0U;
 80057f0:	62e6      	str	r6, [r4, #44]	@ 0x2c
  ep->is_in = 1U;
 80057f2:	7462      	strb	r2, [r4, #17]
  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80057f4:	6800      	ldr	r0, [r0, #0]
 80057f6:	f001 fc49 	bl	800708c <USB_EPStartXfer>
}
 80057fa:	4630      	mov	r0, r6
 80057fc:	bd70      	pop	{r4, r5, r6, pc}

080057fe <HAL_PCD_EP_SetStall>:
{
 80057fe:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005800:	7903      	ldrb	r3, [r0, #4]
 8005802:	f001 0507 	and.w	r5, r1, #7
 8005806:	42ab      	cmp	r3, r5
{
 8005808:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800580a:	d32a      	bcc.n	8005862 <HAL_PCD_EP_SetStall+0x64>
  if ((0x80U & ep_addr) == 0x80U)
 800580c:	f011 0f80 	tst.w	r1, #128	@ 0x80
 8005810:	f04f 0328 	mov.w	r3, #40	@ 0x28
 8005814:	d01c      	beq.n	8005850 <HAL_PCD_EP_SetStall+0x52>
    ep->is_in = 1U;
 8005816:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005818:	436b      	muls	r3, r5
 800581a:	f103 0110 	add.w	r1, r3, #16
    ep->is_in = 1U;
 800581e:	4403      	add	r3, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005820:	4401      	add	r1, r0
    ep->is_in = 1U;
 8005822:	745a      	strb	r2, [r3, #17]
  ep->is_stall = 1U;
 8005824:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 8005826:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8005828:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800582a:	f894 2290 	ldrb.w	r2, [r4, #656]	@ 0x290
 800582e:	429a      	cmp	r2, r3
 8005830:	d019      	beq.n	8005866 <HAL_PCD_EP_SetStall+0x68>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005832:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 8005834:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005838:	f001 fb9f 	bl	8006f7a <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800583c:	b925      	cbnz	r5, 8005848 <HAL_PCD_EP_SetStall+0x4a>
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800583e:	6820      	ldr	r0, [r4, #0]
 8005840:	f504 7126 	add.w	r1, r4, #664	@ 0x298
 8005844:	f001 fc10 	bl	8007068 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd);
 8005848:	2000      	movs	r0, #0
 800584a:	f884 0290 	strb.w	r0, [r4, #656]	@ 0x290
}
 800584e:	bd38      	pop	{r3, r4, r5, pc}
    ep->is_in = 0U;
 8005850:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 8005852:	434b      	muls	r3, r1
 8005854:	f503 71a8 	add.w	r1, r3, #336	@ 0x150
    ep->is_in = 0U;
 8005858:	4403      	add	r3, r0
    ep = &hpcd->OUT_ep[ep_addr];
 800585a:	4401      	add	r1, r0
    ep->is_in = 0U;
 800585c:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
 8005860:	e7e0      	b.n	8005824 <HAL_PCD_EP_SetStall+0x26>
    return HAL_ERROR;
 8005862:	2001      	movs	r0, #1
 8005864:	e7f3      	b.n	800584e <HAL_PCD_EP_SetStall+0x50>
  __HAL_LOCK(hpcd);
 8005866:	2002      	movs	r0, #2
 8005868:	e7f1      	b.n	800584e <HAL_PCD_EP_SetStall+0x50>

0800586a <HAL_PCD_EP_ClrStall>:
{
 800586a:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800586c:	7902      	ldrb	r2, [r0, #4]
 800586e:	f001 030f 	and.w	r3, r1, #15
 8005872:	429a      	cmp	r2, r3
{
 8005874:	4604      	mov	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005876:	d326      	bcc.n	80058c6 <HAL_PCD_EP_ClrStall+0x5c>
  if ((0x80U & ep_addr) == 0x80U)
 8005878:	2328      	movs	r3, #40	@ 0x28
 800587a:	f001 0207 	and.w	r2, r1, #7
 800587e:	4353      	muls	r3, r2
 8005880:	f011 0f80 	tst.w	r1, #128	@ 0x80
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005884:	bf14      	ite	ne
 8005886:	f103 0110 	addne.w	r1, r3, #16
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800588a:	f503 71a8 	addeq.w	r1, r3, #336	@ 0x150
 800588e:	4418      	add	r0, r3
  ep->is_stall = 0U;
 8005890:	f04f 0500 	mov.w	r5, #0
    ep->is_in = 1U;
 8005894:	bf15      	itete	ne
 8005896:	2301      	movne	r3, #1
    ep->is_in = 0U;
 8005898:	2300      	moveq	r3, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800589a:	1909      	addne	r1, r1, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800589c:	1909      	addeq	r1, r1, r4
    ep->is_in = 1U;
 800589e:	bf14      	ite	ne
 80058a0:	7443      	strbne	r3, [r0, #17]
    ep->is_in = 0U;
 80058a2:	f880 3151 	strbeq.w	r3, [r0, #337]	@ 0x151
  ep->is_stall = 0U;
 80058a6:	708d      	strb	r5, [r1, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80058a8:	700a      	strb	r2, [r1, #0]
  __HAL_LOCK(hpcd);
 80058aa:	f894 3290 	ldrb.w	r3, [r4, #656]	@ 0x290
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d00b      	beq.n	80058ca <HAL_PCD_EP_ClrStall+0x60>
 80058b2:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80058b6:	f884 3290 	strb.w	r3, [r4, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058ba:	f001 fb7e 	bl	8006fba <USB_EPClearStall>
  return HAL_OK;
 80058be:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 80058c0:	f884 5290 	strb.w	r5, [r4, #656]	@ 0x290
}
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80058c6:	2001      	movs	r0, #1
 80058c8:	e7fc      	b.n	80058c4 <HAL_PCD_EP_ClrStall+0x5a>
  __HAL_LOCK(hpcd);
 80058ca:	2002      	movs	r0, #2
 80058cc:	e7fa      	b.n	80058c4 <HAL_PCD_EP_ClrStall+0x5a>

080058ce <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80058ce:	b510      	push	{r4, lr}
 80058d0:	2428      	movs	r4, #40	@ 0x28
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80058d2:	f011 0f80 	tst.w	r1, #128	@ 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058d6:	bf1b      	ittet	ne
 80058d8:	f001 0107 	andne.w	r1, r1, #7
 80058dc:	fb04 0001 	mlane	r0, r4, r1, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058e0:	fb04 0001 	mlaeq	r0, r4, r1, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058e4:	3010      	addne	r0, #16
    ep = &hpcd->OUT_ep[ep_addr];
 80058e6:	bf08      	it	eq
 80058e8:	f500 70a8 	addeq.w	r0, r0, #336	@ 0x150
  if (ep_kind == PCD_SNG_BUF)
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80058ec:	b299      	uxth	r1, r3
  if (ep_kind == PCD_SNG_BUF)
 80058ee:	b91a      	cbnz	r2, 80058f8 <HAL_PCDEx_PMAConfig+0x2a>
    ep->doublebuffer = 0U;
 80058f0:	7302      	strb	r2, [r0, #12]
    ep->pmaadress = (uint16_t)pmaadress;
 80058f2:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 80058f4:	2000      	movs	r0, #0
 80058f6:	bd10      	pop	{r4, pc}
    ep->doublebuffer = 1U;
 80058f8:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80058fa:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80058fc:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80058fe:	e7f9      	b.n	80058f4 <HAL_PCDEx_PMAConfig+0x26>

08005900 <HAL_PCDEx_SetConnectionState>:
  UNUSED(hpcd);
  UNUSED(state);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PCDEx_SetConnectionState could be implemented in the user file
   */
}
 8005900:	4770      	bx	lr
	...

08005904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005904:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005908:	4605      	mov	r5, r0
 800590a:	b338      	cbz	r0, 800595c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800590c:	6803      	ldr	r3, [r0, #0]
 800590e:	07db      	lsls	r3, r3, #31
 8005910:	d410      	bmi.n	8005934 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005912:	682b      	ldr	r3, [r5, #0]
 8005914:	079f      	lsls	r7, r3, #30
 8005916:	d45e      	bmi.n	80059d6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005918:	682b      	ldr	r3, [r5, #0]
 800591a:	0719      	lsls	r1, r3, #28
 800591c:	f100 8095 	bmi.w	8005a4a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005920:	682b      	ldr	r3, [r5, #0]
 8005922:	075a      	lsls	r2, r3, #29
 8005924:	f100 80c1 	bmi.w	8005aaa <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005928:	69eb      	ldr	r3, [r5, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	f040 812c 	bne.w	8005b88 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8005930:	2000      	movs	r0, #0
 8005932:	e029      	b.n	8005988 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005934:	4c90      	ldr	r4, [pc, #576]	@ (8005b78 <HAL_RCC_OscConfig+0x274>)
 8005936:	6863      	ldr	r3, [r4, #4]
 8005938:	f003 030c 	and.w	r3, r3, #12
 800593c:	2b04      	cmp	r3, #4
 800593e:	d007      	beq.n	8005950 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005940:	6863      	ldr	r3, [r4, #4]
 8005942:	f003 030c 	and.w	r3, r3, #12
 8005946:	2b08      	cmp	r3, #8
 8005948:	d10a      	bne.n	8005960 <HAL_RCC_OscConfig+0x5c>
 800594a:	6863      	ldr	r3, [r4, #4]
 800594c:	03de      	lsls	r6, r3, #15
 800594e:	d507      	bpl.n	8005960 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005950:	6823      	ldr	r3, [r4, #0]
 8005952:	039c      	lsls	r4, r3, #14
 8005954:	d5dd      	bpl.n	8005912 <HAL_RCC_OscConfig+0xe>
 8005956:	686b      	ldr	r3, [r5, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d1da      	bne.n	8005912 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800595c:	2001      	movs	r0, #1
 800595e:	e013      	b.n	8005988 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005960:	686b      	ldr	r3, [r5, #4]
 8005962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005966:	d112      	bne.n	800598e <HAL_RCC_OscConfig+0x8a>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800596e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005970:	f7fc ff30 	bl	80027d4 <HAL_GetTick>
 8005974:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	0398      	lsls	r0, r3, #14
 800597a:	d4ca      	bmi.n	8005912 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800597c:	f7fc ff2a 	bl	80027d4 <HAL_GetTick>
 8005980:	1b80      	subs	r0, r0, r6
 8005982:	2864      	cmp	r0, #100	@ 0x64
 8005984:	d9f7      	bls.n	8005976 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8005986:	2003      	movs	r0, #3
}
 8005988:	b002      	add	sp, #8
 800598a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800598e:	b99b      	cbnz	r3, 80059b8 <HAL_RCC_OscConfig+0xb4>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005996:	6023      	str	r3, [r4, #0]
 8005998:	6823      	ldr	r3, [r4, #0]
 800599a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800599e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80059a0:	f7fc ff18 	bl	80027d4 <HAL_GetTick>
 80059a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	0399      	lsls	r1, r3, #14
 80059aa:	d5b2      	bpl.n	8005912 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059ac:	f7fc ff12 	bl	80027d4 <HAL_GetTick>
 80059b0:	1b80      	subs	r0, r0, r6
 80059b2:	2864      	cmp	r0, #100	@ 0x64
 80059b4:	d9f7      	bls.n	80059a6 <HAL_RCC_OscConfig+0xa2>
 80059b6:	e7e6      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059bc:	6823      	ldr	r3, [r4, #0]
 80059be:	d103      	bne.n	80059c8 <HAL_RCC_OscConfig+0xc4>
 80059c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	e7cf      	b.n	8005968 <HAL_RCC_OscConfig+0x64>
 80059c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059d4:	e7cb      	b.n	800596e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059d6:	4c68      	ldr	r4, [pc, #416]	@ (8005b78 <HAL_RCC_OscConfig+0x274>)
 80059d8:	6863      	ldr	r3, [r4, #4]
 80059da:	f013 0f0c 	tst.w	r3, #12
 80059de:	d007      	beq.n	80059f0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80059e0:	6863      	ldr	r3, [r4, #4]
 80059e2:	f003 030c 	and.w	r3, r3, #12
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d110      	bne.n	8005a0c <HAL_RCC_OscConfig+0x108>
 80059ea:	6863      	ldr	r3, [r4, #4]
 80059ec:	03da      	lsls	r2, r3, #15
 80059ee:	d40d      	bmi.n	8005a0c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059f0:	6823      	ldr	r3, [r4, #0]
 80059f2:	079b      	lsls	r3, r3, #30
 80059f4:	d502      	bpl.n	80059fc <HAL_RCC_OscConfig+0xf8>
 80059f6:	692b      	ldr	r3, [r5, #16]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d1af      	bne.n	800595c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	696a      	ldr	r2, [r5, #20]
 8005a00:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8005a04:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	e785      	b.n	8005918 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a0c:	692a      	ldr	r2, [r5, #16]
 8005a0e:	4b5b      	ldr	r3, [pc, #364]	@ (8005b7c <HAL_RCC_OscConfig+0x278>)
 8005a10:	b16a      	cbz	r2, 8005a2e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8005a12:	2201      	movs	r2, #1
 8005a14:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005a16:	f7fc fedd 	bl	80027d4 <HAL_GetTick>
 8005a1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a1c:	6823      	ldr	r3, [r4, #0]
 8005a1e:	079f      	lsls	r7, r3, #30
 8005a20:	d4ec      	bmi.n	80059fc <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a22:	f7fc fed7 	bl	80027d4 <HAL_GetTick>
 8005a26:	1b80      	subs	r0, r0, r6
 8005a28:	2802      	cmp	r0, #2
 8005a2a:	d9f7      	bls.n	8005a1c <HAL_RCC_OscConfig+0x118>
 8005a2c:	e7ab      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8005a2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005a30:	f7fc fed0 	bl	80027d4 <HAL_GetTick>
 8005a34:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	0798      	lsls	r0, r3, #30
 8005a3a:	f57f af6d 	bpl.w	8005918 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a3e:	f7fc fec9 	bl	80027d4 <HAL_GetTick>
 8005a42:	1b80      	subs	r0, r0, r6
 8005a44:	2802      	cmp	r0, #2
 8005a46:	d9f6      	bls.n	8005a36 <HAL_RCC_OscConfig+0x132>
 8005a48:	e79d      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005a4a:	69aa      	ldr	r2, [r5, #24]
 8005a4c:	4e4a      	ldr	r6, [pc, #296]	@ (8005b78 <HAL_RCC_OscConfig+0x274>)
 8005a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8005b7c <HAL_RCC_OscConfig+0x278>)
 8005a50:	b1e2      	cbz	r2, 8005a8c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8005a52:	2201      	movs	r2, #1
 8005a54:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8005a58:	f7fc febc 	bl	80027d4 <HAL_GetTick>
 8005a5c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a5e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005a60:	079b      	lsls	r3, r3, #30
 8005a62:	d50d      	bpl.n	8005a80 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005a64:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8005a68:	4b45      	ldr	r3, [pc, #276]	@ (8005b80 <HAL_RCC_OscConfig+0x27c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a70:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8005a72:	bf00      	nop
  }
  while (Delay --);
 8005a74:	9b01      	ldr	r3, [sp, #4]
 8005a76:	1e5a      	subs	r2, r3, #1
 8005a78:	9201      	str	r2, [sp, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1f9      	bne.n	8005a72 <HAL_RCC_OscConfig+0x16e>
 8005a7e:	e74f      	b.n	8005920 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a80:	f7fc fea8 	bl	80027d4 <HAL_GetTick>
 8005a84:	1b00      	subs	r0, r0, r4
 8005a86:	2802      	cmp	r0, #2
 8005a88:	d9e9      	bls.n	8005a5e <HAL_RCC_OscConfig+0x15a>
 8005a8a:	e77c      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8005a8c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8005a90:	f7fc fea0 	bl	80027d4 <HAL_GetTick>
 8005a94:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a96:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8005a98:	079f      	lsls	r7, r3, #30
 8005a9a:	f57f af41 	bpl.w	8005920 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a9e:	f7fc fe99 	bl	80027d4 <HAL_GetTick>
 8005aa2:	1b00      	subs	r0, r0, r4
 8005aa4:	2802      	cmp	r0, #2
 8005aa6:	d9f6      	bls.n	8005a96 <HAL_RCC_OscConfig+0x192>
 8005aa8:	e76d      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005aaa:	4c33      	ldr	r4, [pc, #204]	@ (8005b78 <HAL_RCC_OscConfig+0x274>)
 8005aac:	69e3      	ldr	r3, [r4, #28]
 8005aae:	00d8      	lsls	r0, r3, #3
 8005ab0:	d424      	bmi.n	8005afc <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8005ab2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ab4:	69e3      	ldr	r3, [r4, #28]
 8005ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005aba:	61e3      	str	r3, [r4, #28]
 8005abc:	69e3      	ldr	r3, [r4, #28]
 8005abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ac2:	9300      	str	r3, [sp, #0]
 8005ac4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac6:	4e2f      	ldr	r6, [pc, #188]	@ (8005b84 <HAL_RCC_OscConfig+0x280>)
 8005ac8:	6833      	ldr	r3, [r6, #0]
 8005aca:	05d9      	lsls	r1, r3, #23
 8005acc:	d518      	bpl.n	8005b00 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ace:	68eb      	ldr	r3, [r5, #12]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d126      	bne.n	8005b22 <HAL_RCC_OscConfig+0x21e>
 8005ad4:	6a23      	ldr	r3, [r4, #32]
 8005ad6:	f043 0301 	orr.w	r3, r3, #1
 8005ada:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005adc:	f7fc fe7a 	bl	80027d4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005ae4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae6:	6a23      	ldr	r3, [r4, #32]
 8005ae8:	079b      	lsls	r3, r3, #30
 8005aea:	d53f      	bpl.n	8005b6c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8005aec:	2f00      	cmp	r7, #0
 8005aee:	f43f af1b 	beq.w	8005928 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005af2:	69e3      	ldr	r3, [r4, #28]
 8005af4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005af8:	61e3      	str	r3, [r4, #28]
 8005afa:	e715      	b.n	8005928 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8005afc:	2700      	movs	r7, #0
 8005afe:	e7e2      	b.n	8005ac6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b00:	6833      	ldr	r3, [r6, #0]
 8005b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b06:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005b08:	f7fc fe64 	bl	80027d4 <HAL_GetTick>
 8005b0c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b0e:	6833      	ldr	r3, [r6, #0]
 8005b10:	05da      	lsls	r2, r3, #23
 8005b12:	d4dc      	bmi.n	8005ace <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b14:	f7fc fe5e 	bl	80027d4 <HAL_GetTick>
 8005b18:	eba0 0008 	sub.w	r0, r0, r8
 8005b1c:	2864      	cmp	r0, #100	@ 0x64
 8005b1e:	d9f6      	bls.n	8005b0e <HAL_RCC_OscConfig+0x20a>
 8005b20:	e731      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b22:	b9ab      	cbnz	r3, 8005b50 <HAL_RCC_OscConfig+0x24c>
 8005b24:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b26:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b2a:	f023 0301 	bic.w	r3, r3, #1
 8005b2e:	6223      	str	r3, [r4, #32]
 8005b30:	6a23      	ldr	r3, [r4, #32]
 8005b32:	f023 0304 	bic.w	r3, r3, #4
 8005b36:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8005b38:	f7fc fe4c 	bl	80027d4 <HAL_GetTick>
 8005b3c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b3e:	6a23      	ldr	r3, [r4, #32]
 8005b40:	0798      	lsls	r0, r3, #30
 8005b42:	d5d3      	bpl.n	8005aec <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b44:	f7fc fe46 	bl	80027d4 <HAL_GetTick>
 8005b48:	1b80      	subs	r0, r0, r6
 8005b4a:	4540      	cmp	r0, r8
 8005b4c:	d9f7      	bls.n	8005b3e <HAL_RCC_OscConfig+0x23a>
 8005b4e:	e71a      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b50:	2b05      	cmp	r3, #5
 8005b52:	6a23      	ldr	r3, [r4, #32]
 8005b54:	d103      	bne.n	8005b5e <HAL_RCC_OscConfig+0x25a>
 8005b56:	f043 0304 	orr.w	r3, r3, #4
 8005b5a:	6223      	str	r3, [r4, #32]
 8005b5c:	e7ba      	b.n	8005ad4 <HAL_RCC_OscConfig+0x1d0>
 8005b5e:	f023 0301 	bic.w	r3, r3, #1
 8005b62:	6223      	str	r3, [r4, #32]
 8005b64:	6a23      	ldr	r3, [r4, #32]
 8005b66:	f023 0304 	bic.w	r3, r3, #4
 8005b6a:	e7b6      	b.n	8005ada <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b6c:	f7fc fe32 	bl	80027d4 <HAL_GetTick>
 8005b70:	1b80      	subs	r0, r0, r6
 8005b72:	4540      	cmp	r0, r8
 8005b74:	d9b7      	bls.n	8005ae6 <HAL_RCC_OscConfig+0x1e2>
 8005b76:	e706      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	42420000 	.word	0x42420000
 8005b80:	20000000 	.word	0x20000000
 8005b84:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b88:	4c2a      	ldr	r4, [pc, #168]	@ (8005c34 <HAL_RCC_OscConfig+0x330>)
 8005b8a:	6862      	ldr	r2, [r4, #4]
 8005b8c:	f002 020c 	and.w	r2, r2, #12
 8005b90:	2a08      	cmp	r2, #8
 8005b92:	d03e      	beq.n	8005c12 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b94:	2200      	movs	r2, #0
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	4b27      	ldr	r3, [pc, #156]	@ (8005c38 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 8005b9a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b9c:	d12c      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8005b9e:	f7fc fe19 	bl	80027d4 <HAL_GetTick>
 8005ba2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ba4:	6823      	ldr	r3, [r4, #0]
 8005ba6:	0199      	lsls	r1, r3, #6
 8005ba8:	d420      	bmi.n	8005bec <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005baa:	6a2b      	ldr	r3, [r5, #32]
 8005bac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb0:	d105      	bne.n	8005bbe <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005bb2:	6862      	ldr	r2, [r4, #4]
 8005bb4:	68a9      	ldr	r1, [r5, #8]
 8005bb6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bbe:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8005bc0:	6862      	ldr	r2, [r4, #4]
 8005bc2:	430b      	orrs	r3, r1
 8005bc4:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8005bc8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8005bca:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bcc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8005bce:	4b1a      	ldr	r3, [pc, #104]	@ (8005c38 <HAL_RCC_OscConfig+0x334>)
 8005bd0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005bd2:	f7fc fdff 	bl	80027d4 <HAL_GetTick>
 8005bd6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	019a      	lsls	r2, r3, #6
 8005bdc:	f53f aea8 	bmi.w	8005930 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be0:	f7fc fdf8 	bl	80027d4 <HAL_GetTick>
 8005be4:	1b40      	subs	r0, r0, r5
 8005be6:	2802      	cmp	r0, #2
 8005be8:	d9f6      	bls.n	8005bd8 <HAL_RCC_OscConfig+0x2d4>
 8005bea:	e6cc      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bec:	f7fc fdf2 	bl	80027d4 <HAL_GetTick>
 8005bf0:	1b80      	subs	r0, r0, r6
 8005bf2:	2802      	cmp	r0, #2
 8005bf4:	d9d6      	bls.n	8005ba4 <HAL_RCC_OscConfig+0x2a0>
 8005bf6:	e6c6      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8005bf8:	f7fc fdec 	bl	80027d4 <HAL_GetTick>
 8005bfc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bfe:	6823      	ldr	r3, [r4, #0]
 8005c00:	019b      	lsls	r3, r3, #6
 8005c02:	f57f ae95 	bpl.w	8005930 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c06:	f7fc fde5 	bl	80027d4 <HAL_GetTick>
 8005c0a:	1b40      	subs	r0, r0, r5
 8005c0c:	2802      	cmp	r0, #2
 8005c0e:	d9f6      	bls.n	8005bfe <HAL_RCC_OscConfig+0x2fa>
 8005c10:	e6b9      	b.n	8005986 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	f43f aea2 	beq.w	800595c <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8005c18:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c1a:	6a2b      	ldr	r3, [r5, #32]
 8005c1c:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8005c20:	429a      	cmp	r2, r3
 8005c22:	f47f ae9b 	bne.w	800595c <HAL_RCC_OscConfig+0x58>
 8005c26:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c28:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2c:	1ac0      	subs	r0, r0, r3
 8005c2e:	bf18      	it	ne
 8005c30:	2001      	movne	r0, #1
 8005c32:	e6a9      	b.n	8005988 <HAL_RCC_OscConfig+0x84>
 8005c34:	40021000 	.word	0x40021000
 8005c38:	42420000 	.word	0x42420000

08005c3c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c74 <HAL_RCC_GetSysClockFreq+0x38>)
 8005c3e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8005c40:	f003 010c 	and.w	r1, r3, #12
 8005c44:	2908      	cmp	r1, #8
 8005c46:	d112      	bne.n	8005c6e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c48:	480b      	ldr	r0, [pc, #44]	@ (8005c78 <HAL_RCC_GetSysClockFreq+0x3c>)
 8005c4a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c4e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c50:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c52:	d509      	bpl.n	8005c68 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c54:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c56:	4a09      	ldr	r2, [pc, #36]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c58:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c5c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005c5e:	4a08      	ldr	r2, [pc, #32]	@ (8005c80 <HAL_RCC_GetSysClockFreq+0x44>)
 8005c60:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005c62:	fbb0 f0f3 	udiv	r0, r0, r3
 8005c66:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c68:	4b06      	ldr	r3, [pc, #24]	@ (8005c84 <HAL_RCC_GetSysClockFreq+0x48>)
 8005c6a:	4358      	muls	r0, r3
 8005c6c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8005c6e:	4803      	ldr	r0, [pc, #12]	@ (8005c7c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40021000 	.word	0x40021000
 8005c78:	0800c798 	.word	0x0800c798
 8005c7c:	007a1200 	.word	0x007a1200
 8005c80:	0800c796 	.word	0x0800c796
 8005c84:	003d0900 	.word	0x003d0900

08005c88 <HAL_RCC_ClockConfig>:
{
 8005c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8005c8e:	4604      	mov	r4, r0
 8005c90:	b910      	cbnz	r0, 8005c98 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8005c92:	2001      	movs	r0, #1
}
 8005c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c98:	4a44      	ldr	r2, [pc, #272]	@ (8005dac <HAL_RCC_ClockConfig+0x124>)
 8005c9a:	6813      	ldr	r3, [r2, #0]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	428b      	cmp	r3, r1
 8005ca2:	d328      	bcc.n	8005cf6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ca4:	6821      	ldr	r1, [r4, #0]
 8005ca6:	078e      	lsls	r6, r1, #30
 8005ca8:	d430      	bmi.n	8005d0c <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005caa:	07ca      	lsls	r2, r1, #31
 8005cac:	d443      	bmi.n	8005d36 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cae:	4a3f      	ldr	r2, [pc, #252]	@ (8005dac <HAL_RCC_ClockConfig+0x124>)
 8005cb0:	6813      	ldr	r3, [r2, #0]
 8005cb2:	f003 0307 	and.w	r3, r3, #7
 8005cb6:	42ab      	cmp	r3, r5
 8005cb8:	d865      	bhi.n	8005d86 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	4d3c      	ldr	r5, [pc, #240]	@ (8005db0 <HAL_RCC_ClockConfig+0x128>)
 8005cbe:	f012 0f04 	tst.w	r2, #4
 8005cc2:	d16c      	bne.n	8005d9e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cc4:	0713      	lsls	r3, r2, #28
 8005cc6:	d506      	bpl.n	8005cd6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005cc8:	686b      	ldr	r3, [r5, #4]
 8005cca:	6922      	ldr	r2, [r4, #16]
 8005ccc:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005cd0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8005cd4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005cd6:	f7ff ffb1 	bl	8005c3c <HAL_RCC_GetSysClockFreq>
 8005cda:	686b      	ldr	r3, [r5, #4]
 8005cdc:	4a35      	ldr	r2, [pc, #212]	@ (8005db4 <HAL_RCC_ClockConfig+0x12c>)
 8005cde:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005ce2:	5cd3      	ldrb	r3, [r2, r3]
 8005ce4:	40d8      	lsrs	r0, r3
 8005ce6:	4b34      	ldr	r3, [pc, #208]	@ (8005db8 <HAL_RCC_ClockConfig+0x130>)
 8005ce8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8005cea:	4b34      	ldr	r3, [pc, #208]	@ (8005dbc <HAL_RCC_ClockConfig+0x134>)
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	f7fc fd2f 	bl	8002750 <HAL_InitTick>
  return HAL_OK;
 8005cf2:	2000      	movs	r0, #0
 8005cf4:	e7ce      	b.n	8005c94 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cf6:	6813      	ldr	r3, [r2, #0]
 8005cf8:	f023 0307 	bic.w	r3, r3, #7
 8005cfc:	430b      	orrs	r3, r1
 8005cfe:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d00:	6813      	ldr	r3, [r2, #0]
 8005d02:	f003 0307 	and.w	r3, r3, #7
 8005d06:	428b      	cmp	r3, r1
 8005d08:	d1c3      	bne.n	8005c92 <HAL_RCC_ClockConfig+0xa>
 8005d0a:	e7cb      	b.n	8005ca4 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0c:	4b28      	ldr	r3, [pc, #160]	@ (8005db0 <HAL_RCC_ClockConfig+0x128>)
 8005d0e:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d12:	bf1e      	ittt	ne
 8005d14:	685a      	ldrne	r2, [r3, #4]
 8005d16:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8005d1a:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1c:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d1e:	bf42      	ittt	mi
 8005d20:	685a      	ldrmi	r2, [r3, #4]
 8005d22:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8005d26:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	68a0      	ldr	r0, [r4, #8]
 8005d2c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8005d30:	4302      	orrs	r2, r0
 8005d32:	605a      	str	r2, [r3, #4]
 8005d34:	e7b9      	b.n	8005caa <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d36:	6862      	ldr	r2, [r4, #4]
 8005d38:	4e1d      	ldr	r6, [pc, #116]	@ (8005db0 <HAL_RCC_ClockConfig+0x128>)
 8005d3a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d3c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d3e:	d11a      	bne.n	8005d76 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d40:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d44:	d0a5      	beq.n	8005c92 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d48:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d4c:	f023 0303 	bic.w	r3, r3, #3
 8005d50:	4313      	orrs	r3, r2
 8005d52:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8005d54:	f7fc fd3e 	bl	80027d4 <HAL_GetTick>
 8005d58:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5a:	6873      	ldr	r3, [r6, #4]
 8005d5c:	6862      	ldr	r2, [r4, #4]
 8005d5e:	f003 030c 	and.w	r3, r3, #12
 8005d62:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005d66:	d0a2      	beq.n	8005cae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d68:	f7fc fd34 	bl	80027d4 <HAL_GetTick>
 8005d6c:	1bc0      	subs	r0, r0, r7
 8005d6e:	4540      	cmp	r0, r8
 8005d70:	d9f3      	bls.n	8005d5a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8005d72:	2003      	movs	r0, #3
 8005d74:	e78e      	b.n	8005c94 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d76:	2a02      	cmp	r2, #2
 8005d78:	d102      	bne.n	8005d80 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8005d7e:	e7e1      	b.n	8005d44 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d80:	f013 0f02 	tst.w	r3, #2
 8005d84:	e7de      	b.n	8005d44 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d86:	6813      	ldr	r3, [r2, #0]
 8005d88:	f023 0307 	bic.w	r3, r3, #7
 8005d8c:	432b      	orrs	r3, r5
 8005d8e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d90:	6813      	ldr	r3, [r2, #0]
 8005d92:	f003 0307 	and.w	r3, r3, #7
 8005d96:	42ab      	cmp	r3, r5
 8005d98:	f47f af7b 	bne.w	8005c92 <HAL_RCC_ClockConfig+0xa>
 8005d9c:	e78d      	b.n	8005cba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d9e:	686b      	ldr	r3, [r5, #4]
 8005da0:	68e1      	ldr	r1, [r4, #12]
 8005da2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005da6:	430b      	orrs	r3, r1
 8005da8:	606b      	str	r3, [r5, #4]
 8005daa:	e78b      	b.n	8005cc4 <HAL_RCC_ClockConfig+0x3c>
 8005dac:	40022000 	.word	0x40022000
 8005db0:	40021000 	.word	0x40021000
 8005db4:	0800c786 	.word	0x0800c786
 8005db8:	20000000 	.word	0x20000000
 8005dbc:	20000008 	.word	0x20000008

08005dc0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005dc0:	4b04      	ldr	r3, [pc, #16]	@ (8005dd4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8005dc2:	4a05      	ldr	r2, [pc, #20]	@ (8005dd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005dca:	5cd3      	ldrb	r3, [r2, r3]
 8005dcc:	4a03      	ldr	r2, [pc, #12]	@ (8005ddc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005dce:	6810      	ldr	r0, [r2, #0]
}
 8005dd0:	40d8      	lsrs	r0, r3
 8005dd2:	4770      	bx	lr
 8005dd4:	40021000 	.word	0x40021000
 8005dd8:	0800c77e 	.word	0x0800c77e
 8005ddc:	20000000 	.word	0x20000000

08005de0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005de0:	4b04      	ldr	r3, [pc, #16]	@ (8005df4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8005de2:	4a05      	ldr	r2, [pc, #20]	@ (8005df8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005dea:	5cd3      	ldrb	r3, [r2, r3]
 8005dec:	4a03      	ldr	r2, [pc, #12]	@ (8005dfc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005dee:	6810      	ldr	r0, [r2, #0]
}
 8005df0:	40d8      	lsrs	r0, r3
 8005df2:	4770      	bx	lr
 8005df4:	40021000 	.word	0x40021000
 8005df8:	0800c77e 	.word	0x0800c77e
 8005dfc:	20000000 	.word	0x20000000

08005e00 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e00:	6803      	ldr	r3, [r0, #0]
{
 8005e02:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005e06:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005e08:	07d8      	lsls	r0, r3, #31
 8005e0a:	d521      	bpl.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e0c:	4c36      	ldr	r4, [pc, #216]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005e0e:	69e3      	ldr	r3, [r4, #28]
 8005e10:	00d9      	lsls	r1, r3, #3
 8005e12:	d42b      	bmi.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8005e14:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e16:	69e3      	ldr	r3, [r4, #28]
 8005e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e1c:	61e3      	str	r3, [r4, #28]
 8005e1e:	69e3      	ldr	r3, [r4, #28]
 8005e20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e24:	9301      	str	r3, [sp, #4]
 8005e26:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e28:	4f30      	ldr	r7, [pc, #192]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	05da      	lsls	r2, r3, #23
 8005e2e:	d51f      	bpl.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e30:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e32:	686a      	ldr	r2, [r5, #4]
 8005e34:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8005e38:	d12e      	bne.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e3a:	6a23      	ldr	r3, [r4, #32]
 8005e3c:	686a      	ldr	r2, [r5, #4]
 8005e3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e42:	4313      	orrs	r3, r2
 8005e44:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005e46:	b11e      	cbz	r6, 8005e50 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e48:	69e3      	ldr	r3, [r4, #28]
 8005e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e4e:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e50:	682a      	ldr	r2, [r5, #0]
 8005e52:	0791      	lsls	r1, r2, #30
 8005e54:	d506      	bpl.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e56:	4924      	ldr	r1, [pc, #144]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005e58:	68a8      	ldr	r0, [r5, #8]
 8005e5a:	684b      	ldr	r3, [r1, #4]
 8005e5c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8005e60:	4303      	orrs	r3, r0
 8005e62:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005e64:	06d3      	lsls	r3, r2, #27
 8005e66:	d436      	bmi.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005e68:	2000      	movs	r0, #0
 8005e6a:	e012      	b.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8005e6c:	2600      	movs	r6, #0
 8005e6e:	e7db      	b.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e76:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005e78:	f7fc fcac 	bl	80027d4 <HAL_GetTick>
 8005e7c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	05db      	lsls	r3, r3, #23
 8005e82:	d4d5      	bmi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e84:	f7fc fca6 	bl	80027d4 <HAL_GetTick>
 8005e88:	eba0 0008 	sub.w	r0, r0, r8
 8005e8c:	2864      	cmp	r0, #100	@ 0x64
 8005e8e:	d9f6      	bls.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 8005e90:	2003      	movs	r0, #3
}
 8005e92:	b002      	add	sp, #8
 8005e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e98:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d0cc      	beq.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ea0:	2001      	movs	r0, #1
 8005ea2:	4a13      	ldr	r2, [pc, #76]	@ (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ea4:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ea6:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eaa:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eac:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005eb0:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005eb2:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8005eb6:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005eb8:	d5bf      	bpl.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8005eba:	f7fc fc8b 	bl	80027d4 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ebe:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8005ec2:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ec4:	6a23      	ldr	r3, [r4, #32]
 8005ec6:	0798      	lsls	r0, r3, #30
 8005ec8:	d4b7      	bmi.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eca:	f7fc fc83 	bl	80027d4 <HAL_GetTick>
 8005ece:	1bc0      	subs	r0, r0, r7
 8005ed0:	4540      	cmp	r0, r8
 8005ed2:	d9f7      	bls.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8005ed4:	e7dc      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ed6:	4a04      	ldr	r2, [pc, #16]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005ed8:	68e9      	ldr	r1, [r5, #12]
 8005eda:	6853      	ldr	r3, [r2, #4]
 8005edc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8005ee0:	430b      	orrs	r3, r1
 8005ee2:	6053      	str	r3, [r2, #4]
 8005ee4:	e7c0      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005ee6:	bf00      	nop
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40007000 	.word	0x40007000
 8005ef0:	42420000 	.word	0x42420000

08005ef4 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005ef4:	2802      	cmp	r0, #2
{
 8005ef6:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8005ef8:	d044      	beq.n	8005f84 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8005efa:	2810      	cmp	r0, #16
 8005efc:	d003      	beq.n	8005f06 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8005efe:	2801      	cmp	r0, #1
 8005f00:	d022      	beq.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8005f02:	2000      	movs	r0, #0
 8005f04:	e034      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8005f06:	4b25      	ldr	r3, [pc, #148]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005f08:	685a      	ldr	r2, [r3, #4]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8005f10:	d02e      	beq.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f12:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8005f16:	4822      	ldr	r0, [pc, #136]	@ (8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f18:	03d2      	lsls	r2, r2, #15
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f1a:	bf48      	it	mi
 8005f1c:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f1e:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f20:	bf41      	itttt	mi
 8005f22:	4920      	ldrmi	r1, [pc, #128]	@ (8005fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f24:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8005f28:	5c89      	ldrbmi	r1, [r1, r2]
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005f2a:	4a1f      	ldrmi	r2, [pc, #124]	@ (8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005f2c:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005f2e:	bf4c      	ite	mi
 8005f30:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f34:	4a1d      	ldrpl	r2, [pc, #116]	@ (8005fac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005f36:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f38:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005f3c:	d418      	bmi.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = pllclk;
        }
        else
        {
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	0040      	lsls	r0, r0, #1
      }
      break;
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005f42:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8005f46:	e013      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005f48:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8005f4c:	4a13      	ldr	r2, [pc, #76]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005f4e:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005f50:	4019      	ands	r1, r3
 8005f52:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8005f56:	d01e      	beq.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005f58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f60:	d107      	bne.n	8005f72 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
  uint32_t temp_reg = 0U, frequency = 0U;
 8005f62:	f649 4040 	movw	r0, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005f66:	6a53      	ldr	r3, [r2, #36]	@ 0x24
  uint32_t temp_reg = 0U, frequency = 0U;
 8005f68:	f013 0f02 	tst.w	r3, #2
 8005f6c:	bf08      	it	eq
 8005f6e:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8005f70:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f76:	d1c4      	bne.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8005f78:	6813      	ldr	r3, [r2, #0]
  uint32_t temp_reg = 0U, frequency = 0U;
 8005f7a:	f24f 4024 	movw	r0, #62500	@ 0xf424
 8005f7e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8005f82:	e7f3      	b.n	8005f6c <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005f84:	f7ff ff2c 	bl	8005de0 <HAL_RCC_GetPCLK2Freq>
 8005f88:	4b04      	ldr	r3, [pc, #16]	@ (8005f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8005f90:	3301      	adds	r3, #1
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	e7d5      	b.n	8005f42 <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8005f96:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8005f9a:	e7e9      	b.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	0800c7aa 	.word	0x0800c7aa
 8005fa4:	0800c7a8 	.word	0x0800c7a8
 8005fa8:	007a1200 	.word	0x007a1200
 8005fac:	003d0900 	.word	0x003d0900

08005fb0 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
 8005fb0:	4770      	bx	lr

08005fb2 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
/**
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8005fb4:	4770      	bx	lr

08005fb6 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
/**
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
 8005fb8:	4770      	bx	lr

08005fba <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8005fba:	4770      	bx	lr

08005fbc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
/**
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
 8005fbc:	4770      	bx	lr

08005fbe <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_TIM_TriggerHalfCpltCallback>:
/**
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
 8005fc0:	4770      	bx	lr

08005fc2 <HAL_TIM_ErrorCallback>:
/**
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8005fc4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d120      	bne.n	800600e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fd2:	6803      	ldr	r3, [r0, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	f042 0201 	orr.w	r2, r2, #1
 8005fda:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8006014 <HAL_TIM_Base_Start_IT+0x50>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00a      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x34>
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fe6:	d007      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x34>
 8005fe8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d003      	beq.n	8005ff8 <HAL_TIM_Base_Start_IT+0x34>
 8005ff0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d104      	bne.n	8006002 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff8:	689a      	ldr	r2, [r3, #8]
 8005ffa:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ffe:	2a06      	cmp	r2, #6
 8006000:	d003      	beq.n	800600a <HAL_TIM_Base_Start_IT+0x46>
      __HAL_TIM_ENABLE(htim);
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	f042 0201 	orr.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800600a:	2000      	movs	r0, #0
 800600c:	4770      	bx	lr
    return HAL_ERROR;
 800600e:	2001      	movs	r0, #1
}
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	40012c00 	.word	0x40012c00

08006018 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8006018:	6803      	ldr	r3, [r0, #0]
{
 800601a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800601c:	68dd      	ldr	r5, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800601e:	691e      	ldr	r6, [r3, #16]
{
 8006020:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006022:	07b1      	lsls	r1, r6, #30
 8006024:	d50e      	bpl.n	8006044 <HAL_TIM_IRQHandler+0x2c>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006026:	07aa      	lsls	r2, r5, #30
 8006028:	d50c      	bpl.n	8006044 <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800602a:	f06f 0202 	mvn.w	r2, #2
 800602e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006030:	2201      	movs	r2, #1
 8006032:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006034:	699b      	ldr	r3, [r3, #24]
 8006036:	079b      	lsls	r3, r3, #30
 8006038:	d071      	beq.n	800611e <HAL_TIM_IRQHandler+0x106>
          htim->IC_CaptureCallback(htim);
 800603a:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          htim->PWM_PulseFinishedCallback(htim);
 800603e:	4798      	blx	r3
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006040:	2300      	movs	r3, #0
 8006042:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006044:	0771      	lsls	r1, r6, #29
 8006046:	d511      	bpl.n	800606c <HAL_TIM_IRQHandler+0x54>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006048:	076a      	lsls	r2, r5, #29
 800604a:	d50f      	bpl.n	800606c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800604c:	f06f 0204 	mvn.w	r2, #4
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006054:	2202      	movs	r2, #2
 8006056:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800605e:	d065      	beq.n	800612c <HAL_TIM_IRQHandler+0x114>
        htim->IC_CaptureCallback(htim);
 8006060:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        htim->PWM_PulseFinishedCallback(htim);
 8006064:	4620      	mov	r0, r4
 8006066:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006068:	2300      	movs	r3, #0
 800606a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800606c:	0733      	lsls	r3, r6, #28
 800606e:	d510      	bpl.n	8006092 <HAL_TIM_IRQHandler+0x7a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006070:	0728      	lsls	r0, r5, #28
 8006072:	d50e      	bpl.n	8006092 <HAL_TIM_IRQHandler+0x7a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006074:	f06f 0208 	mvn.w	r2, #8
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800607c:	2204      	movs	r2, #4
 800607e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	0799      	lsls	r1, r3, #30
 8006084:	d059      	beq.n	800613a <HAL_TIM_IRQHandler+0x122>
        htim->IC_CaptureCallback(htim);
 8006086:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        htim->PWM_PulseFinishedCallback(htim);
 800608a:	4620      	mov	r0, r4
 800608c:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	2300      	movs	r3, #0
 8006090:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006092:	06f2      	lsls	r2, r6, #27
 8006094:	d511      	bpl.n	80060ba <HAL_TIM_IRQHandler+0xa2>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006096:	06eb      	lsls	r3, r5, #27
 8006098:	d50f      	bpl.n	80060ba <HAL_TIM_IRQHandler+0xa2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800609a:	f06f 0210 	mvn.w	r2, #16
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060a2:	2208      	movs	r2, #8
 80060a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80060ac:	d04c      	beq.n	8006148 <HAL_TIM_IRQHandler+0x130>
        htim->IC_CaptureCallback(htim);
 80060ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        htim->PWM_PulseFinishedCallback(htim);
 80060b2:	4620      	mov	r0, r4
 80060b4:	4798      	blx	r3
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060b6:	2300      	movs	r3, #0
 80060b8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80060ba:	07f0      	lsls	r0, r6, #31
 80060bc:	d509      	bpl.n	80060d2 <HAL_TIM_IRQHandler+0xba>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060be:	07e9      	lsls	r1, r5, #31
 80060c0:	d507      	bpl.n	80060d2 <HAL_TIM_IRQHandler+0xba>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060c2:	f06f 0201 	mvn.w	r2, #1
 80060c6:	6823      	ldr	r3, [r4, #0]
      htim->PeriodElapsedCallback(htim);
 80060c8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060ca:	611a      	str	r2, [r3, #16]
      htim->PeriodElapsedCallback(htim);
 80060cc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 80060d0:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80060d2:	0632      	lsls	r2, r6, #24
 80060d4:	d509      	bpl.n	80060ea <HAL_TIM_IRQHandler+0xd2>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060d6:	062b      	lsls	r3, r5, #24
 80060d8:	d507      	bpl.n	80060ea <HAL_TIM_IRQHandler+0xd2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060da:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80060de:	6823      	ldr	r3, [r4, #0]
      htim->BreakCallback(htim);
 80060e0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80060e2:	611a      	str	r2, [r3, #16]
      htim->BreakCallback(htim);
 80060e4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 80060e8:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060ea:	0670      	lsls	r0, r6, #25
 80060ec:	d509      	bpl.n	8006102 <HAL_TIM_IRQHandler+0xea>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060ee:	0669      	lsls	r1, r5, #25
 80060f0:	d507      	bpl.n	8006102 <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060f2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80060f6:	6823      	ldr	r3, [r4, #0]
      htim->TriggerCallback(htim);
 80060f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80060fa:	611a      	str	r2, [r3, #16]
      htim->TriggerCallback(htim);
 80060fc:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8006100:	4798      	blx	r3
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006102:	06b2      	lsls	r2, r6, #26
 8006104:	d527      	bpl.n	8006156 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006106:	06ab      	lsls	r3, r5, #26
 8006108:	d525      	bpl.n	8006156 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800610a:	f06f 0220 	mvn.w	r2, #32
 800610e:	6823      	ldr	r3, [r4, #0]
      htim->CommutationCallback(htim);
 8006110:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006112:	611a      	str	r2, [r3, #16]
      htim->CommutationCallback(htim);
 8006114:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
}
 8006118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      htim->CommutationCallback(htim);
 800611c:	4718      	bx	r3
          htim->OC_DelayElapsedCallback(htim);
 800611e:	f8d0 3098 	ldr.w	r3, [r0, #152]	@ 0x98
 8006122:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006124:	4620      	mov	r0, r4
 8006126:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800612a:	e788      	b.n	800603e <HAL_TIM_IRQHandler+0x26>
        htim->OC_DelayElapsedCallback(htim);
 800612c:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8006130:	4620      	mov	r0, r4
 8006132:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006134:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006138:	e794      	b.n	8006064 <HAL_TIM_IRQHandler+0x4c>
        htim->OC_DelayElapsedCallback(htim);
 800613a:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800613e:	4620      	mov	r0, r4
 8006140:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006142:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006146:	e7a0      	b.n	800608a <HAL_TIM_IRQHandler+0x72>
        htim->OC_DelayElapsedCallback(htim);
 8006148:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800614c:	4620      	mov	r0, r4
 800614e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006150:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8006154:	e7ad      	b.n	80060b2 <HAL_TIM_IRQHandler+0x9a>
}
 8006156:	bd70      	pop	{r4, r5, r6, pc}

08006158 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006158:	4a17      	ldr	r2, [pc, #92]	@ (80061b8 <TIM_Base_SetConfig+0x60>)
  tmpcr1 = TIMx->CR1;
 800615a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800615c:	4290      	cmp	r0, r2
 800615e:	d00a      	beq.n	8006176 <TIM_Base_SetConfig+0x1e>
 8006160:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006164:	d007      	beq.n	8006176 <TIM_Base_SetConfig+0x1e>
 8006166:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800616a:	4290      	cmp	r0, r2
 800616c:	d003      	beq.n	8006176 <TIM_Base_SetConfig+0x1e>
 800616e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006172:	4290      	cmp	r0, r2
 8006174:	d107      	bne.n	8006186 <TIM_Base_SetConfig+0x2e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8006176:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800617c:	4313      	orrs	r3, r2

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800617e:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006180:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006184:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006186:	694a      	ldr	r2, [r1, #20]
 8006188:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800618c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800618e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006190:	688b      	ldr	r3, [r1, #8]
 8006192:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006194:	680b      	ldr	r3, [r1, #0]
 8006196:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006198:	4b07      	ldr	r3, [pc, #28]	@ (80061b8 <TIM_Base_SetConfig+0x60>)
 800619a:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800619c:	bf04      	itt	eq
 800619e:	690b      	ldreq	r3, [r1, #16]
 80061a0:	6303      	streq	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a2:	2301      	movs	r3, #1
 80061a4:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061a6:	6903      	ldr	r3, [r0, #16]
 80061a8:	07db      	lsls	r3, r3, #31
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061aa:	bf42      	ittt	mi
 80061ac:	6903      	ldrmi	r3, [r0, #16]
 80061ae:	f023 0301 	bicmi.w	r3, r3, #1
 80061b2:	6103      	strmi	r3, [r0, #16]
  }
}
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	40012c00 	.word	0x40012c00

080061bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061bc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061be:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061c0:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c2:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061c6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80061ca:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061cc:	6082      	str	r2, [r0, #8]
}
 80061ce:	bd10      	pop	{r4, pc}

080061d0 <HAL_TIM_ConfigClockSource>:
{
 80061d0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80061d2:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80061d6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80061d8:	2b01      	cmp	r3, #1
 80061da:	f04f 0002 	mov.w	r0, #2
 80061de:	f000 808e 	beq.w	80062fe <HAL_TIM_ConfigClockSource+0x12e>
 80061e2:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80061e8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80061ea:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80061ee:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061f0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061f4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80061f8:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80061fa:	680b      	ldr	r3, [r1, #0]
 80061fc:	2b60      	cmp	r3, #96	@ 0x60
 80061fe:	d04f      	beq.n	80062a0 <HAL_TIM_ConfigClockSource+0xd0>
 8006200:	d832      	bhi.n	8006268 <HAL_TIM_ConfigClockSource+0x98>
 8006202:	2b40      	cmp	r3, #64	@ 0x40
 8006204:	d064      	beq.n	80062d0 <HAL_TIM_ConfigClockSource+0x100>
 8006206:	d816      	bhi.n	8006236 <HAL_TIM_ConfigClockSource+0x66>
 8006208:	2b20      	cmp	r3, #32
 800620a:	d00d      	beq.n	8006228 <HAL_TIM_ConfigClockSource+0x58>
 800620c:	d80a      	bhi.n	8006224 <HAL_TIM_ConfigClockSource+0x54>
 800620e:	f033 0110 	bics.w	r1, r3, #16
 8006212:	d009      	beq.n	8006228 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8006214:	2301      	movs	r3, #1
 8006216:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 800621a:	2300      	movs	r3, #0
 800621c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8006220:	4610      	mov	r0, r2
 8006222:	bd38      	pop	{r3, r4, r5, pc}
  switch (sClockSourceConfig->ClockSource)
 8006224:	2b30      	cmp	r3, #48	@ 0x30
 8006226:	d1f5      	bne.n	8006214 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8006228:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800622a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800622e:	4313      	orrs	r3, r2
 8006230:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8006234:	e028      	b.n	8006288 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8006236:	2b50      	cmp	r3, #80	@ 0x50
 8006238:	d1ec      	bne.n	8006214 <HAL_TIM_ConfigClockSource+0x44>
                               sClockSourceConfig->ClockPolarity,
 800623a:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800623c:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 800623e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006240:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006242:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006246:	f023 0301 	bic.w	r3, r3, #1
 800624a:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 800624e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006250:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006254:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8006258:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800625a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800625c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800625e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006262:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8006266:	e00f      	b.n	8006288 <HAL_TIM_ConfigClockSource+0xb8>
  switch (sClockSourceConfig->ClockSource)
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626c:	d00d      	beq.n	800628a <HAL_TIM_ConfigClockSource+0xba>
 800626e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006272:	d00c      	beq.n	800628e <HAL_TIM_ConfigClockSource+0xbe>
 8006274:	2b70      	cmp	r3, #112	@ 0x70
 8006276:	d1cd      	bne.n	8006214 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8006278:	68cb      	ldr	r3, [r1, #12]
 800627a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800627e:	f7ff ff9d 	bl	80061bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006282:	6883      	ldr	r3, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006284:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8006288:	6083      	str	r3, [r0, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800628a:	2200      	movs	r2, #0
 800628c:	e7c2      	b.n	8006214 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800628e:	68cb      	ldr	r3, [r1, #12]
 8006290:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8006294:	f7ff ff92 	bl	80061bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006298:	6883      	ldr	r3, [r0, #8]
 800629a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800629e:	e7f3      	b.n	8006288 <HAL_TIM_ConfigClockSource+0xb8>
  tmpccer = TIMx->CCER;
 80062a0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a2:	6a02      	ldr	r2, [r0, #32]
                               sClockSourceConfig->ClockPolarity,
 80062a4:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062a6:	f022 0210 	bic.w	r2, r2, #16
                               sClockSourceConfig->ClockFilter);
 80062aa:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062ac:	6202      	str	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ae:	6982      	ldr	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062b4:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80062b8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062bc:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80062c0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80062c2:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80062c4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80062c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ca:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80062ce:	e7db      	b.n	8006288 <HAL_TIM_ConfigClockSource+0xb8>
                               sClockSourceConfig->ClockPolarity,
 80062d0:	684a      	ldr	r2, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80062d2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80062d4:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062d6:	6a03      	ldr	r3, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062d8:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062dc:	f023 0301 	bic.w	r3, r3, #1
 80062e0:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e2:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80062e4:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062ea:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80062ee:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80062f0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80062f2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80062f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062f8:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80062fc:	e7c4      	b.n	8006288 <HAL_TIM_ConfigClockSource+0xb8>
  __HAL_LOCK(htim);
 80062fe:	4602      	mov	r2, r0
 8006300:	e78e      	b.n	8006220 <HAL_TIM_ConfigClockSource+0x50>
	...

08006304 <TIM_ResetCallback>:
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006304:	4b13      	ldr	r3, [pc, #76]	@ (8006354 <TIM_ResetCallback+0x50>)
 8006306:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800630a:	4b13      	ldr	r3, [pc, #76]	@ (8006358 <TIM_ResetCallback+0x54>)
 800630c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006310:	4b12      	ldr	r3, [pc, #72]	@ (800635c <TIM_ResetCallback+0x58>)
 8006312:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006316:	4b12      	ldr	r3, [pc, #72]	@ (8006360 <TIM_ResetCallback+0x5c>)
 8006318:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800631c:	4b11      	ldr	r3, [pc, #68]	@ (8006364 <TIM_ResetCallback+0x60>)
 800631e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006322:	4b11      	ldr	r3, [pc, #68]	@ (8006368 <TIM_ResetCallback+0x64>)
 8006324:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006328:	4b10      	ldr	r3, [pc, #64]	@ (800636c <TIM_ResetCallback+0x68>)
 800632a:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800632e:	4b10      	ldr	r3, [pc, #64]	@ (8006370 <TIM_ResetCallback+0x6c>)
 8006330:	f8c0 309c 	str.w	r3, [r0, #156]	@ 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006334:	4b0f      	ldr	r3, [pc, #60]	@ (8006374 <TIM_ResetCallback+0x70>)
 8006336:	f8c0 30a0 	str.w	r3, [r0, #160]	@ 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800633a:	4b0f      	ldr	r3, [pc, #60]	@ (8006378 <TIM_ResetCallback+0x74>)
 800633c:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006340:	4b0e      	ldr	r3, [pc, #56]	@ (800637c <TIM_ResetCallback+0x78>)
 8006342:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006346:	4b0e      	ldr	r3, [pc, #56]	@ (8006380 <TIM_ResetCallback+0x7c>)
 8006348:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800634c:	4b0d      	ldr	r3, [pc, #52]	@ (8006384 <TIM_ResetCallback+0x80>)
 800634e:	f8c0 30b0 	str.w	r3, [r0, #176]	@ 0xb0
}
 8006352:	4770      	bx	lr
 8006354:	08005fb1 	.word	0x08005fb1
 8006358:	08005fb3 	.word	0x08005fb3
 800635c:	08005fbf 	.word	0x08005fbf
 8006360:	08005fc1 	.word	0x08005fc1
 8006364:	08005fb7 	.word	0x08005fb7
 8006368:	08005fb9 	.word	0x08005fb9
 800636c:	08005fb5 	.word	0x08005fb5
 8006370:	08005fbb 	.word	0x08005fbb
 8006374:	08005fbd 	.word	0x08005fbd
 8006378:	08005fc3 	.word	0x08005fc3
 800637c:	08006451 	.word	0x08006451
 8006380:	08006453 	.word	0x08006453
 8006384:	08006455 	.word	0x08006455

08006388 <HAL_TIM_Base_Init>:
{
 8006388:	b510      	push	{r4, lr}
  if (htim == NULL)
 800638a:	4604      	mov	r4, r0
 800638c:	b368      	cbz	r0, 80063ea <HAL_TIM_Base_Init+0x62>
  if (htim->State == HAL_TIM_STATE_RESET)
 800638e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8006392:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006396:	b953      	cbnz	r3, 80063ae <HAL_TIM_Base_Init+0x26>
    htim->Lock = HAL_UNLOCKED;
 8006398:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    TIM_ResetCallback(htim);
 800639c:	f7ff ffb2 	bl	8006304 <TIM_ResetCallback>
    if (htim->Base_MspInitCallback == NULL)
 80063a0:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80063a2:	b90b      	cbnz	r3, 80063a8 <HAL_TIM_Base_Init+0x20>
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80063a4:	4b12      	ldr	r3, [pc, #72]	@ (80063f0 <HAL_TIM_Base_Init+0x68>)
 80063a6:	6483      	str	r3, [r0, #72]	@ 0x48
    htim->Base_MspInitCallback(htim);
 80063a8:	4620      	mov	r0, r4
 80063aa:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80063ac:	4798      	blx	r3
  htim->State = HAL_TIM_STATE_BUSY;
 80063ae:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b0:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80063b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b6:	1d21      	adds	r1, r4, #4
 80063b8:	f7ff fece 	bl	8006158 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063bc:	2301      	movs	r3, #1
  return HAL_OK;
 80063be:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063c0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80063c8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80063cc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80063d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80063d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063dc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80063e0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 80063e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80063ea:	2001      	movs	r0, #1
 80063ec:	e7fc      	b.n	80063e8 <HAL_TIM_Base_Init+0x60>
 80063ee:	bf00      	nop
 80063f0:	08002349 	.word	0x08002349

080063f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063f4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063f6:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
{
 80063fa:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	f04f 0002 	mov.w	r0, #2
 8006402:	d022      	beq.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006404:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006406:	f882 003d 	strb.w	r0, [r2, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800640a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800640c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800640e:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006412:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8006414:	6898      	ldr	r0, [r3, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006416:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006418:	4c0c      	ldr	r4, [pc, #48]	@ (800644c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800641a:	42a3      	cmp	r3, r4
 800641c:	d00a      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006422:	d007      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8006424:	f5a4 3494 	sub.w	r4, r4, #75776	@ 0x12800
 8006428:	42a3      	cmp	r3, r4
 800642a:	d003      	beq.n	8006434 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800642c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8006430:	42a3      	cmp	r3, r4
 8006432:	d104      	bne.n	800643e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006434:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006436:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800643a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800643c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800643e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8006440:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8006442:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006446:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800644a:	bd30      	pop	{r4, r5, pc}
 800644c:	40012c00 	.word	0x40012c00

08006450 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8006450:	4770      	bx	lr

08006452 <HAL_TIMEx_CommutHalfCpltCallback>:
/**
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
 8006452:	4770      	bx	lr

08006454 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8006454:	4770      	bx	lr

08006456 <HAL_UARTEx_RxEventCallback>:
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006456:	4770      	bx	lr

08006458 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006458:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645a:	f102 030c 	add.w	r3, r2, #12
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	320c      	adds	r2, #12
 8006468:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800646c:	6802      	ldr	r2, [r0, #0]
 800646e:	2900      	cmp	r1, #0
 8006470:	d1f2      	bne.n	8006458 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	f102 0314 	add.w	r3, r2, #20
 8006476:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800647a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	f102 0c14 	add.w	ip, r2, #20
 8006482:	e84c 3100 	strex	r1, r3, [ip]
 8006486:	2900      	cmp	r1, #0
 8006488:	d1f3      	bne.n	8006472 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800648a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10b      	bne.n	80064a8 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006490:	f102 030c 	add.w	r3, r2, #12
 8006494:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006498:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	f102 0c0c 	add.w	ip, r2, #12
 80064a0:	e84c 3100 	strex	r1, r3, [ip]
 80064a4:	2900      	cmp	r1, #0
 80064a6:	d1f3      	bne.n	8006490 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a8:	2320      	movs	r3, #32
 80064aa:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ae:	2300      	movs	r3, #0
 80064b0:	6303      	str	r3, [r0, #48]	@ 0x30
}
 80064b2:	4770      	bx	lr

080064b4 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  huart->RxXferCount = 0x00U;
 80064b4:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064b6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 80064b8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80064ba:	84c3      	strh	r3, [r0, #38]	@ 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80064bc:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80064be:	4718      	bx	r3

080064c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064c0:	b510      	push	{r4, lr}
 80064c2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064c4:	6803      	ldr	r3, [r0, #0]
 80064c6:	68c1      	ldr	r1, [r0, #12]
 80064c8:	691a      	ldr	r2, [r3, #16]
 80064ca:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80064ce:	430a      	orrs	r2, r1
 80064d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064d2:	6882      	ldr	r2, [r0, #8]
 80064d4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80064d6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064d8:	4302      	orrs	r2, r0
 80064da:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80064dc:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 80064e0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80064e4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80064e6:	430a      	orrs	r2, r1
 80064e8:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064ea:	695a      	ldr	r2, [r3, #20]
 80064ec:	69a1      	ldr	r1, [r4, #24]
 80064ee:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064f2:	430a      	orrs	r2, r1
 80064f4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80064f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006530 <UART_SetConfig+0x70>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d115      	bne.n	8006528 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80064fc:	f7ff fc70 	bl	8005de0 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006500:	2319      	movs	r3, #25
 8006502:	4343      	muls	r3, r0
 8006504:	6862      	ldr	r2, [r4, #4]
 8006506:	6820      	ldr	r0, [r4, #0]
 8006508:	0092      	lsls	r2, r2, #2
 800650a:	fbb3 f3f2 	udiv	r3, r3, r2
 800650e:	2264      	movs	r2, #100	@ 0x64
 8006510:	fbb3 f1f2 	udiv	r1, r3, r2
 8006514:	fb02 3311 	mls	r3, r2, r1, r3
 8006518:	011b      	lsls	r3, r3, #4
 800651a:	3332      	adds	r3, #50	@ 0x32
 800651c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006520:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8006524:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8006526:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8006528:	f7ff fc4a 	bl	8005dc0 <HAL_RCC_GetPCLK1Freq>
 800652c:	e7e8      	b.n	8006500 <UART_SetConfig+0x40>
 800652e:	bf00      	nop
 8006530:	40013800 	.word	0x40013800

08006534 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8006534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006536:	4605      	mov	r5, r0
 8006538:	460c      	mov	r4, r1
 800653a:	4617      	mov	r7, r2
 800653c:	461e      	mov	r6, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800653e:	682a      	ldr	r2, [r5, #0]
 8006540:	6813      	ldr	r3, [r2, #0]
 8006542:	ea34 0303 	bics.w	r3, r4, r3
 8006546:	d101      	bne.n	800654c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8006548:	2000      	movs	r0, #0
 800654a:	e021      	b.n	8006590 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800654c:	1c70      	adds	r0, r6, #1
 800654e:	d0f7      	beq.n	8006540 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006550:	f7fc f940 	bl	80027d4 <HAL_GetTick>
 8006554:	1bc0      	subs	r0, r0, r7
 8006556:	4286      	cmp	r6, r0
 8006558:	d31c      	bcc.n	8006594 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
 800655a:	b1de      	cbz	r6, 8006594 <UART_WaitOnFlagUntilTimeout.constprop.0+0x60>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	68da      	ldr	r2, [r3, #12]
 8006560:	0751      	lsls	r1, r2, #29
 8006562:	d5ec      	bpl.n	800653e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8006564:	2c80      	cmp	r4, #128	@ 0x80
 8006566:	d0ea      	beq.n	800653e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8006568:	2c40      	cmp	r4, #64	@ 0x40
 800656a:	d0e8      	beq.n	800653e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	0712      	lsls	r2, r2, #28
 8006570:	d5e5      	bpl.n	800653e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006572:	2400      	movs	r4, #0
 8006574:	9401      	str	r4, [sp, #4]
 8006576:	681a      	ldr	r2, [r3, #0]
          UART_EndRxTransfer(huart);
 8006578:	4628      	mov	r0, r5
          __HAL_UART_CLEAR_OREFLAG(huart);
 800657a:	9201      	str	r2, [sp, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	9301      	str	r3, [sp, #4]
 8006580:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 8006582:	f7ff ff69 	bl	8006458 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006586:	2308      	movs	r3, #8
          return HAL_ERROR;
 8006588:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800658a:	646b      	str	r3, [r5, #68]	@ 0x44
          __HAL_UNLOCK(huart);
 800658c:	f885 4040 	strb.w	r4, [r5, #64]	@ 0x40
}
 8006590:	b003      	add	sp, #12
 8006592:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8006594:	2003      	movs	r0, #3
 8006596:	e7fb      	b.n	8006590 <UART_WaitOnFlagUntilTimeout.constprop.0+0x5c>

08006598 <UART_Receive_IT.isra.0>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006598:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800659c:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800659e:	2b22      	cmp	r3, #34	@ 0x22
 80065a0:	d153      	bne.n	800664a <UART_Receive_IT.isra.0+0xb2>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a2:	6881      	ldr	r1, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065a4:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065a6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80065aa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ac:	d13d      	bne.n	800662a <UART_Receive_IT.isra.0+0x92>
 80065ae:	6901      	ldr	r1, [r0, #16]
 80065b0:	2900      	cmp	r1, #0
 80065b2:	d13d      	bne.n	8006630 <UART_Receive_IT.isra.0+0x98>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065b4:	6852      	ldr	r2, [r2, #4]
 80065b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065ba:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 80065be:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80065c0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 80065c2:	3b01      	subs	r3, #1
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d13e      	bne.n	800664a <UART_Receive_IT.isra.0+0xb2>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065cc:	6802      	ldr	r2, [r0, #0]
 80065ce:	68d1      	ldr	r1, [r2, #12]
 80065d0:	f021 0120 	bic.w	r1, r1, #32
 80065d4:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065d6:	68d1      	ldr	r1, [r2, #12]
 80065d8:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80065dc:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065de:	6951      	ldr	r1, [r2, #20]
 80065e0:	f021 0101 	bic.w	r1, r1, #1
 80065e4:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80065e6:	2220      	movs	r2, #32
 80065e8:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ec:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ee:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80065f0:	2a01      	cmp	r2, #1
 80065f2:	6802      	ldr	r2, [r0, #0]
 80065f4:	d126      	bne.n	8006644 <UART_Receive_IT.isra.0+0xac>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f6:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f8:	f102 030c 	add.w	r3, r2, #12
 80065fc:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006600:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006604:	f102 0c0c 	add.w	ip, r2, #12
 8006608:	e84c 3100 	strex	r1, r3, [ip]
 800660c:	2900      	cmp	r1, #0
 800660e:	d1f3      	bne.n	80065f8 <UART_Receive_IT.isra.0+0x60>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006610:	6813      	ldr	r3, [r2, #0]
 8006612:	06db      	lsls	r3, r3, #27
 8006614:	d505      	bpl.n	8006622 <UART_Receive_IT.isra.0+0x8a>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006616:	9101      	str	r1, [sp, #4]
 8006618:	6813      	ldr	r3, [r2, #0]
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	6853      	ldr	r3, [r2, #4]
 800661e:	9301      	str	r3, [sp, #4]
 8006620:	9b01      	ldr	r3, [sp, #4]
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006622:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006624:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
}
 8006626:	b002      	add	sp, #8
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006628:	4718      	bx	r3
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800662a:	b939      	cbnz	r1, 800663c <UART_Receive_IT.isra.0+0xa4>
 800662c:	6901      	ldr	r1, [r0, #16]
 800662e:	b929      	cbnz	r1, 800663c <UART_Receive_IT.isra.0+0xa4>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006630:	6852      	ldr	r2, [r2, #4]
 8006632:	b2d2      	uxtb	r2, r2
 8006634:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8006636:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8006638:	3301      	adds	r3, #1
 800663a:	e7c0      	b.n	80065be <UART_Receive_IT.isra.0+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800663c:	6852      	ldr	r2, [r2, #4]
 800663e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006642:	e7f7      	b.n	8006634 <UART_Receive_IT.isra.0+0x9c>
        huart->RxCpltCallback(huart);
 8006644:	6d43      	ldr	r3, [r0, #84]	@ 0x54
}
 8006646:	b002      	add	sp, #8
        huart->RxCpltCallback(huart);
 8006648:	4718      	bx	r3
}
 800664a:	b002      	add	sp, #8
 800664c:	4770      	bx	lr

0800664e <HAL_UART_AbortReceiveCpltCallback>:
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
 800664e:	4770      	bx	lr

08006650 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8006650:	4770      	bx	lr

08006652 <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 8006652:	4770      	bx	lr

08006654 <HAL_UART_RxHalfCpltCallback>:
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
 8006654:	4770      	bx	lr

08006656 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8006656:	4770      	bx	lr

08006658 <HAL_UART_AbortCpltCallback>:
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
 8006658:	4770      	bx	lr

0800665a <HAL_UART_AbortTransmitCpltCallback>:
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
 800665a:	4770      	bx	lr

0800665c <HAL_UART_Receive>:
{
 800665c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006660:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8006662:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
{
 8006666:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8006668:	2b20      	cmp	r3, #32
{
 800666a:	460e      	mov	r6, r1
 800666c:	4691      	mov	r9, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 800666e:	d148      	bne.n	8006702 <HAL_UART_Receive+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8006670:	2900      	cmp	r1, #0
 8006672:	d048      	beq.n	8006706 <HAL_UART_Receive+0xaa>
 8006674:	2a00      	cmp	r2, #0
 8006676:	d046      	beq.n	8006706 <HAL_UART_Receive+0xaa>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006678:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800667a:	2500      	movs	r5, #0
 800667c:	6445      	str	r5, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800667e:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006682:	6305      	str	r5, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8006684:	f7fc f8a6 	bl	80027d4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006688:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800668a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800668c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->RxXferSize = Size;
 8006690:	f8a4 902c 	strh.w	r9, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8006694:	f8a4 902e 	strh.w	r9, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006698:	d103      	bne.n	80066a2 <HAL_UART_Receive+0x46>
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	b90b      	cbnz	r3, 80066a2 <HAL_UART_Receive+0x46>
      pdata16bits = (uint16_t *) pData;
 800669e:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80066a0:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 80066a2:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
 80066a4:	b280      	uxth	r0, r0
 80066a6:	b918      	cbnz	r0, 80066b0 <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 80066a8:	2320      	movs	r3, #32
 80066aa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    return HAL_OK;
 80066ae:	e00a      	b.n	80066c6 <HAL_UART_Receive+0x6a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80066b0:	463b      	mov	r3, r7
 80066b2:	4642      	mov	r2, r8
 80066b4:	2120      	movs	r1, #32
 80066b6:	4620      	mov	r0, r4
 80066b8:	f7ff ff3c 	bl	8006534 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80066bc:	b128      	cbz	r0, 80066ca <HAL_UART_Receive+0x6e>
        huart->RxState = HAL_UART_STATE_READY;
 80066be:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80066c0:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80066c2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 80066c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80066ca:	6823      	ldr	r3, [r4, #0]
      if (pdata8bits == NULL)
 80066cc:	b94e      	cbnz	r6, 80066e2 <HAL_UART_Receive+0x86>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d4:	f825 3b02 	strh.w	r3, [r5], #2
      huart->RxXferCount--;
 80066d8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29b      	uxth	r3, r3
 80066de:	85e3      	strh	r3, [r4, #46]	@ 0x2e
 80066e0:	e7df      	b.n	80066a2 <HAL_UART_Receive+0x46>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066e2:	68a2      	ldr	r2, [r4, #8]
 80066e4:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80066e8:	d002      	beq.n	80066f0 <HAL_UART_Receive+0x94>
 80066ea:	b932      	cbnz	r2, 80066fa <HAL_UART_Receive+0x9e>
 80066ec:	6922      	ldr	r2, [r4, #16]
 80066ee:	b922      	cbnz	r2, 80066fa <HAL_UART_Receive+0x9e>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066f0:	6859      	ldr	r1, [r3, #4]
 80066f2:	b2c9      	uxtb	r1, r1
 80066f4:	f806 1b01 	strb.w	r1, [r6], #1
        pdata8bits++;
 80066f8:	e7ee      	b.n	80066d8 <HAL_UART_Receive+0x7c>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066fa:	6859      	ldr	r1, [r3, #4]
 80066fc:	f001 017f 	and.w	r1, r1, #127	@ 0x7f
 8006700:	e7f8      	b.n	80066f4 <HAL_UART_Receive+0x98>
    return HAL_BUSY;
 8006702:	2002      	movs	r0, #2
 8006704:	e7df      	b.n	80066c6 <HAL_UART_Receive+0x6a>
      return  HAL_ERROR;
 8006706:	2001      	movs	r0, #1
 8006708:	e7dd      	b.n	80066c6 <HAL_UART_Receive+0x6a>
	...

0800670c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800670c:	6803      	ldr	r3, [r0, #0]
{
 800670e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006710:	681a      	ldr	r2, [r3, #0]
{
 8006712:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8006714:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006716:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006718:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800671a:	d108      	bne.n	800672e <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800671c:	0696      	lsls	r6, r2, #26
 800671e:	d56a      	bpl.n	80067f6 <HAL_UART_IRQHandler+0xea>
 8006720:	068d      	lsls	r5, r1, #26
 8006722:	d568      	bpl.n	80067f6 <HAL_UART_IRQHandler+0xea>
}
 8006724:	b002      	add	sp, #8
 8006726:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 800672a:	f7ff bf35 	b.w	8006598 <UART_Receive_IT.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800672e:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006732:	f401 7590 	and.w	r5, r1, #288	@ 0x120
 8006736:	4305      	orrs	r5, r0
 8006738:	d05d      	beq.n	80067f6 <HAL_UART_IRQHandler+0xea>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800673a:	07d6      	lsls	r6, r2, #31
 800673c:	d505      	bpl.n	800674a <HAL_UART_IRQHandler+0x3e>
 800673e:	05cd      	lsls	r5, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006740:	bf42      	ittt	mi
 8006742:	6c63      	ldrmi	r3, [r4, #68]	@ 0x44
 8006744:	f043 0301 	orrmi.w	r3, r3, #1
 8006748:	6463      	strmi	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800674a:	0753      	lsls	r3, r2, #29
 800674c:	d504      	bpl.n	8006758 <HAL_UART_IRQHandler+0x4c>
 800674e:	b118      	cbz	r0, 8006758 <HAL_UART_IRQHandler+0x4c>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006750:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006752:	f043 0302 	orr.w	r3, r3, #2
 8006756:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006758:	0796      	lsls	r6, r2, #30
 800675a:	d504      	bpl.n	8006766 <HAL_UART_IRQHandler+0x5a>
 800675c:	b118      	cbz	r0, 8006766 <HAL_UART_IRQHandler+0x5a>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800675e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006760:	f043 0304 	orr.w	r3, r3, #4
 8006764:	6463      	str	r3, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006766:	0715      	lsls	r5, r2, #28
 8006768:	d507      	bpl.n	800677a <HAL_UART_IRQHandler+0x6e>
 800676a:	f001 0320 	and.w	r3, r1, #32
 800676e:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006770:	bf1e      	ittt	ne
 8006772:	6c63      	ldrne	r3, [r4, #68]	@ 0x44
 8006774:	f043 0308 	orrne.w	r3, r3, #8
 8006778:	6463      	strne	r3, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800677a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800677c:	2b00      	cmp	r3, #0
 800677e:	d038      	beq.n	80067f2 <HAL_UART_IRQHandler+0xe6>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006780:	0692      	lsls	r2, r2, #26
 8006782:	d504      	bpl.n	800678e <HAL_UART_IRQHandler+0x82>
 8006784:	068b      	lsls	r3, r1, #26
 8006786:	d502      	bpl.n	800678e <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 8006788:	4620      	mov	r0, r4
 800678a:	f7ff ff05 	bl	8006598 <UART_Receive_IT.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800678e:	6826      	ldr	r6, [r4, #0]
 8006790:	6973      	ldr	r3, [r6, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006792:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006798:	f002 0208 	and.w	r2, r2, #8
 800679c:	ea53 0502 	orrs.w	r5, r3, r2
 80067a0:	d023      	beq.n	80067ea <HAL_UART_IRQHandler+0xde>
        UART_EndRxTransfer(huart);
 80067a2:	4620      	mov	r0, r4
 80067a4:	f7ff fe58 	bl	8006458 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a8:	6973      	ldr	r3, [r6, #20]
 80067aa:	065e      	lsls	r6, r3, #25
 80067ac:	d51b      	bpl.n	80067e6 <HAL_UART_IRQHandler+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b0:	f102 0314 	add.w	r3, r2, #20
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067bc:	3214      	adds	r2, #20
 80067be:	e842 3100 	strex	r1, r3, [r2]
 80067c2:	2900      	cmp	r1, #0
 80067c4:	d1f3      	bne.n	80067ae <HAL_UART_IRQHandler+0xa2>
          if (huart->hdmarx != NULL)
 80067c6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80067c8:	b150      	cbz	r0, 80067e0 <HAL_UART_IRQHandler+0xd4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067ca:	4b75      	ldr	r3, [pc, #468]	@ (80069a0 <HAL_UART_IRQHandler+0x294>)
 80067cc:	6343      	str	r3, [r0, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067ce:	f7fc fc91 	bl	80030f4 <HAL_DMA_Abort_IT>
 80067d2:	b170      	cbz	r0, 80067f2 <HAL_UART_IRQHandler+0xe6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067d4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80067d6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
}
 80067d8:	b002      	add	sp, #8
 80067da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  huart->TxCpltCallback(huart);
 80067de:	4718      	bx	r3
            huart->ErrorCallback(huart);
 80067e0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
  huart->TxCpltCallback(huart);
 80067e2:	4620      	mov	r0, r4
 80067e4:	e7f8      	b.n	80067d8 <HAL_UART_IRQHandler+0xcc>
          huart->ErrorCallback(huart);
 80067e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067e8:	e7f6      	b.n	80067d8 <HAL_UART_IRQHandler+0xcc>
        huart->ErrorCallback(huart);
 80067ea:	4620      	mov	r0, r4
 80067ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067ee:	4798      	blx	r3
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f0:	6465      	str	r5, [r4, #68]	@ 0x44
}
 80067f2:	b002      	add	sp, #8
 80067f4:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80067f8:	2801      	cmp	r0, #1
 80067fa:	f040 8097 	bne.w	800692c <HAL_UART_IRQHandler+0x220>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80067fe:	06d5      	lsls	r5, r2, #27
 8006800:	f140 8094 	bpl.w	800692c <HAL_UART_IRQHandler+0x220>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006804:	06c8      	lsls	r0, r1, #27
 8006806:	f140 8091 	bpl.w	800692c <HAL_UART_IRQHandler+0x220>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800680a:	2200      	movs	r2, #0
 800680c:	9201      	str	r2, [sp, #4]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	9201      	str	r2, [sp, #4]
 8006812:	685a      	ldr	r2, [r3, #4]
 8006814:	9201      	str	r2, [sp, #4]
 8006816:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006818:	695a      	ldr	r2, [r3, #20]
 800681a:	0652      	lsls	r2, r2, #25
 800681c:	d54f      	bpl.n	80068be <HAL_UART_IRQHandler+0x1b2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800681e:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006820:	680a      	ldr	r2, [r1, #0]
 8006822:	6852      	ldr	r2, [r2, #4]
 8006824:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8006826:	2a00      	cmp	r2, #0
 8006828:	d0e3      	beq.n	80067f2 <HAL_UART_IRQHandler+0xe6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800682a:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
 800682c:	4290      	cmp	r0, r2
 800682e:	d9e0      	bls.n	80067f2 <HAL_UART_IRQHandler+0xe6>
        huart->RxXferCount = nb_remaining_rx_data;
 8006830:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006832:	698a      	ldr	r2, [r1, #24]
 8006834:	2a20      	cmp	r2, #32
 8006836:	d036      	beq.n	80068a6 <HAL_UART_IRQHandler+0x19a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	f103 020c 	add.w	r2, r3, #12
 800683c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	f103 000c 	add.w	r0, r3, #12
 8006848:	e840 2100 	strex	r1, r2, [r0]
 800684c:	2900      	cmp	r1, #0
 800684e:	d1f3      	bne.n	8006838 <HAL_UART_IRQHandler+0x12c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006850:	f103 0214 	add.w	r2, r3, #20
 8006854:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006858:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800685c:	f103 0014 	add.w	r0, r3, #20
 8006860:	e840 2100 	strex	r1, r2, [r0]
 8006864:	2900      	cmp	r1, #0
 8006866:	d1f3      	bne.n	8006850 <HAL_UART_IRQHandler+0x144>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006868:	f103 0214 	add.w	r2, r3, #20
 800686c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006870:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	f103 0014 	add.w	r0, r3, #20
 8006878:	e840 2100 	strex	r1, r2, [r0]
 800687c:	2900      	cmp	r1, #0
 800687e:	d1f3      	bne.n	8006868 <HAL_UART_IRQHandler+0x15c>
          huart->RxState = HAL_UART_STATE_READY;
 8006880:	2220      	movs	r2, #32
 8006882:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006886:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	f103 020c 	add.w	r2, r3, #12
 800688c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006890:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	f103 000c 	add.w	r0, r3, #12
 8006898:	e840 2100 	strex	r1, r2, [r0]
 800689c:	2900      	cmp	r1, #0
 800689e:	d1f3      	bne.n	8006888 <HAL_UART_IRQHandler+0x17c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80068a0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80068a2:	f7fc fc07 	bl	80030b4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068a6:	2302      	movs	r3, #2
 80068a8:	6363      	str	r3, [r4, #52]	@ 0x34
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80068aa:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80068ac:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80068ae:	1ac9      	subs	r1, r1, r3
 80068b0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80068b2:	b289      	uxth	r1, r1
        huart->RxEventCallback(huart, nb_rx_data);
 80068b4:	4620      	mov	r0, r4
}
 80068b6:	b002      	add	sp, #8
 80068b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        huart->RxEventCallback(huart, nb_rx_data);
 80068bc:	4718      	bx	r3
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068be:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 80068c0:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068c2:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 80068c4:	b280      	uxth	r0, r0
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068c6:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d092      	beq.n	80067f2 <HAL_UART_IRQHandler+0xe6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068cc:	1a89      	subs	r1, r1, r2
 80068ce:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80068d0:	2900      	cmp	r1, #0
 80068d2:	d08e      	beq.n	80067f2 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d4:	f103 020c 	add.w	r2, r3, #12
 80068d8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068dc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	f103 050c 	add.w	r5, r3, #12
 80068e4:	e845 2000 	strex	r0, r2, [r5]
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d1f3      	bne.n	80068d4 <HAL_UART_IRQHandler+0x1c8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	f103 0214 	add.w	r2, r3, #20
 80068f0:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f8:	f103 0514 	add.w	r5, r3, #20
 80068fc:	e845 2000 	strex	r0, r2, [r5]
 8006900:	2800      	cmp	r0, #0
 8006902:	d1f3      	bne.n	80068ec <HAL_UART_IRQHandler+0x1e0>
        huart->RxState = HAL_UART_STATE_READY;
 8006904:	2220      	movs	r2, #32
 8006906:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690a:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	f103 020c 	add.w	r2, r3, #12
 8006910:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006914:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	f103 050c 	add.w	r5, r3, #12
 800691c:	e845 2000 	strex	r0, r2, [r5]
 8006920:	2800      	cmp	r0, #0
 8006922:	d1f3      	bne.n	800690c <HAL_UART_IRQHandler+0x200>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006924:	2302      	movs	r3, #2
 8006926:	6363      	str	r3, [r4, #52]	@ 0x34
        huart->RxEventCallback(huart, nb_rx_data);
 8006928:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800692a:	e7c3      	b.n	80068b4 <HAL_UART_IRQHandler+0x1a8>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800692c:	0616      	lsls	r6, r2, #24
 800692e:	d528      	bpl.n	8006982 <HAL_UART_IRQHandler+0x276>
 8006930:	060d      	lsls	r5, r1, #24
 8006932:	d526      	bpl.n	8006982 <HAL_UART_IRQHandler+0x276>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006934:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8006938:	2a21      	cmp	r2, #33	@ 0x21
 800693a:	f47f af5a 	bne.w	80067f2 <HAL_UART_IRQHandler+0xe6>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800693e:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006940:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006942:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006946:	d117      	bne.n	8006978 <HAL_UART_IRQHandler+0x26c>
 8006948:	6921      	ldr	r1, [r4, #16]
 800694a:	b9a9      	cbnz	r1, 8006978 <HAL_UART_IRQHandler+0x26c>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800694c:	f832 1b02 	ldrh.w	r1, [r2], #2
 8006950:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006954:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006956:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8006958:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800695a:	3a01      	subs	r2, #1
 800695c:	b292      	uxth	r2, r2
 800695e:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8006960:	2a00      	cmp	r2, #0
 8006962:	f47f af46 	bne.w	80067f2 <HAL_UART_IRQHandler+0xe6>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800696c:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006974:	60da      	str	r2, [r3, #12]
 8006976:	e73c      	b.n	80067f2 <HAL_UART_IRQHandler+0xe6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006978:	1c51      	adds	r1, r2, #1
 800697a:	6221      	str	r1, [r4, #32]
 800697c:	7812      	ldrb	r2, [r2, #0]
 800697e:	605a      	str	r2, [r3, #4]
 8006980:	e7ea      	b.n	8006958 <HAL_UART_IRQHandler+0x24c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006982:	0650      	lsls	r0, r2, #25
 8006984:	f57f af35 	bpl.w	80067f2 <HAL_UART_IRQHandler+0xe6>
 8006988:	064a      	lsls	r2, r1, #25
 800698a:	f57f af32 	bpl.w	80067f2 <HAL_UART_IRQHandler+0xe6>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800698e:	68da      	ldr	r2, [r3, #12]
 8006990:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006994:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006996:	2320      	movs	r3, #32
 8006998:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->TxCpltCallback(huart);
 800699c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800699e:	e720      	b.n	80067e2 <HAL_UART_IRQHandler+0xd6>
 80069a0:	080064b5 	.word	0x080064b5

080069a4 <UART_InitCallbacksToDefault>:
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80069a4:	4b09      	ldr	r3, [pc, #36]	@ (80069cc <UART_InitCallbacksToDefault+0x28>)
 80069a6:	6483      	str	r3, [r0, #72]	@ 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80069a8:	4b09      	ldr	r3, [pc, #36]	@ (80069d0 <UART_InitCallbacksToDefault+0x2c>)
 80069aa:	64c3      	str	r3, [r0, #76]	@ 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80069ac:	4b09      	ldr	r3, [pc, #36]	@ (80069d4 <UART_InitCallbacksToDefault+0x30>)
 80069ae:	6503      	str	r3, [r0, #80]	@ 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80069b0:	4b09      	ldr	r3, [pc, #36]	@ (80069d8 <UART_InitCallbacksToDefault+0x34>)
 80069b2:	6543      	str	r3, [r0, #84]	@ 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80069b4:	4b09      	ldr	r3, [pc, #36]	@ (80069dc <UART_InitCallbacksToDefault+0x38>)
 80069b6:	6583      	str	r3, [r0, #88]	@ 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80069b8:	4b09      	ldr	r3, [pc, #36]	@ (80069e0 <UART_InitCallbacksToDefault+0x3c>)
 80069ba:	65c3      	str	r3, [r0, #92]	@ 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80069bc:	4b09      	ldr	r3, [pc, #36]	@ (80069e4 <UART_InitCallbacksToDefault+0x40>)
 80069be:	6603      	str	r3, [r0, #96]	@ 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80069c0:	4b09      	ldr	r3, [pc, #36]	@ (80069e8 <UART_InitCallbacksToDefault+0x44>)
 80069c2:	6643      	str	r3, [r0, #100]	@ 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80069c4:	4b09      	ldr	r3, [pc, #36]	@ (80069ec <UART_InitCallbacksToDefault+0x48>)
 80069c6:	66c3      	str	r3, [r0, #108]	@ 0x6c
}
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	08006653 	.word	0x08006653
 80069d0:	08006651 	.word	0x08006651
 80069d4:	08006655 	.word	0x08006655
 80069d8:	080012f1 	.word	0x080012f1
 80069dc:	08006657 	.word	0x08006657
 80069e0:	08006659 	.word	0x08006659
 80069e4:	0800665b 	.word	0x0800665b
 80069e8:	0800664f 	.word	0x0800664f
 80069ec:	08006457 	.word	0x08006457

080069f0 <HAL_UART_Init>:
{
 80069f0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80069f2:	4604      	mov	r4, r0
 80069f4:	2800      	cmp	r0, #0
 80069f6:	d030      	beq.n	8006a5a <HAL_UART_Init+0x6a>
  if (huart->gState == HAL_UART_STATE_RESET)
 80069f8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80069fc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006a00:	b953      	cbnz	r3, 8006a18 <HAL_UART_Init+0x28>
    huart->Lock = HAL_UNLOCKED;
 8006a02:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    UART_InitCallbacksToDefault(huart);
 8006a06:	f7ff ffcd 	bl	80069a4 <UART_InitCallbacksToDefault>
    if (huart->MspInitCallback == NULL)
 8006a0a:	6f03      	ldr	r3, [r0, #112]	@ 0x70
 8006a0c:	b90b      	cbnz	r3, 8006a12 <HAL_UART_Init+0x22>
      huart->MspInitCallback = HAL_UART_MspInit;
 8006a0e:	4b14      	ldr	r3, [pc, #80]	@ (8006a60 <HAL_UART_Init+0x70>)
 8006a10:	6703      	str	r3, [r0, #112]	@ 0x70
    huart->MspInitCallback(huart);
 8006a12:	4620      	mov	r0, r4
 8006a14:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8006a16:	4798      	blx	r3
  huart->gState = HAL_UART_STATE_BUSY;
 8006a18:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8006a1a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006a1c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8006a20:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8006a22:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8006a24:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a28:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8006a2a:	f7ff fd49 	bl	80064c0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a2e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a30:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a32:	691a      	ldr	r2, [r3, #16]
 8006a34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a3a:	695a      	ldr	r2, [r3, #20]
 8006a3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a40:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8006a42:	68da      	ldr	r2, [r3, #12]
 8006a44:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a48:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8006a4a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a4c:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a4e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a52:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a56:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8006a58:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006a5a:	2001      	movs	r0, #1
 8006a5c:	e7fc      	b.n	8006a58 <HAL_UART_Init+0x68>
 8006a5e:	bf00      	nop
 8006a60:	080023ed 	.word	0x080023ed

08006a64 <UART_Start_Receive_IT>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a64:	2300      	movs	r3, #0
  huart->RxXferCount = Size;
 8006a66:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a68:	6443      	str	r3, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a6a:	2322      	movs	r3, #34	@ 0x22
  huart->RxXferSize = Size;
 8006a6c:	8582      	strh	r2, [r0, #44]	@ 0x2c
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a6e:	6902      	ldr	r2, [r0, #16]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a70:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->pRxBuffPtr = pData;
 8006a74:	6281      	str	r1, [r0, #40]	@ 0x28
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a76:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a78:	b11a      	cbz	r2, 8006a82 <UART_Start_Receive_IT+0x1e>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006a80:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a82:	695a      	ldr	r2, [r3, #20]
}
 8006a84:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006a86:	f042 0201 	orr.w	r2, r2, #1
 8006a8a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	f042 0220 	orr.w	r2, r2, #32
 8006a92:	60da      	str	r2, [r3, #12]
}
 8006a94:	4770      	bx	lr

08006a96 <HAL_UART_Receive_IT>:
{
 8006a96:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a98:	f890 6042 	ldrb.w	r6, [r0, #66]	@ 0x42
 8006a9c:	2e20      	cmp	r6, #32
 8006a9e:	d106      	bne.n	8006aae <HAL_UART_Receive_IT+0x18>
    if ((pData == NULL) || (Size == 0U))
 8006aa0:	b141      	cbz	r1, 8006ab4 <HAL_UART_Receive_IT+0x1e>
 8006aa2:	b13a      	cbz	r2, 8006ab4 <HAL_UART_Receive_IT+0x1e>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa4:	2400      	movs	r4, #0
 8006aa6:	6304      	str	r4, [r0, #48]	@ 0x30
}
 8006aa8:	bc70      	pop	{r4, r5, r6}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8006aaa:	f7ff bfdb 	b.w	8006a64 <UART_Start_Receive_IT>
    return HAL_BUSY;
 8006aae:	2002      	movs	r0, #2
}
 8006ab0:	bc70      	pop	{r4, r5, r6}
 8006ab2:	4770      	bx	lr
      return HAL_ERROR;
 8006ab4:	2001      	movs	r0, #1
 8006ab6:	e7fb      	b.n	8006ab0 <HAL_UART_Receive_IT+0x1a>

08006ab8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006ab8:	b084      	sub	sp, #16
 8006aba:	a804      	add	r0, sp, #16
 8006abc:	e900 000e 	stmdb	r0, {r1, r2, r3}
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
}
 8006ac0:	2000      	movs	r0, #0
 8006ac2:	b004      	add	sp, #16
 8006ac4:	4770      	bx	lr

08006ac6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006ac6:	4603      	mov	r3, r0
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006ac8:	f44f 423f 	mov.w	r2, #48896	@ 0xbf00
  USBx->ISTR = 0U;
 8006acc:	2000      	movs	r0, #0
 8006ace:	f8a3 0044 	strh.w	r0, [r3, #68]	@ 0x44
  USBx->CNTR = (uint16_t)winterruptmask;
 8006ad2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
}
 8006ad6:	4770      	bx	lr

08006ad8 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006ad8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8006adc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ae0:	045b      	lsls	r3, r3, #17
 8006ae2:	0c5b      	lsrs	r3, r3, #17
 8006ae4:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40

  return HAL_OK;
}
 8006ae8:	2000      	movs	r0, #0
 8006aea:	4770      	bx	lr

08006aec <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8006aec:	2000      	movs	r0, #0
 8006aee:	4770      	bx	lr

08006af0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006af0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006af2:	4604      	mov	r4, r0
 8006af4:	a804      	add	r0, sp, #16
 8006af6:	e900 000e 	stmdb	r0, {r1, r2, r3}
  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006afa:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006afc:	2301      	movs	r3, #1
 8006afe:	f8a4 3040 	strh.w	r3, [r4, #64]	@ 0x40
  USBx->CNTR = 0U;
 8006b02:	f8a4 0040 	strh.w	r0, [r4, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006b06:	f8a4 0044 	strh.w	r0, [r4, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006b0a:	f8a4 0050 	strh.w	r0, [r4, #80]	@ 0x50

  return HAL_OK;
}
 8006b0e:	b004      	add	sp, #16
 8006b10:	bd10      	pop	{r4, pc}
	...

08006b14 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006b14:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006b16:	780a      	ldrb	r2, [r1, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8006b18:	78cd      	ldrb	r5, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006b1a:	f830 4022 	ldrh.w	r4, [r0, r2, lsl #2]
{
 8006b1e:	4603      	mov	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006b20:	f424 44ec 	bic.w	r4, r4, #30208	@ 0x7600
 8006b24:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8006b28:	0424      	lsls	r4, r4, #16
 8006b2a:	0c24      	lsrs	r4, r4, #16
  switch (ep->type)
 8006b2c:	2d03      	cmp	r5, #3
 8006b2e:	d803      	bhi.n	8006b38 <USB_ActivateEndpoint+0x24>
 8006b30:	e8df f005 	tbb	[pc, r5]
 8006b34:	45474941 	.word	0x45474941
    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
      break;

    default:
      ret = HAL_ERROR;
 8006b38:	2001      	movs	r0, #1
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006b3a:	f248 0680 	movw	r6, #32896	@ 0x8080
 8006b3e:	4334      	orrs	r4, r6
 8006b40:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006b44:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
 8006b48:	4f9f      	ldr	r7, [pc, #636]	@ (8006dc8 <USB_ActivateEndpoint+0x2b4>)
 8006b4a:	b2a4      	uxth	r4, r4
 8006b4c:	403c      	ands	r4, r7
 8006b4e:	4314      	orrs	r4, r2
 8006b50:	4334      	orrs	r4, r6
 8006b52:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]

  if (ep->doublebuffer == 0U)
 8006b56:	7b0c      	ldrb	r4, [r1, #12]
 8006b58:	eb03 1c02 	add.w	ip, r3, r2, lsl #4
 8006b5c:	2c00      	cmp	r4, #0
 8006b5e:	f040 808d 	bne.w	8006c7c <USB_ActivateEndpoint+0x168>
  {
    if (ep->is_in != 0U)
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b62:	88cc      	ldrh	r4, [r1, #6]
    if (ep->is_in != 0U)
 8006b64:	784e      	ldrb	r6, [r1, #1]
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b66:	0864      	lsrs	r4, r4, #1
 8006b68:	0064      	lsls	r4, r4, #1
    if (ep->is_in != 0U)
 8006b6a:	b37e      	cbz	r6, 8006bcc <USB_ActivateEndpoint+0xb8>
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006b6c:	f8b3 1050 	ldrh.w	r1, [r3, #80]	@ 0x50
 8006b70:	b289      	uxth	r1, r1
 8006b72:	4461      	add	r1, ip
 8006b74:	f8a1 4400 	strh.w	r4, [r1, #1024]	@ 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006b78:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006b7c:	0649      	lsls	r1, r1, #25
 8006b7e:	d509      	bpl.n	8006b94 <USB_ActivateEndpoint+0x80>
 8006b80:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006b84:	b289      	uxth	r1, r1
 8006b86:	4039      	ands	r1, r7
 8006b88:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006b8c:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8006b90:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b94:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006b98:	4c8c      	ldr	r4, [pc, #560]	@ (8006dcc <USB_ActivateEndpoint+0x2b8>)
 8006b9a:	b289      	uxth	r1, r1
      if (ep->type != EP_TYPE_ISOC)
 8006b9c:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b9e:	ea01 0104 	and.w	r1, r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8006ba2:	d001      	beq.n	8006ba8 <USB_ActivateEndpoint+0x94>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006ba4:	f081 0120 	eor.w	r1, r1, #32
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ba8:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006bac:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006bb0:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
 8006bb4:	e04c      	b.n	8006c50 <USB_ActivateEndpoint+0x13c>
  HAL_StatusTypeDef ret = HAL_OK;
 8006bb6:	4628      	mov	r0, r5
      wEpRegVal |= USB_EP_CONTROL;
 8006bb8:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
      break;
 8006bbc:	e7bd      	b.n	8006b3a <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_INTERRUPT;
 8006bbe:	f444 64c0 	orr.w	r4, r4, #1536	@ 0x600
  switch (ep->type)
 8006bc2:	2000      	movs	r0, #0
 8006bc4:	e7b9      	b.n	8006b3a <USB_ActivateEndpoint+0x26>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006bc6:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
      break;
 8006bca:	e7fa      	b.n	8006bc2 <USB_ActivateEndpoint+0xae>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bcc:	f8b3 5050 	ldrh.w	r5, [r3, #80]	@ 0x50
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006bd0:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bd2:	b2ad      	uxth	r5, r5
 8006bd4:	4465      	add	r5, ip
 8006bd6:	f8a5 4408 	strh.w	r4, [r5, #1032]	@ 0x408
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006bda:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8006bde:	293e      	cmp	r1, #62	@ 0x3e
 8006be0:	b2a4      	uxth	r4, r4
 8006be2:	4464      	add	r4, ip
 8006be4:	f8b4 540c 	ldrh.w	r5, [r4, #1036]	@ 0x40c
 8006be8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006bec:	f8a4 540c 	strh.w	r5, [r4, #1036]	@ 0x40c
 8006bf0:	d92f      	bls.n	8006c52 <USB_ActivateEndpoint+0x13e>
 8006bf2:	094d      	lsrs	r5, r1, #5
 8006bf4:	06ce      	lsls	r6, r1, #27
 8006bf6:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8006bfa:	bf08      	it	eq
 8006bfc:	f105 35ff 	addeq.w	r5, r5, #4294967295
 8006c00:	b289      	uxth	r1, r1
 8006c02:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8006c06:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8006c0a:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8006c0e:	b289      	uxth	r1, r1
 8006c10:	f8a4 140c 	strh.w	r1, [r4, #1036]	@ 0x40c
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006c14:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006c18:	044f      	lsls	r7, r1, #17
 8006c1a:	d50d      	bpl.n	8006c38 <USB_ActivateEndpoint+0x124>
 8006c1c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006c20:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006c24:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006c28:	0409      	lsls	r1, r1, #16
 8006c2a:	0c09      	lsrs	r1, r1, #16
 8006c2c:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8006c30:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006c34:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      if (ep->num == 0U)
 8006c38:	4c65      	ldr	r4, [pc, #404]	@ (8006dd0 <USB_ActivateEndpoint+0x2bc>)
 8006c3a:	b9c2      	cbnz	r2, 8006c6e <USB_ActivateEndpoint+0x15a>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c3c:	881a      	ldrh	r2, [r3, #0]
 8006c3e:	b292      	uxth	r2, r2
 8006c40:	4022      	ands	r2, r4
 8006c42:	f482 5240 	eor.w	r2, r2, #12288	@ 0x3000
 8006c46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006c4a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006c4e:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
}
 8006c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006c52:	b911      	cbnz	r1, 8006c5a <USB_ActivateEndpoint+0x146>
 8006c54:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8006c58:	e7d5      	b.n	8006c06 <USB_ActivateEndpoint+0xf2>
 8006c5a:	084d      	lsrs	r5, r1, #1
 8006c5c:	07c9      	lsls	r1, r1, #31
 8006c5e:	f8b4 140c 	ldrh.w	r1, [r4, #1036]	@ 0x40c
 8006c62:	bf48      	it	mi
 8006c64:	3501      	addmi	r5, #1
 8006c66:	b289      	uxth	r1, r1
 8006c68:	ea41 2185 	orr.w	r1, r1, r5, lsl #10
 8006c6c:	e7cf      	b.n	8006c0e <USB_ActivateEndpoint+0xfa>
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006c6e:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006c72:	b289      	uxth	r1, r1
 8006c74:	4021      	ands	r1, r4
 8006c76:	f481 5100 	eor.w	r1, r1, #8192	@ 0x2000
 8006c7a:	e795      	b.n	8006ba8 <USB_ActivateEndpoint+0x94>
    if (ep->type == EP_TYPE_BULK)
 8006c7c:	2d02      	cmp	r5, #2
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c7e:	f833 4022 	ldrh.w	r4, [r3, r2, lsl #2]
    if (ep->type == EP_TYPE_BULK)
 8006c82:	d15b      	bne.n	8006d3c <USB_ActivateEndpoint+0x228>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006c84:	b2a4      	uxth	r4, r4
 8006c86:	403c      	ands	r4, r7
 8006c88:	f444 4401 	orr.w	r4, r4, #33024	@ 0x8100
 8006c8c:	f044 0480 	orr.w	r4, r4, #128	@ 0x80
 8006c90:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006c94:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8006c98:	890e      	ldrh	r6, [r1, #8]
 8006c9a:	b2a4      	uxth	r4, r4
 8006c9c:	0876      	lsrs	r6, r6, #1
 8006c9e:	4464      	add	r4, ip
 8006ca0:	0076      	lsls	r6, r6, #1
 8006ca2:	f8a4 6400 	strh.w	r6, [r4, #1024]	@ 0x400
 8006ca6:	894e      	ldrh	r6, [r1, #10]
 8006ca8:	f8b3 4050 	ldrh.w	r4, [r3, #80]	@ 0x50
 8006cac:	0876      	lsrs	r6, r6, #1
 8006cae:	b2a4      	uxth	r4, r4
 8006cb0:	4464      	add	r4, ip
 8006cb2:	0076      	lsls	r6, r6, #1
 8006cb4:	f8a4 6408 	strh.w	r6, [r4, #1032]	@ 0x408
    if (ep->is_in == 0U)
 8006cb8:	7849      	ldrb	r1, [r1, #1]
 8006cba:	2900      	cmp	r1, #0
 8006cbc:	d148      	bne.n	8006d50 <USB_ActivateEndpoint+0x23c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cbe:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006cc2:	044e      	lsls	r6, r1, #17
 8006cc4:	d50d      	bpl.n	8006ce2 <USB_ActivateEndpoint+0x1ce>
 8006cc6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006cca:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006cce:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006cd2:	0409      	lsls	r1, r1, #16
 8006cd4:	0c09      	lsrs	r1, r1, #16
 8006cd6:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8006cda:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006cde:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ce2:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006ce6:	064d      	lsls	r5, r1, #25
 8006ce8:	d50d      	bpl.n	8006d06 <USB_ActivateEndpoint+0x1f2>
 8006cea:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006cee:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006cf2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006cf6:	0409      	lsls	r1, r1, #16
 8006cf8:	0c09      	lsrs	r1, r1, #16
 8006cfa:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006cfe:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8006d02:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d06:	f248 0480 	movw	r4, #32896	@ 0x8080
 8006d0a:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006d0e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8006d12:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006d16:	0409      	lsls	r1, r1, #16
 8006d18:	0c09      	lsrs	r1, r1, #16
 8006d1a:	f481 5140 	eor.w	r1, r1, #12288	@ 0x3000
 8006d1e:	4321      	orrs	r1, r4
 8006d20:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006d24:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006d28:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006d2c:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8006d30:	0409      	lsls	r1, r1, #16
 8006d32:	0c09      	lsrs	r1, r1, #16
 8006d34:	430c      	orrs	r4, r1
 8006d36:	f823 4022 	strh.w	r4, [r3, r2, lsl #2]
 8006d3a:	e789      	b.n	8006c50 <USB_ActivateEndpoint+0x13c>
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006d3c:	f424 44e2 	bic.w	r4, r4, #28928	@ 0x7100
 8006d40:	f024 0470 	bic.w	r4, r4, #112	@ 0x70
 8006d44:	0424      	lsls	r4, r4, #16
 8006d46:	0c24      	lsrs	r4, r4, #16
 8006d48:	4326      	orrs	r6, r4
 8006d4a:	f823 6022 	strh.w	r6, [r3, r2, lsl #2]
 8006d4e:	e7a1      	b.n	8006c94 <USB_ActivateEndpoint+0x180>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006d50:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006d54:	044c      	lsls	r4, r1, #17
 8006d56:	d50d      	bpl.n	8006d74 <USB_ActivateEndpoint+0x260>
 8006d58:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006d5c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006d60:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006d64:	0409      	lsls	r1, r1, #16
 8006d66:	0c09      	lsrs	r1, r1, #16
 8006d68:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 8006d6c:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006d70:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d74:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006d78:	0649      	lsls	r1, r1, #25
 8006d7a:	d50d      	bpl.n	8006d98 <USB_ActivateEndpoint+0x284>
 8006d7c:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006d80:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
 8006d84:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006d88:	0409      	lsls	r1, r1, #16
 8006d8a:	0c09      	lsrs	r1, r1, #16
 8006d8c:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006d90:	f041 01c0 	orr.w	r1, r1, #192	@ 0xc0
 8006d94:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006d98:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006d9c:	4c0b      	ldr	r4, [pc, #44]	@ (8006dcc <USB_ActivateEndpoint+0x2b8>)
 8006d9e:	b289      	uxth	r1, r1
 8006da0:	4021      	ands	r1, r4
      if (ep->type != EP_TYPE_ISOC)
 8006da2:	2d01      	cmp	r5, #1
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006da4:	bf18      	it	ne
 8006da6:	f081 0120 	eorne.w	r1, r1, #32
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006daa:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8006dae:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8006db2:	f823 1022 	strh.w	r1, [r3, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006db6:	f833 1022 	ldrh.w	r1, [r3, r2, lsl #2]
 8006dba:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8006dbe:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
 8006dc2:	0409      	lsls	r1, r1, #16
 8006dc4:	0c09      	lsrs	r1, r1, #16
 8006dc6:	e6ef      	b.n	8006ba8 <USB_ActivateEndpoint+0x94>
 8006dc8:	ffff8f8f 	.word	0xffff8f8f
 8006dcc:	ffff8fbf 	.word	0xffff8fbf
 8006dd0:	ffffbf8f 	.word	0xffffbf8f

08006dd4 <USB_DeactivateEndpoint>:
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
  {
    if (ep->is_in != 0U)
 8006dd4:	784a      	ldrb	r2, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dd6:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8006dd8:	7b09      	ldrb	r1, [r1, #12]
 8006dda:	bbd9      	cbnz	r1, 8006e54 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in != 0U)
 8006ddc:	b30a      	cbz	r2, 8006e22 <USB_DeactivateEndpoint+0x4e>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006dde:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006de2:	0651      	lsls	r1, r2, #25
 8006de4:	d50d      	bpl.n	8006e02 <USB_DeactivateEndpoint+0x2e>
 8006de6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006dea:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006dee:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006df2:	0412      	lsls	r2, r2, #16
 8006df4:	0c12      	lsrs	r2, r2, #16
 8006df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006dfa:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8006dfe:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006e02:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e06:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e0e:	0412      	lsls	r2, r2, #16
 8006e10:	0c12      	lsrs	r2, r2, #16
 8006e12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e16:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e1a:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
}
 8006e1e:	2000      	movs	r0, #0
 8006e20:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e22:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e26:	0452      	lsls	r2, r2, #17
 8006e28:	d50d      	bpl.n	8006e46 <USB_DeactivateEndpoint+0x72>
 8006e2a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e2e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006e32:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006e36:	0412      	lsls	r2, r2, #16
 8006e38:	0c12      	lsrs	r2, r2, #16
 8006e3a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8006e3e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e42:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006e46:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006e4e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006e52:	e7dc      	b.n	8006e0e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in == 0U)
 8006e54:	2a00      	cmp	r2, #0
 8006e56:	d14a      	bne.n	8006eee <USB_DeactivateEndpoint+0x11a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e58:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e5c:	0451      	lsls	r1, r2, #17
 8006e5e:	d50d      	bpl.n	8006e7c <USB_DeactivateEndpoint+0xa8>
 8006e60:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e64:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006e68:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006e6c:	0412      	lsls	r2, r2, #16
 8006e6e:	0c12      	lsrs	r2, r2, #16
 8006e70:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8006e74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006e78:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006e7c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e80:	0652      	lsls	r2, r2, #25
 8006e82:	d50d      	bpl.n	8006ea0 <USB_DeactivateEndpoint+0xcc>
 8006e84:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006e88:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006e8c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006e90:	0412      	lsls	r2, r2, #16
 8006e92:	0c12      	lsrs	r2, r2, #16
 8006e94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e98:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8006e9c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ea0:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_TX_DTOG(USBx, ep->num);
 8006ea4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006ea8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006eac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006eb0:	0412      	lsls	r2, r2, #16
 8006eb2:	0c12      	lsrs	r2, r2, #16
 8006eb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006eb8:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8006ebc:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ec0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006ec4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006ec8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006ecc:	0412      	lsls	r2, r2, #16
 8006ece:	0c12      	lsrs	r2, r2, #16
 8006ed0:	430a      	orrs	r2, r1
 8006ed2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006ed6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006eda:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006ede:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006ee2:	0412      	lsls	r2, r2, #16
 8006ee4:	0c12      	lsrs	r2, r2, #16
 8006ee6:	4311      	orrs	r1, r2
 8006ee8:	f820 1023 	strh.w	r1, [r0, r3, lsl #2]
 8006eec:	e797      	b.n	8006e1e <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006eee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006ef2:	0451      	lsls	r1, r2, #17
 8006ef4:	d50d      	bpl.n	8006f12 <USB_DeactivateEndpoint+0x13e>
 8006ef6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006efa:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006efe:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006f02:	0412      	lsls	r2, r2, #16
 8006f04:	0c12      	lsrs	r2, r2, #16
 8006f06:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8006f0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006f0e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f12:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006f16:	0652      	lsls	r2, r2, #25
 8006f18:	d50d      	bpl.n	8006f36 <USB_DeactivateEndpoint+0x162>
 8006f1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006f1e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006f22:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006f26:	0412      	lsls	r2, r2, #16
 8006f28:	0c12      	lsrs	r2, r2, #16
 8006f2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f2e:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 8006f32:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f36:	f248 0180 	movw	r1, #32896	@ 0x8080
      PCD_RX_DTOG(USBx, ep->num);
 8006f3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006f3e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006f42:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006f46:	0412      	lsls	r2, r2, #16
 8006f48:	0c12      	lsrs	r2, r2, #16
 8006f4a:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8006f4e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006f52:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f56:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006f5a:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8006f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f62:	0412      	lsls	r2, r2, #16
 8006f64:	0c12      	lsrs	r2, r2, #16
 8006f66:	430a      	orrs	r2, r1
 8006f68:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006f6c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8006f70:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006f74:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006f78:	e7b3      	b.n	8006ee2 <USB_DeactivateEndpoint+0x10e>

08006f7a <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8006f7a:	784b      	ldrb	r3, [r1, #1]
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f7c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in != 0U)
 8006f7e:	b18b      	cbz	r3, 8006fa4 <USB_EPSetStall+0x2a>
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006f80:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006f84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f8c:	041b      	lsls	r3, r3, #16
 8006f8e:	0c1b      	lsrs	r3, r3, #16
 8006f90:	f083 0310 	eor.w	r3, r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f9c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8006fa0:	2000      	movs	r0, #0
 8006fa2:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006fa4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006fa8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006fac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fb0:	041b      	lsls	r3, r3, #16
 8006fb2:	0c1b      	lsrs	r3, r3, #16
 8006fb4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006fb8:	e7ec      	b.n	8006f94 <USB_EPSetStall+0x1a>

08006fba <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8006fba:	7b0b      	ldrb	r3, [r1, #12]
 8006fbc:	bb3b      	cbnz	r3, 800700e <USB_EPClearStall+0x54>
  {
    if (ep->is_in != 0U)
 8006fbe:	784b      	ldrb	r3, [r1, #1]
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fc0:	780a      	ldrb	r2, [r1, #0]
    if (ep->is_in != 0U)
 8006fc2:	b333      	cbz	r3, 8007012 <USB_EPClearStall+0x58>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006fc4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006fc8:	065b      	lsls	r3, r3, #25
 8006fca:	d50d      	bpl.n	8006fe8 <USB_EPClearStall+0x2e>
 8006fcc:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fd8:	041b      	lsls	r3, r3, #16
 8006fda:	0c1b      	lsrs	r3, r3, #16
 8006fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fe0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006fe4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]

      if (ep->type != EP_TYPE_ISOC)
 8006fe8:	78cb      	ldrb	r3, [r1, #3]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d00f      	beq.n	800700e <USB_EPClearStall+0x54>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006fee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8006ff2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006ff6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	0c1b      	lsrs	r3, r3, #16
 8006ffe:	f083 0320 	eor.w	r3, r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007002:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800700a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    }
  }

  return HAL_OK;
}
 800700e:	2000      	movs	r0, #0
 8007010:	4770      	bx	lr
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007012:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8007016:	045b      	lsls	r3, r3, #17
 8007018:	d50d      	bpl.n	8007036 <USB_EPClearStall+0x7c>
 800701a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800701e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007026:	041b      	lsls	r3, r3, #16
 8007028:	0c1b      	lsrs	r3, r3, #16
 800702a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800702e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007032:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007036:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800703a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800703e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007042:	041b      	lsls	r3, r3, #16
 8007044:	0c1b      	lsrs	r3, r3, #16
 8007046:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 800704a:	e7da      	b.n	8007002 <USB_EPClearStall+0x48>

0800704c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 800704c:	b911      	cbnz	r1, 8007054 <USB_SetDevAddress+0x8>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800704e:	2380      	movs	r3, #128	@ 0x80
 8007050:	f8a0 304c 	strh.w	r3, [r0, #76]	@ 0x4c
  }

  return HAL_OK;
}
 8007054:	2000      	movs	r0, #0
 8007056:	4770      	bx	lr

08007058 <USB_DevConnect>:
/**
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
 8007058:	2000      	movs	r0, #0
 800705a:	4770      	bx	lr

0800705c <USB_DevDisconnect>:
/**
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
 800705c:	2000      	movs	r0, #0
 800705e:	4770      	bx	lr

08007060 <USB_ReadInterrupts>:
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007060:	f8b0 0044 	ldrh.w	r0, [r0, #68]	@ 0x44
  return tmpreg;
}
 8007064:	b280      	uxth	r0, r0
 8007066:	4770      	bx	lr

08007068 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8007068:	2000      	movs	r0, #0
 800706a:	4770      	bx	lr

0800706c <USB_WritePMA>:
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800706c:	eb00 0042 	add.w	r0, r0, r2, lsl #1
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007070:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007072:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007076:	085b      	lsrs	r3, r3, #1
 8007078:	eb00 0383 	add.w	r3, r0, r3, lsl #2

  for (count = n; count != 0U; count--)
 800707c:	4283      	cmp	r3, r0
 800707e:	d100      	bne.n	8007082 <USB_WritePMA+0x16>
#endif /* PMA_ACCESS */

    pBuf++;
    pBuf++;
  }
}
 8007080:	4770      	bx	lr
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007082:	f831 2b02 	ldrh.w	r2, [r1], #2
    *pdwVal = (WrVal & 0xFFFFU);
 8007086:	f820 2b04 	strh.w	r2, [r0], #4
  for (count = n; count != 0U; count--)
 800708a:	e7f7      	b.n	800707c <USB_WritePMA+0x10>

0800708c <USB_EPStartXfer>:
{
 800708c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8007090:	784b      	ldrb	r3, [r1, #1]
{
 8007092:	4604      	mov	r4, r0
  if (ep->is_in == 1U)
 8007094:	2b01      	cmp	r3, #1
{
 8007096:	460d      	mov	r5, r1
    if (ep->doublebuffer == 0U)
 8007098:	7b0a      	ldrb	r2, [r1, #12]
  if (ep->is_in == 1U)
 800709a:	f040 8118 	bne.w	80072ce <USB_EPStartXfer+0x242>
    if (ep->xfer_len > ep->maxpacket)
 800709e:	f8d1 9010 	ldr.w	r9, [r1, #16]
 80070a2:	698f      	ldr	r7, [r1, #24]
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80070a4:	6949      	ldr	r1, [r1, #20]
    if (ep->xfer_len > ep->maxpacket)
 80070a6:	454f      	cmp	r7, r9
 80070a8:	bf28      	it	cs
 80070aa:	464f      	movcs	r7, r9
    if (ep->doublebuffer == 0U)
 80070ac:	bb0a      	cbnz	r2, 80070f2 <USB_EPStartXfer+0x66>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80070ae:	b2bf      	uxth	r7, r7
 80070b0:	88ea      	ldrh	r2, [r5, #6]
 80070b2:	463b      	mov	r3, r7
 80070b4:	f7ff ffda 	bl	800706c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80070b8:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80070bc:	7829      	ldrb	r1, [r5, #0]
 80070be:	b280      	uxth	r0, r0
 80070c0:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 80070c4:	0109      	lsls	r1, r1, #4
 80070c6:	4402      	add	r2, r0
 80070c8:	528f      	strh	r7, [r1, r2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070ca:	782a      	ldrb	r2, [r5, #0]
 80070cc:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80070d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	0c1b      	lsrs	r3, r3, #16
 80070dc:	f083 0330 	eor.w	r3, r3, #48	@ 0x30
  return HAL_OK;
 80070e0:	2000      	movs	r0, #0
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80070e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ea:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 80070ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (ep->type == EP_TYPE_BULK)
 80070f2:	78eb      	ldrb	r3, [r5, #3]
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80070f4:	f895 e000 	ldrb.w	lr, [r5]
      if (ep->type == EP_TYPE_BULK)
 80070f8:	2b02      	cmp	r3, #2
        if (ep->xfer_len_db > ep->maxpacket)
 80070fa:	6a2e      	ldr	r6, [r5, #32]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80070fc:	ea4f 1c0e 	mov.w	ip, lr, lsl #4
      if (ep->type == EP_TYPE_BULK)
 8007100:	f040 80d0 	bne.w	80072a4 <USB_EPStartXfer+0x218>
        if (ep->xfer_len_db > ep->maxpacket)
 8007104:	45b1      	cmp	r9, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007106:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        if (ep->xfer_len_db > ep->maxpacket)
 800710a:	f080 80b4 	bcs.w	8007276 <USB_EPStartXfer+0x1ea>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800710e:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8007112:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007116:	0412      	lsls	r2, r2, #16
 8007118:	0c12      	lsrs	r2, r2, #16
 800711a:	f442 4201 	orr.w	r2, r2, #33024	@ 0x8100
 800711e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007122:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007126:	f830 802e 	ldrh.w	r8, [r0, lr, lsl #2]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800712a:	f8b0 e050 	ldrh.w	lr, [r0, #80]	@ 0x50
          ep->xfer_len_db -= len;
 800712e:	1bf6      	subs	r6, r6, r7
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007130:	f018 0840 	ands.w	r8, r8, #64	@ 0x40
          ep->xfer_len_db -= len;
 8007134:	622e      	str	r6, [r5, #32]
            ep->xfer_buff += len;
 8007136:	eb01 0a07 	add.w	sl, r1, r7
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800713a:	b2bb      	uxth	r3, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800713c:	fa1f fe8e 	uxth.w	lr, lr
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007140:	d04e      	beq.n	80071e0 <USB_EPStartXfer+0x154>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007142:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 8007146:	4472      	add	r2, lr
 8007148:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800714c:	896a      	ldrh	r2, [r5, #10]
 800714e:	f7ff ff8d 	bl	800706c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 8007152:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 8007154:	bf36      	itet	cc
 8007156:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 8007158:	2300      	movcs	r3, #0
 800715a:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800715c:	786a      	ldrb	r2, [r5, #1]
 800715e:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 8007160:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007164:	b2b3      	uxth	r3, r6
 8007166:	bb7a      	cbnz	r2, 80071c8 <USB_EPStartXfer+0x13c>
 8007168:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800716c:	7828      	ldrb	r0, [r5, #0]
 800716e:	b292      	uxth	r2, r2
 8007170:	f204 4104 	addw	r1, r4, #1028	@ 0x404
 8007174:	0100      	lsls	r0, r0, #4
 8007176:	4411      	add	r1, r2
 8007178:	5a42      	ldrh	r2, [r0, r1]
 800717a:	2e3e      	cmp	r6, #62	@ 0x3e
 800717c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007180:	5242      	strh	r2, [r0, r1]
 8007182:	d914      	bls.n	80071ae <USB_EPStartXfer+0x122>
 8007184:	5a42      	ldrh	r2, [r0, r1]
 8007186:	0977      	lsrs	r7, r6, #5
 8007188:	06f6      	lsls	r6, r6, #27
 800718a:	bf08      	it	eq
 800718c:	f107 37ff 	addeq.w	r7, r7, #4294967295
 8007190:	b292      	uxth	r2, r2
 8007192:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8007196:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 800719a:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800719e:	b292      	uxth	r2, r2
 80071a0:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071a2:	892a      	ldrh	r2, [r5, #8]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071a4:	4651      	mov	r1, sl
 80071a6:	4620      	mov	r0, r4
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071a8:	f7ff ff60 	bl	800706c <USB_WritePMA>
 80071ac:	e78d      	b.n	80070ca <USB_EPStartXfer+0x3e>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071ae:	b90e      	cbnz	r6, 80071b4 <USB_EPStartXfer+0x128>
 80071b0:	5a42      	ldrh	r2, [r0, r1]
 80071b2:	e7f0      	b.n	8007196 <USB_EPStartXfer+0x10a>
 80071b4:	07f2      	lsls	r2, r6, #31
 80071b6:	5a42      	ldrh	r2, [r0, r1]
 80071b8:	ea4f 0756 	mov.w	r7, r6, lsr #1
 80071bc:	bf48      	it	mi
 80071be:	3701      	addmi	r7, #1
 80071c0:	b292      	uxth	r2, r2
 80071c2:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 80071c6:	e7ea      	b.n	800719e <USB_EPStartXfer+0x112>
 80071c8:	2a01      	cmp	r2, #1
 80071ca:	d1ea      	bne.n	80071a2 <USB_EPStartXfer+0x116>
 80071cc:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 80071d0:	7829      	ldrb	r1, [r5, #0]
 80071d2:	b280      	uxth	r0, r0
 80071d4:	f204 4204 	addw	r2, r4, #1028	@ 0x404
 80071d8:	0109      	lsls	r1, r1, #4
 80071da:	4402      	add	r2, r0
 80071dc:	528b      	strh	r3, [r1, r2]
 80071de:	e7e0      	b.n	80071a2 <USB_EPStartXfer+0x116>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071e0:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80071e4:	4472      	add	r2, lr
 80071e6:	f822 300c 	strh.w	r3, [r2, ip]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ea:	892a      	ldrh	r2, [r5, #8]
 80071ec:	f7ff ff3e 	bl	800706c <USB_WritePMA>
            if (ep->xfer_len_db > ep->maxpacket)
 80071f0:	45b1      	cmp	r9, r6
              ep->xfer_len_db -= len;
 80071f2:	bf36      	itet	cc
 80071f4:	1bf3      	subcc	r3, r6, r7
              ep->xfer_len_db = 0U;
 80071f6:	4643      	movcs	r3, r8
 80071f8:	463e      	movcc	r6, r7
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071fa:	786a      	ldrb	r2, [r5, #1]
 80071fc:	622b      	str	r3, [r5, #32]
            ep->xfer_buff += len;
 80071fe:	f8c5 a014 	str.w	sl, [r5, #20]
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007202:	b2b3      	uxth	r3, r6
 8007204:	bb5a      	cbnz	r2, 800725e <USB_EPStartXfer+0x1d2>
 8007206:	f8b4 2050 	ldrh.w	r2, [r4, #80]	@ 0x50
 800720a:	7828      	ldrb	r0, [r5, #0]
 800720c:	b292      	uxth	r2, r2
 800720e:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8007212:	0100      	lsls	r0, r0, #4
 8007214:	4411      	add	r1, r2
 8007216:	5a42      	ldrh	r2, [r0, r1]
 8007218:	2e3e      	cmp	r6, #62	@ 0x3e
 800721a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800721e:	5242      	strh	r2, [r0, r1]
 8007220:	d910      	bls.n	8007244 <USB_EPStartXfer+0x1b8>
 8007222:	5a42      	ldrh	r2, [r0, r1]
 8007224:	0977      	lsrs	r7, r6, #5
 8007226:	06f6      	lsls	r6, r6, #27
 8007228:	bf08      	it	eq
 800722a:	f107 37ff 	addeq.w	r7, r7, #4294967295
 800722e:	b292      	uxth	r2, r2
 8007230:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 8007234:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 8007238:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 800723c:	b292      	uxth	r2, r2
 800723e:	5242      	strh	r2, [r0, r1]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007240:	896a      	ldrh	r2, [r5, #10]
 8007242:	e7af      	b.n	80071a4 <USB_EPStartXfer+0x118>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007244:	b90e      	cbnz	r6, 800724a <USB_EPStartXfer+0x1be>
 8007246:	5a42      	ldrh	r2, [r0, r1]
 8007248:	e7f4      	b.n	8007234 <USB_EPStartXfer+0x1a8>
 800724a:	07f2      	lsls	r2, r6, #31
 800724c:	5a42      	ldrh	r2, [r0, r1]
 800724e:	ea4f 0756 	mov.w	r7, r6, lsr #1
 8007252:	bf48      	it	mi
 8007254:	3701      	addmi	r7, #1
 8007256:	b292      	uxth	r2, r2
 8007258:	ea42 2287 	orr.w	r2, r2, r7, lsl #10
 800725c:	e7ee      	b.n	800723c <USB_EPStartXfer+0x1b0>
 800725e:	2a01      	cmp	r2, #1
 8007260:	d1ee      	bne.n	8007240 <USB_EPStartXfer+0x1b4>
 8007262:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8007266:	7829      	ldrb	r1, [r5, #0]
 8007268:	b280      	uxth	r0, r0
 800726a:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 800726e:	0109      	lsls	r1, r1, #4
 8007270:	4402      	add	r2, r0
 8007272:	528b      	strh	r3, [r1, r2]
 8007274:	e7e4      	b.n	8007240 <USB_EPStartXfer+0x1b4>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007276:	f422 42e2 	bic.w	r2, r2, #28928	@ 0x7100
 800727a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800727e:	0412      	lsls	r2, r2, #16
 8007280:	0c12      	lsrs	r2, r2, #16
 8007282:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007286:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800728a:	f820 202e 	strh.w	r2, [r0, lr, lsl #2]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800728e:	f8b0 3050 	ldrh.w	r3, [r0, #80]	@ 0x50
 8007292:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 8007296:	b29b      	uxth	r3, r3
 8007298:	441a      	add	r2, r3
 800729a:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800729c:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072a0:	892a      	ldrh	r2, [r5, #8]
 80072a2:	e781      	b.n	80071a8 <USB_EPStartXfer+0x11c>
        ep->xfer_len_db -= len;
 80072a4:	1bf6      	subs	r6, r6, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072a6:	f830 202e 	ldrh.w	r2, [r0, lr, lsl #2]
        ep->xfer_len_db -= len;
 80072aa:	622e      	str	r6, [r5, #32]
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072ac:	f8b0 6050 	ldrh.w	r6, [r0, #80]	@ 0x50
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80072b0:	b2bb      	uxth	r3, r7
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072b2:	0657      	lsls	r7, r2, #25
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072b4:	b2b6      	uxth	r6, r6
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072b6:	d506      	bpl.n	80072c6 <USB_EPStartXfer+0x23a>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072b8:	f200 420c 	addw	r2, r0, #1036	@ 0x40c
 80072bc:	4432      	add	r2, r6
 80072be:	f822 300c 	strh.w	r3, [r2, ip]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072c2:	896a      	ldrh	r2, [r5, #10]
 80072c4:	e770      	b.n	80071a8 <USB_EPStartXfer+0x11c>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80072c6:	f200 4204 	addw	r2, r0, #1028	@ 0x404
 80072ca:	4432      	add	r2, r6
 80072cc:	e7e6      	b.n	800729c <USB_EPStartXfer+0x210>
    if (ep->doublebuffer == 0U)
 80072ce:	2a00      	cmp	r2, #0
 80072d0:	d13b      	bne.n	800734a <USB_EPStartXfer+0x2be>
      if (ep->xfer_len > ep->maxpacket)
 80072d2:	698b      	ldr	r3, [r1, #24]
 80072d4:	6909      	ldr	r1, [r1, #16]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80072d6:	f8b0 0050 	ldrh.w	r0, [r0, #80]	@ 0x50
      if (ep->xfer_len > ep->maxpacket)
 80072da:	428b      	cmp	r3, r1
        ep->xfer_len -= len;
 80072dc:	bf84      	itt	hi
 80072de:	1a5a      	subhi	r2, r3, r1
        len = ep->maxpacket;
 80072e0:	460b      	movhi	r3, r1
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80072e2:	7829      	ldrb	r1, [r5, #0]
 80072e4:	61aa      	str	r2, [r5, #24]
 80072e6:	b280      	uxth	r0, r0
 80072e8:	f204 420c 	addw	r2, r4, #1036	@ 0x40c
 80072ec:	0109      	lsls	r1, r1, #4
 80072ee:	4402      	add	r2, r0
 80072f0:	5a88      	ldrh	r0, [r1, r2]
 80072f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80072f4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80072f8:	5288      	strh	r0, [r1, r2]
 80072fa:	d91a      	bls.n	8007332 <USB_EPStartXfer+0x2a6>
 80072fc:	0958      	lsrs	r0, r3, #5
 80072fe:	06de      	lsls	r6, r3, #27
 8007300:	5a8b      	ldrh	r3, [r1, r2]
 8007302:	bf08      	it	eq
 8007304:	f100 30ff 	addeq.w	r0, r0, #4294967295
 8007308:	b29b      	uxth	r3, r3
 800730a:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 800730e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007316:	b29b      	uxth	r3, r3
 8007318:	528b      	strh	r3, [r1, r2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800731a:	782a      	ldrb	r2, [r5, #0]
 800731c:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8007320:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007328:	041b      	lsls	r3, r3, #16
 800732a:	0c1b      	lsrs	r3, r3, #16
 800732c:	f483 5340 	eor.w	r3, r3, #12288	@ 0x3000
 8007330:	e6d6      	b.n	80070e0 <USB_EPStartXfer+0x54>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007332:	b90b      	cbnz	r3, 8007338 <USB_EPStartXfer+0x2ac>
 8007334:	5a8b      	ldrh	r3, [r1, r2]
 8007336:	e7ea      	b.n	800730e <USB_EPStartXfer+0x282>
 8007338:	0858      	lsrs	r0, r3, #1
 800733a:	07db      	lsls	r3, r3, #31
 800733c:	5a8b      	ldrh	r3, [r1, r2]
 800733e:	bf48      	it	mi
 8007340:	3001      	addmi	r0, #1
 8007342:	b29b      	uxth	r3, r3
 8007344:	ea43 2380 	orr.w	r3, r3, r0, lsl #10
 8007348:	e7e5      	b.n	8007316 <USB_EPStartXfer+0x28a>
      if (ep->type == EP_TYPE_BULK)
 800734a:	78ca      	ldrb	r2, [r1, #3]
 800734c:	2a02      	cmp	r2, #2
 800734e:	d170      	bne.n	8007432 <USB_EPStartXfer+0x3a6>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007350:	2b00      	cmp	r3, #0
 8007352:	d138      	bne.n	80073c6 <USB_EPStartXfer+0x33a>
 8007354:	f8b0 2050 	ldrh.w	r2, [r0, #80]	@ 0x50
 8007358:	780b      	ldrb	r3, [r1, #0]
 800735a:	b292      	uxth	r2, r2
 800735c:	f200 4004 	addw	r0, r0, #1028	@ 0x404
 8007360:	011b      	lsls	r3, r3, #4
 8007362:	4410      	add	r0, r2
 8007364:	5ac2      	ldrh	r2, [r0, r3]
 8007366:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800736a:	52c2      	strh	r2, [r0, r3]
 800736c:	690a      	ldr	r2, [r1, #16]
 800736e:	2a3e      	cmp	r2, #62	@ 0x3e
 8007370:	d946      	bls.n	8007400 <USB_EPStartXfer+0x374>
 8007372:	5ac1      	ldrh	r1, [r0, r3]
 8007374:	0956      	lsrs	r6, r2, #5
 8007376:	06d7      	lsls	r7, r2, #27
 8007378:	bf08      	it	eq
 800737a:	f106 36ff 	addeq.w	r6, r6, #4294967295
 800737e:	b289      	uxth	r1, r1
 8007380:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007384:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007388:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 800738c:	b289      	uxth	r1, r1
 800738e:	52c1      	strh	r1, [r0, r3]
 8007390:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 8007394:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8007398:	b280      	uxth	r0, r0
 800739a:	4401      	add	r1, r0
 800739c:	5ac8      	ldrh	r0, [r1, r3]
 800739e:	2a3e      	cmp	r2, #62	@ 0x3e
 80073a0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80073a4:	52c8      	strh	r0, [r1, r3]
 80073a6:	d938      	bls.n	800741a <USB_EPStartXfer+0x38e>
 80073a8:	0950      	lsrs	r0, r2, #5
 80073aa:	06d7      	lsls	r7, r2, #27
 80073ac:	5aca      	ldrh	r2, [r1, r3]
 80073ae:	bf08      	it	eq
 80073b0:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80073b4:	b292      	uxth	r2, r2
 80073b6:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80073ba:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80073be:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80073c2:	b292      	uxth	r2, r2
 80073c4:	52ca      	strh	r2, [r1, r3]
        if (ep->xfer_count != 0U)
 80073c6:	69eb      	ldr	r3, [r5, #28]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d0a6      	beq.n	800731a <USB_EPStartXfer+0x28e>
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80073cc:	f244 0340 	movw	r3, #16448	@ 0x4040
 80073d0:	782a      	ldrb	r2, [r5, #0]
 80073d2:	f834 1022 	ldrh.w	r1, [r4, r2, lsl #2]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80073d6:	ea03 0001 	and.w	r0, r3, r1
 80073da:	438b      	bics	r3, r1
 80073dc:	d001      	beq.n	80073e2 <USB_EPStartXfer+0x356>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d19b      	bne.n	800731a <USB_EPStartXfer+0x28e>
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80073e2:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 80073e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073ee:	041b      	lsls	r3, r3, #16
 80073f0:	0c1b      	lsrs	r3, r3, #16
 80073f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073f6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80073fa:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
 80073fe:	e78c      	b.n	800731a <USB_EPStartXfer+0x28e>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007400:	b90a      	cbnz	r2, 8007406 <USB_EPStartXfer+0x37a>
 8007402:	5ac1      	ldrh	r1, [r0, r3]
 8007404:	e7be      	b.n	8007384 <USB_EPStartXfer+0x2f8>
 8007406:	07d1      	lsls	r1, r2, #31
 8007408:	5ac1      	ldrh	r1, [r0, r3]
 800740a:	ea4f 0652 	mov.w	r6, r2, lsr #1
 800740e:	bf48      	it	mi
 8007410:	3601      	addmi	r6, #1
 8007412:	b289      	uxth	r1, r1
 8007414:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 8007418:	e7b8      	b.n	800738c <USB_EPStartXfer+0x300>
 800741a:	b90a      	cbnz	r2, 8007420 <USB_EPStartXfer+0x394>
 800741c:	5aca      	ldrh	r2, [r1, r3]
 800741e:	e7cc      	b.n	80073ba <USB_EPStartXfer+0x32e>
 8007420:	0850      	lsrs	r0, r2, #1
 8007422:	07d6      	lsls	r6, r2, #31
 8007424:	5aca      	ldrh	r2, [r1, r3]
 8007426:	bf48      	it	mi
 8007428:	3001      	addmi	r0, #1
 800742a:	b292      	uxth	r2, r2
 800742c:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8007430:	e7c7      	b.n	80073c2 <USB_EPStartXfer+0x336>
      else if (ep->type == EP_TYPE_ISOC)
 8007432:	2a01      	cmp	r2, #1
 8007434:	d15d      	bne.n	80074f2 <USB_EPStartXfer+0x466>
        if (ep->xfer_len > ep->maxpacket)
 8007436:	698a      	ldr	r2, [r1, #24]
 8007438:	6909      	ldr	r1, [r1, #16]
 800743a:	428a      	cmp	r2, r1
          ep->xfer_len = 0U;
 800743c:	bf94      	ite	ls
 800743e:	2000      	movls	r0, #0
          ep->xfer_len -= len;
 8007440:	1a50      	subhi	r0, r2, r1
 8007442:	61a8      	str	r0, [r5, #24]
          len = ep->maxpacket;
 8007444:	bf88      	it	hi
 8007446:	460a      	movhi	r2, r1
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007448:	2b00      	cmp	r3, #0
 800744a:	f47f af66 	bne.w	800731a <USB_EPStartXfer+0x28e>
 800744e:	f8b4 1050 	ldrh.w	r1, [r4, #80]	@ 0x50
 8007452:	782b      	ldrb	r3, [r5, #0]
 8007454:	b289      	uxth	r1, r1
 8007456:	f204 4004 	addw	r0, r4, #1028	@ 0x404
 800745a:	011b      	lsls	r3, r3, #4
 800745c:	4408      	add	r0, r1
 800745e:	5ac1      	ldrh	r1, [r0, r3]
 8007460:	2a3e      	cmp	r2, #62	@ 0x3e
 8007462:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8007466:	52c1      	strh	r1, [r0, r3]
 8007468:	d92b      	bls.n	80074c2 <USB_EPStartXfer+0x436>
 800746a:	06d1      	lsls	r1, r2, #27
 800746c:	5ac1      	ldrh	r1, [r0, r3]
 800746e:	ea4f 1652 	mov.w	r6, r2, lsr #5
 8007472:	bf08      	it	eq
 8007474:	f106 36ff 	addeq.w	r6, r6, #4294967295
 8007478:	b289      	uxth	r1, r1
 800747a:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 800747e:	ea6f 4141 	mvn.w	r1, r1, lsl #17
 8007482:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8007486:	b289      	uxth	r1, r1
 8007488:	52c1      	strh	r1, [r0, r3]
 800748a:	f8b4 0050 	ldrh.w	r0, [r4, #80]	@ 0x50
 800748e:	f204 410c 	addw	r1, r4, #1036	@ 0x40c
 8007492:	b280      	uxth	r0, r0
 8007494:	4401      	add	r1, r0
 8007496:	5ac8      	ldrh	r0, [r1, r3]
 8007498:	2a3e      	cmp	r2, #62	@ 0x3e
 800749a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800749e:	52c8      	strh	r0, [r1, r3]
 80074a0:	d91b      	bls.n	80074da <USB_EPStartXfer+0x44e>
 80074a2:	0950      	lsrs	r0, r2, #5
 80074a4:	06d6      	lsls	r6, r2, #27
 80074a6:	5aca      	ldrh	r2, [r1, r3]
 80074a8:	bf08      	it	eq
 80074aa:	f100 30ff 	addeq.w	r0, r0, #4294967295
 80074ae:	b292      	uxth	r2, r2
 80074b0:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80074b4:	ea6f 4242 	mvn.w	r2, r2, lsl #17
 80074b8:	ea6f 4252 	mvn.w	r2, r2, lsr #17
 80074bc:	b292      	uxth	r2, r2
 80074be:	52ca      	strh	r2, [r1, r3]
 80074c0:	e72b      	b.n	800731a <USB_EPStartXfer+0x28e>
 80074c2:	b90a      	cbnz	r2, 80074c8 <USB_EPStartXfer+0x43c>
 80074c4:	5ac1      	ldrh	r1, [r0, r3]
 80074c6:	e7da      	b.n	800747e <USB_EPStartXfer+0x3f2>
 80074c8:	5ac1      	ldrh	r1, [r0, r3]
 80074ca:	0856      	lsrs	r6, r2, #1
 80074cc:	07d7      	lsls	r7, r2, #31
 80074ce:	bf48      	it	mi
 80074d0:	3601      	addmi	r6, #1
 80074d2:	b289      	uxth	r1, r1
 80074d4:	ea41 2186 	orr.w	r1, r1, r6, lsl #10
 80074d8:	e7d5      	b.n	8007486 <USB_EPStartXfer+0x3fa>
 80074da:	b90a      	cbnz	r2, 80074e0 <USB_EPStartXfer+0x454>
 80074dc:	5aca      	ldrh	r2, [r1, r3]
 80074de:	e7e9      	b.n	80074b4 <USB_EPStartXfer+0x428>
 80074e0:	0850      	lsrs	r0, r2, #1
 80074e2:	07d2      	lsls	r2, r2, #31
 80074e4:	5aca      	ldrh	r2, [r1, r3]
 80074e6:	bf48      	it	mi
 80074e8:	3001      	addmi	r0, #1
 80074ea:	b292      	uxth	r2, r2
 80074ec:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 80074f0:	e7e4      	b.n	80074bc <USB_EPStartXfer+0x430>
        return HAL_ERROR;
 80074f2:	2001      	movs	r0, #1
 80074f4:	e5fb      	b.n	80070ee <USB_EPStartXfer+0x62>

080074f6 <USB_ReadPMA>:
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074f6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
{
 80074fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80074fc:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007500:	085d      	lsrs	r5, r3, #1

  for (count = n; count != 0U; count--)
 8007502:	460c      	mov	r4, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007504:	4607      	mov	r7, r0
  for (count = n; count != 0U; count--)
 8007506:	462e      	mov	r6, r5
 8007508:	3402      	adds	r4, #2
 800750a:	b936      	cbnz	r6, 800751a <USB_ReadPMA+0x24>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800750c:	07db      	lsls	r3, r3, #31
  {
    RdVal = *pdwVal;
 800750e:	bf44      	itt	mi
 8007510:	f830 3025 	ldrhmi.w	r3, [r0, r5, lsl #2]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007514:	f801 3015 	strbmi.w	r3, [r1, r5, lsl #1]
  }
}
 8007518:	bdf0      	pop	{r4, r5, r6, r7, pc}
    RdVal = *(__IO uint16_t *)pdwVal;
 800751a:	f837 2b04 	ldrh.w	r2, [r7], #4
  for (count = n; count != 0U; count--)
 800751e:	3e01      	subs	r6, #1
    RdVal = *(__IO uint16_t *)pdwVal;
 8007520:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8007522:	f804 2c02 	strb.w	r2, [r4, #-2]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8007526:	0a12      	lsrs	r2, r2, #8
 8007528:	f804 2c01 	strb.w	r2, [r4, #-1]
  for (count = n; count != 0U; count--)
 800752c:	e7ec      	b.n	8007508 <USB_ReadPMA+0x12>

0800752e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800752e:	f8d0 32bc 	ldr.w	r3, [r0, #700]	@ 0x2bc
{
 8007532:	b510      	push	{r4, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007534:	b16b      	cbz	r3, 8007552 <USBD_CDC_EP0_RxReady+0x24>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007536:	f8d0 42b8 	ldr.w	r4, [r0, #696]	@ 0x2b8
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800753a:	f894 0200 	ldrb.w	r0, [r4, #512]	@ 0x200
 800753e:	28ff      	cmp	r0, #255	@ 0xff
 8007540:	d007      	beq.n	8007552 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	4621      	mov	r1, r4
 8007546:	f894 2201 	ldrb.w	r2, [r4, #513]	@ 0x201
 800754a:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 800754c:	23ff      	movs	r3, #255	@ 0xff
 800754e:	f884 3200 	strb.w	r3, [r4, #512]	@ 0x200

  }
  return USBD_OK;
}
 8007552:	2000      	movs	r0, #0
 8007554:	bd10      	pop	{r4, pc}
	...

08007558 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8007558:	2343      	movs	r3, #67	@ 0x43
 800755a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800755c:	4800      	ldr	r0, [pc, #0]	@ (8007560 <USBD_CDC_GetFSCfgDesc+0x8>)
 800755e:	4770      	bx	lr
 8007560:	20000050 	.word	0x20000050

08007564 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8007564:	2343      	movs	r3, #67	@ 0x43
 8007566:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8007568:	4800      	ldr	r0, [pc, #0]	@ (800756c <USBD_CDC_GetHSCfgDesc+0x8>)
 800756a:	4770      	bx	lr
 800756c:	20000094 	.word	0x20000094

08007570 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007570:	2343      	movs	r3, #67	@ 0x43
 8007572:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8007574:	4800      	ldr	r0, [pc, #0]	@ (8007578 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8007576:	4770      	bx	lr
 8007578:	2000000c 	.word	0x2000000c

0800757c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800757c:	230a      	movs	r3, #10
 800757e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8007580:	4800      	ldr	r0, [pc, #0]	@ (8007584 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8007582:	4770      	bx	lr
 8007584:	20000110 	.word	0x20000110

08007588 <USBD_CDC_DataOut>:
{
 8007588:	b538      	push	{r3, r4, r5, lr}
 800758a:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800758c:	f8d0 52b8 	ldr.w	r5, [r0, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007590:	f000 ff20 	bl	80083d4 <USBD_LL_GetRxDataSize>
  if (pdev->pClassData != NULL)
 8007594:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007598:	f8c5 020c 	str.w	r0, [r5, #524]	@ 0x20c
  if (pdev->pClassData != NULL)
 800759c:	b14b      	cbz	r3, 80075b2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800759e:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80075a2:	f8d5 0204 	ldr.w	r0, [r5, #516]	@ 0x204
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f505 7103 	add.w	r1, r5, #524	@ 0x20c
 80075ac:	4798      	blx	r3
    return USBD_OK;
 80075ae:	2000      	movs	r0, #0
}
 80075b0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 80075b2:	2002      	movs	r0, #2
 80075b4:	e7fc      	b.n	80075b0 <USBD_CDC_DataOut+0x28>

080075b6 <USBD_CDC_DataIn>:
{
 80075b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80075b8:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  if (pdev->pClassData != NULL)
 80075bc:	b1ce      	cbz	r6, 80075f2 <USBD_CDC_DataIn+0x3c>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075be:	2214      	movs	r2, #20
 80075c0:	fb02 0201 	mla	r2, r2, r1, r0
 80075c4:	69d3      	ldr	r3, [r2, #28]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80075c6:	f8d0 52c0 	ldr.w	r5, [r0, #704]	@ 0x2c0
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80075ca:	b173      	cbz	r3, 80075ea <USBD_CDC_DataIn+0x34>
 80075cc:	2728      	movs	r7, #40	@ 0x28
 80075ce:	fb07 5401 	mla	r4, r7, r1, r5
 80075d2:	6a24      	ldr	r4, [r4, #32]
 80075d4:	fbb3 f5f4 	udiv	r5, r3, r4
 80075d8:	fb04 3315 	mls	r3, r4, r5, r3
 80075dc:	b92b      	cbnz	r3, 80075ea <USBD_CDC_DataIn+0x34>
      pdev->ep_in[epnum].total_length = 0U;
 80075de:	61d3      	str	r3, [r2, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075e0:	461a      	mov	r2, r3
 80075e2:	f000 fee5 	bl	80083b0 <USBD_LL_Transmit>
    return USBD_OK;
 80075e6:	2000      	movs	r0, #0
}
 80075e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
 80075f0:	e7f9      	b.n	80075e6 <USBD_CDC_DataIn+0x30>
    return USBD_FAIL;
 80075f2:	2002      	movs	r0, #2
 80075f4:	e7f8      	b.n	80075e8 <USBD_CDC_DataIn+0x32>

080075f6 <USBD_CDC_Setup>:
  uint8_t ifalt = 0U;
 80075f6:	2300      	movs	r3, #0
{
 80075f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075fa:	780f      	ldrb	r7, [r1, #0]
  uint8_t ifalt = 0U;
 80075fc:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8007600:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007604:	f017 0360 	ands.w	r3, r7, #96	@ 0x60
{
 8007608:	4604      	mov	r4, r0
 800760a:	460d      	mov	r5, r1
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800760c:	f8d0 62b8 	ldr.w	r6, [r0, #696]	@ 0x2b8
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007610:	d022      	beq.n	8007658 <USBD_CDC_Setup+0x62>
 8007612:	2b20      	cmp	r3, #32
 8007614:	d13a      	bne.n	800768c <USBD_CDC_Setup+0x96>
      if (req->wLength)
 8007616:	88ca      	ldrh	r2, [r1, #6]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007618:	784b      	ldrb	r3, [r1, #1]
      if (req->wLength)
 800761a:	b1ba      	cbz	r2, 800764c <USBD_CDC_Setup+0x56>
        if (req->bmRequest & 0x80U)
 800761c:	0639      	lsls	r1, r7, #24
 800761e:	d50b      	bpl.n	8007638 <USBD_CDC_Setup+0x42>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007620:	f8d0 12bc 	ldr.w	r1, [r0, #700]	@ 0x2bc
 8007624:	4618      	mov	r0, r3
 8007626:	688f      	ldr	r7, [r1, #8]
 8007628:	4631      	mov	r1, r6
 800762a:	47b8      	blx	r7
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800762c:	4631      	mov	r1, r6
 800762e:	4620      	mov	r0, r4
 8007630:	88ea      	ldrh	r2, [r5, #6]
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007632:	f000 fc5f 	bl	8007ef4 <USBD_CtlSendData>
 8007636:	e006      	b.n	8007646 <USBD_CDC_Setup+0x50>
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007638:	4631      	mov	r1, r6
          hcdc->CmdOpCode = req->bRequest;
 800763a:	f886 3200 	strb.w	r3, [r6, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800763e:	f886 2201 	strb.w	r2, [r6, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007642:	f000 fc6c 	bl	8007f1e <USBD_CtlPrepareRx>
  uint8_t ret = USBD_OK;
 8007646:	2000      	movs	r0, #0
}
 8007648:	b003      	add	sp, #12
 800764a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800764c:	f8d0 02bc 	ldr.w	r0, [r0, #700]	@ 0x2bc
 8007650:	6884      	ldr	r4, [r0, #8]
 8007652:	4618      	mov	r0, r3
 8007654:	47a0      	blx	r4
 8007656:	e7f6      	b.n	8007646 <USBD_CDC_Setup+0x50>
      switch (req->bRequest)
 8007658:	784b      	ldrb	r3, [r1, #1]
 800765a:	2b0a      	cmp	r3, #10
 800765c:	d00a      	beq.n	8007674 <USBD_CDC_Setup+0x7e>
 800765e:	2b0b      	cmp	r3, #11
 8007660:	d010      	beq.n	8007684 <USBD_CDC_Setup+0x8e>
 8007662:	b99b      	cbnz	r3, 800768c <USBD_CDC_Setup+0x96>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007664:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007668:	2b03      	cmp	r3, #3
 800766a:	d10f      	bne.n	800768c <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800766c:	2202      	movs	r2, #2
 800766e:	f10d 0106 	add.w	r1, sp, #6
 8007672:	e7de      	b.n	8007632 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007674:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007678:	2b03      	cmp	r3, #3
 800767a:	d107      	bne.n	800768c <USBD_CDC_Setup+0x96>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800767c:	2201      	movs	r2, #1
 800767e:	f10d 0105 	add.w	r1, sp, #5
 8007682:	e7d6      	b.n	8007632 <USBD_CDC_Setup+0x3c>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007684:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007688:	2b03      	cmp	r3, #3
 800768a:	d0dc      	beq.n	8007646 <USBD_CDC_Setup+0x50>
          USBD_CtlError(pdev, req);
 800768c:	4620      	mov	r0, r4
 800768e:	4629      	mov	r1, r5
 8007690:	f000 fc09 	bl	8007ea6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007694:	2002      	movs	r0, #2
 8007696:	e7d7      	b.n	8007648 <USBD_CDC_Setup+0x52>

08007698 <USBD_CDC_DeInit>:
{
 8007698:	b538      	push	{r3, r4, r5, lr}
 800769a:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800769c:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800769e:	2181      	movs	r1, #129	@ 0x81
 80076a0:	f000 fe51 	bl	8008346 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80076a4:	2101      	movs	r1, #1
 80076a6:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80076a8:	62e5      	str	r5, [r4, #44]	@ 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80076aa:	f000 fe4c 	bl	8008346 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80076ae:	2182      	movs	r1, #130	@ 0x82
 80076b0:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80076b2:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80076b6:	f000 fe46 	bl	8008346 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80076ba:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80076be:	6425      	str	r5, [r4, #64]	@ 0x40
  if (pdev->pClassData != NULL)
 80076c0:	b14b      	cbz	r3, 80076d6 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80076c2:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80076ca:	f8d4 02b8 	ldr.w	r0, [r4, #696]	@ 0x2b8
 80076ce:	f000 fe89 	bl	80083e4 <USBD_static_free>
    pdev->pClassData = NULL;
 80076d2:	f8c4 52b8 	str.w	r5, [r4, #696]	@ 0x2b8
}
 80076d6:	2000      	movs	r0, #0
 80076d8:	bd38      	pop	{r3, r4, r5, pc}

080076da <USBD_CDC_Init>:
{
 80076da:	b570      	push	{r4, r5, r6, lr}
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076dc:	7c03      	ldrb	r3, [r0, #16]
{
 80076de:	4604      	mov	r4, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076e0:	bba3      	cbnz	r3, 800774c <USBD_CDC_Init+0x72>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80076e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076e6:	2181      	movs	r1, #129	@ 0x81
 80076e8:	2202      	movs	r2, #2
 80076ea:	f000 fe20 	bl	800832e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80076ee:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80076f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80076f4:	62e1      	str	r1, [r4, #44]	@ 0x2c
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80076f6:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80076f8:	2202      	movs	r2, #2
 80076fa:	4620      	mov	r0, r4
 80076fc:	f000 fe17 	bl	800832e <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007700:	2308      	movs	r3, #8
 8007702:	2203      	movs	r2, #3
 8007704:	2182      	movs	r1, #130	@ 0x82
 8007706:	4620      	mov	r0, r4
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007708:	f8c4 516c 	str.w	r5, [r4, #364]	@ 0x16c
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800770c:	f000 fe0f 	bl	800832e <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007710:	f44f 7007 	mov.w	r0, #540	@ 0x21c
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007714:	6425      	str	r5, [r4, #64]	@ 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007716:	f000 fe61 	bl	80083dc <USBD_static_malloc>
 800771a:	4606      	mov	r6, r0
 800771c:	f8c4 02b8 	str.w	r0, [r4, #696]	@ 0x2b8
  if (pdev->pClassData == NULL)
 8007720:	b1f8      	cbz	r0, 8007762 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007722:	f8d4 32bc 	ldr.w	r3, [r4, #700]	@ 0x2bc
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4798      	blx	r3
    hcdc->TxState = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	f8c6 3214 	str.w	r3, [r6, #532]	@ 0x214
    hcdc->RxState = 0U;
 8007730:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007734:	7c23      	ldrb	r3, [r4, #16]
 8007736:	b993      	cbnz	r3, 800775e <USBD_CDC_Init+0x84>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007738:	f44f 7300 	mov.w	r3, #512	@ 0x200
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800773c:	4629      	mov	r1, r5
 800773e:	4620      	mov	r0, r4
 8007740:	f8d6 2204 	ldr.w	r2, [r6, #516]	@ 0x204
 8007744:	f000 fe3d 	bl	80083c2 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 8007748:	2000      	movs	r0, #0
}
 800774a:	bd70      	pop	{r4, r5, r6, pc}
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800774c:	2340      	movs	r3, #64	@ 0x40
 800774e:	2181      	movs	r1, #129	@ 0x81
 8007750:	2202      	movs	r2, #2
 8007752:	f000 fdec 	bl	800832e <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007756:	2101      	movs	r1, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007758:	2340      	movs	r3, #64	@ 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800775a:	62e1      	str	r1, [r4, #44]	@ 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800775c:	e7cb      	b.n	80076f6 <USBD_CDC_Init+0x1c>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800775e:	2340      	movs	r3, #64	@ 0x40
 8007760:	e7ec      	b.n	800773c <USBD_CDC_Init+0x62>
    ret = 1U;
 8007762:	4628      	mov	r0, r5
 8007764:	e7f1      	b.n	800774a <USBD_CDC_Init+0x70>

08007766 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;

  if (fops != NULL)
 8007766:	b119      	cbz	r1, 8007770 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData = fops;
 8007768:	f8c0 12bc 	str.w	r1, [r0, #700]	@ 0x2bc
    ret = USBD_OK;
 800776c:	2000      	movs	r0, #0
 800776e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8007770:	2002      	movs	r0, #2
  }

  return ret;
}
 8007772:	4770      	bx	lr

08007774 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007774:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return USBD_OK;
}
 8007778:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800777a:	f8c3 1208 	str.w	r1, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800777e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8007782:	4770      	bx	lr

08007784 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8007784:	f8d0 32b8 	ldr.w	r3, [r0, #696]	@ 0x2b8

  return USBD_OK;
}
 8007788:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800778a:	f8c3 1204 	str.w	r1, [r3, #516]	@ 0x204
}
 800778e:	4770      	bx	lr

08007790 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007790:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 8007794:	b510      	push	{r4, lr}

  if (pdev->pClassData != NULL)
 8007796:	b182      	cbz	r2, 80077ba <USBD_CDC_TransmitPacket+0x2a>
  {
    if (hcdc->TxState == 0U)
 8007798:	f8d2 4214 	ldr.w	r4, [r2, #532]	@ 0x214
 800779c:	2301      	movs	r3, #1
 800779e:	b974      	cbnz	r4, 80077be <USBD_CDC_TransmitPacket+0x2e>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80077a0:	f8c2 3214 	str.w	r3, [r2, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80077a4:	f8d2 3210 	ldr.w	r3, [r2, #528]	@ 0x210

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80077a8:	2181      	movs	r1, #129	@ 0x81
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80077aa:	6303      	str	r3, [r0, #48]	@ 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80077ac:	f8d2 2208 	ldr.w	r2, [r2, #520]	@ 0x208
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f000 fdfd 	bl	80083b0 <USBD_LL_Transmit>
                       (uint16_t)hcdc->TxLength);

      return USBD_OK;
 80077b6:	4620      	mov	r0, r4
  }
  else
  {
    return USBD_FAIL;
  }
}
 80077b8:	bd10      	pop	{r4, pc}
    return USBD_FAIL;
 80077ba:	2002      	movs	r0, #2
 80077bc:	e7fc      	b.n	80077b8 <USBD_CDC_TransmitPacket+0x28>
      return USBD_BUSY;
 80077be:	4618      	mov	r0, r3
 80077c0:	e7fa      	b.n	80077b8 <USBD_CDC_TransmitPacket+0x28>

080077c2 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80077c2:	f8d0 22b8 	ldr.w	r2, [r0, #696]	@ 0x2b8
{
 80077c6:	b508      	push	{r3, lr}

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80077c8:	b162      	cbz	r2, 80077e4 <USBD_CDC_ReceivePacket+0x22>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077ca:	7c03      	ldrb	r3, [r0, #16]
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80077cc:	f8d2 2204 	ldr.w	r2, [r2, #516]	@ 0x204
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077d0:	b933      	cbnz	r3, 80077e0 <USBD_CDC_ReceivePacket+0x1e>
      USBD_LL_PrepareReceive(pdev,
 80077d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80077d6:	2101      	movs	r1, #1
 80077d8:	f000 fdf3 	bl	80083c2 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80077dc:	2000      	movs	r0, #0
  }
  else
  {
    return USBD_FAIL;
  }
}
 80077de:	bd08      	pop	{r3, pc}
      USBD_LL_PrepareReceive(pdev,
 80077e0:	2340      	movs	r3, #64	@ 0x40
 80077e2:	e7f8      	b.n	80077d6 <USBD_CDC_ReceivePacket+0x14>
    return USBD_FAIL;
 80077e4:	2002      	movs	r0, #2
 80077e6:	e7fa      	b.n	80077de <USBD_CDC_ReceivePacket+0x1c>

080077e8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80077e8:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80077ea:	b180      	cbz	r0, 800780e <USBD_Init+0x26>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80077ec:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80077f0:	b113      	cbz	r3, 80077f8 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	f8c0 32b4 	str.w	r3, [r0, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077f8:	b109      	cbz	r1, 80077fe <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80077fa:	f8c0 12b0 	str.w	r1, [r0, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077fe:	2301      	movs	r3, #1
  pdev->id = id;
 8007800:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007802:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007806:	f000 fcff 	bl	8008208 <USBD_LL_Init>

  return USBD_OK;
 800780a:	2000      	movs	r0, #0
}
 800780c:	bd08      	pop	{r3, pc}
    return USBD_FAIL;
 800780e:	2002      	movs	r0, #2
 8007810:	e7fc      	b.n	800780c <USBD_Init+0x24>

08007812 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef status = USBD_OK;
  if (pclass != NULL)
 8007812:	b119      	cbz	r1, 800781c <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007814:	f8c0 12b4 	str.w	r1, [r0, #692]	@ 0x2b4
    status = USBD_OK;
 8007818:	2000      	movs	r0, #0
 800781a:	4770      	bx	lr
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800781c:	2002      	movs	r0, #2
  }

  return status;
}
 800781e:	4770      	bx	lr

08007820 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007820:	b508      	push	{r3, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007822:	f000 fd7b 	bl	800831c <USBD_LL_Start>

  return USBD_OK;
}
 8007826:	2000      	movs	r0, #0
 8007828:	bd08      	pop	{r3, pc}

0800782a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800782a:	b508      	push	{r3, lr}
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 800782c:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007830:	b133      	cbz	r3, 8007840 <USBD_SetClassConfig+0x16>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4798      	blx	r3
 8007836:	3800      	subs	r0, #0
 8007838:	bf18      	it	ne
 800783a:	2001      	movne	r0, #1
 800783c:	0040      	lsls	r0, r0, #1
      ret = USBD_OK;
    }
  }

  return ret;
}
 800783e:	bd08      	pop	{r3, pc}
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007840:	2002      	movs	r0, #2
 8007842:	e7fc      	b.n	800783e <USBD_SetClassConfig+0x14>

08007844 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007844:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007846:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	4798      	blx	r3

  return USBD_OK;
}
 800784e:	2000      	movs	r0, #0
 8007850:	bd08      	pop	{r3, pc}

08007852 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007852:	b538      	push	{r3, r4, r5, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007854:	f500 752a 	add.w	r5, r0, #680	@ 0x2a8
{
 8007858:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800785a:	4628      	mov	r0, r5
 800785c:	f000 fb18 	bl	8007e90 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007860:	2301      	movs	r3, #1

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8007862:	f894 12a8 	ldrb.w	r1, [r4, #680]	@ 0x2a8
  pdev->ep0_state = USBD_EP0_SETUP;
 8007866:	f8c4 3294 	str.w	r3, [r4, #660]	@ 0x294
  pdev->ep0_data_len = pdev->request.wLength;
 800786a:	f8b4 32ae 	ldrh.w	r3, [r4, #686]	@ 0x2ae
 800786e:	f8c4 3298 	str.w	r3, [r4, #664]	@ 0x298
  switch (pdev->request.bmRequest & 0x1FU)
 8007872:	f001 031f 	and.w	r3, r1, #31
 8007876:	2b01      	cmp	r3, #1
 8007878:	d008      	beq.n	800788c <USBD_LL_SetupStage+0x3a>
 800787a:	2b02      	cmp	r3, #2
 800787c:	d00b      	beq.n	8007896 <USBD_LL_SetupStage+0x44>
 800787e:	b97b      	cbnz	r3, 80078a0 <USBD_LL_SetupStage+0x4e>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8007880:	4629      	mov	r1, r5
 8007882:	4620      	mov	r0, r4
 8007884:	f000 f90c 	bl	8007aa0 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8007888:	2000      	movs	r0, #0
 800788a:	bd38      	pop	{r3, r4, r5, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800788c:	4629      	mov	r1, r5
 800788e:	4620      	mov	r0, r4
 8007890:	f000 fa4e 	bl	8007d30 <USBD_StdItfReq>
      break;
 8007894:	e7f8      	b.n	8007888 <USBD_LL_SetupStage+0x36>
      USBD_StdEPReq(pdev, &pdev->request);
 8007896:	4629      	mov	r1, r5
 8007898:	4620      	mov	r0, r4
 800789a:	f000 fa6d 	bl	8007d78 <USBD_StdEPReq>
      break;
 800789e:	e7f3      	b.n	8007888 <USBD_LL_SetupStage+0x36>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80078a0:	4620      	mov	r0, r4
 80078a2:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 80078a6:	f000 fd57 	bl	8008358 <USBD_LL_StallEP>
      break;
 80078aa:	e7ed      	b.n	8007888 <USBD_LL_SetupStage+0x36>

080078ac <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	4604      	mov	r4, r0
 80078b0:	4616      	mov	r6, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80078b2:	bb39      	cbnz	r1, 8007904 <USBD_LL_DataOutStage+0x58>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80078b4:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 80078b8:	2a03      	cmp	r2, #3
 80078ba:	d11c      	bne.n	80078f6 <USBD_LL_DataOutStage+0x4a>
    {
      if (pep->rem_length > pep->maxpacket)
 80078bc:	e9d0 5258 	ldrd	r5, r2, [r0, #352]	@ 0x160
 80078c0:	4295      	cmp	r5, r2
 80078c2:	d90b      	bls.n	80078dc <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -= pep->maxpacket;
 80078c4:	1aad      	subs	r5, r5, r2

        USBD_CtlContinueRx(pdev, pdata,
 80078c6:	42aa      	cmp	r2, r5
 80078c8:	4631      	mov	r1, r6
        pep->rem_length -= pep->maxpacket;
 80078ca:	f8c0 5160 	str.w	r5, [r0, #352]	@ 0x160
        USBD_CtlContinueRx(pdev, pdata,
 80078ce:	bf8c      	ite	hi
 80078d0:	b2aa      	uxthhi	r2, r5
 80078d2:	b292      	uxthls	r2, r2
 80078d4:	f000 fb30 	bl	8007f38 <USBD_CtlContinueRx>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80078d8:	2000      	movs	r0, #0
}
 80078da:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80078dc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	b123      	cbz	r3, 80078ee <USBD_LL_DataOutStage+0x42>
 80078e4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80078e8:	2a03      	cmp	r2, #3
 80078ea:	d100      	bne.n	80078ee <USBD_LL_DataOutStage+0x42>
          pdev->pClass->EP0_RxReady(pdev);
 80078ec:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80078ee:	4620      	mov	r0, r4
 80078f0:	f000 fb2a 	bl	8007f48 <USBD_CtlSendStatus>
 80078f4:	e7f0      	b.n	80078d8 <USBD_LL_DataOutStage+0x2c>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80078f6:	2a05      	cmp	r2, #5
 80078f8:	d1ee      	bne.n	80078d8 <USBD_LL_DataOutStage+0x2c>
        pdev->ep0_state = USBD_EP0_IDLE;
 80078fa:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80078fe:	f000 fd2b 	bl	8008358 <USBD_LL_StallEP>
 8007902:	e7e9      	b.n	80078d8 <USBD_LL_DataOutStage+0x2c>
  else if ((pdev->pClass->DataOut != NULL) &&
 8007904:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	b12b      	cbz	r3, 8007918 <USBD_LL_DataOutStage+0x6c>
 800790c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8007910:	2a03      	cmp	r2, #3
 8007912:	d101      	bne.n	8007918 <USBD_LL_DataOutStage+0x6c>
    pdev->pClass->DataOut(pdev, epnum);
 8007914:	4798      	blx	r3
 8007916:	e7df      	b.n	80078d8 <USBD_LL_DataOutStage+0x2c>
    return USBD_FAIL;
 8007918:	2002      	movs	r0, #2
 800791a:	e7de      	b.n	80078da <USBD_LL_DataOutStage+0x2e>

0800791c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800791e:	4604      	mov	r4, r0
 8007920:	4613      	mov	r3, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007922:	460f      	mov	r7, r1
 8007924:	2900      	cmp	r1, #0
 8007926:	d149      	bne.n	80079bc <USBD_LL_DataInStage+0xa0>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007928:	f8d0 2294 	ldr.w	r2, [r0, #660]	@ 0x294
 800792c:	2a02      	cmp	r2, #2
 800792e:	d13a      	bne.n	80079a6 <USBD_LL_DataInStage+0x8a>
    {
      if (pep->rem_length > pep->maxpacket)
 8007930:	e9d0 5608 	ldrd	r5, r6, [r0, #32]
 8007934:	42b5      	cmp	r5, r6
 8007936:	d911      	bls.n	800795c <USBD_LL_DataInStage+0x40>
      {
        pep->rem_length -= pep->maxpacket;
 8007938:	1bad      	subs	r5, r5, r6

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800793a:	4619      	mov	r1, r3
        pep->rem_length -= pep->maxpacket;
 800793c:	6205      	str	r5, [r0, #32]
        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800793e:	b2aa      	uxth	r2, r5
 8007940:	f000 fae5 	bl	8007f0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007944:	463b      	mov	r3, r7
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007946:	461a      	mov	r2, r3
 8007948:	4619      	mov	r1, r3
 800794a:	4620      	mov	r0, r4
 800794c:	f000 fd39 	bl	80083c2 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007950:	f894 32a0 	ldrb.w	r3, [r4, #672]	@ 0x2a0
 8007954:	2b01      	cmp	r3, #1
 8007956:	d02d      	beq.n	80079b4 <USBD_LL_DataInStage+0x98>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8007958:	2000      	movs	r0, #0
}
 800795a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800795c:	69c3      	ldr	r3, [r0, #28]
 800795e:	fbb3 f5f6 	udiv	r5, r3, r6
 8007962:	fb06 3515 	mls	r5, r6, r5, r3
 8007966:	b965      	cbnz	r5, 8007982 <USBD_LL_DataInStage+0x66>
 8007968:	429e      	cmp	r6, r3
 800796a:	d80a      	bhi.n	8007982 <USBD_LL_DataInStage+0x66>
            (pep->total_length >= pep->maxpacket) &&
 800796c:	f8d0 2298 	ldr.w	r2, [r0, #664]	@ 0x298
 8007970:	4293      	cmp	r3, r2
 8007972:	d206      	bcs.n	8007982 <USBD_LL_DataInStage+0x66>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007974:	462a      	mov	r2, r5
 8007976:	f000 faca 	bl	8007f0e <USBD_CtlContinueSendData>
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800797a:	462b      	mov	r3, r5
          pdev->ep0_data_len = 0U;
 800797c:	f8c4 5298 	str.w	r5, [r4, #664]	@ 0x298
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007980:	e7e1      	b.n	8007946 <USBD_LL_DataInStage+0x2a>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007982:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	b12b      	cbz	r3, 8007996 <USBD_LL_DataInStage+0x7a>
 800798a:	f894 229c 	ldrb.w	r2, [r4, #668]	@ 0x29c
 800798e:	2a03      	cmp	r2, #3
 8007990:	d101      	bne.n	8007996 <USBD_LL_DataInStage+0x7a>
            pdev->pClass->EP0_TxSent(pdev);
 8007992:	4620      	mov	r0, r4
 8007994:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8007996:	2180      	movs	r1, #128	@ 0x80
 8007998:	4620      	mov	r0, r4
 800799a:	f000 fcdd 	bl	8008358 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800799e:	4620      	mov	r0, r4
 80079a0:	f000 fadd 	bl	8007f5e <USBD_CtlReceiveStatus>
 80079a4:	e7d4      	b.n	8007950 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80079a6:	f032 0304 	bics.w	r3, r2, #4
 80079aa:	d1d1      	bne.n	8007950 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80079ac:	2180      	movs	r1, #128	@ 0x80
 80079ae:	f000 fcd3 	bl	8008358 <USBD_LL_StallEP>
 80079b2:	e7cd      	b.n	8007950 <USBD_LL_DataInStage+0x34>
      pdev->dev_test_mode = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	f884 32a0 	strb.w	r3, [r4, #672]	@ 0x2a0
 80079ba:	e7cd      	b.n	8007958 <USBD_LL_DataInStage+0x3c>
  else if ((pdev->pClass->DataIn != NULL) &&
 80079bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	b12b      	cbz	r3, 80079d0 <USBD_LL_DataInStage+0xb4>
 80079c4:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 80079c8:	2a03      	cmp	r2, #3
 80079ca:	d101      	bne.n	80079d0 <USBD_LL_DataInStage+0xb4>
    pdev->pClass->DataIn(pdev, epnum);
 80079cc:	4798      	blx	r3
 80079ce:	e7c3      	b.n	8007958 <USBD_LL_DataInStage+0x3c>
    return USBD_FAIL;
 80079d0:	2002      	movs	r0, #2
 80079d2:	e7c2      	b.n	800795a <USBD_LL_DataInStage+0x3e>

080079d4 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079d4:	2200      	movs	r2, #0
{
 80079d6:	b570      	push	{r4, r5, r6, lr}
 80079d8:	4604      	mov	r4, r0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079da:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079dc:	2640      	movs	r6, #64	@ 0x40
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079de:	4611      	mov	r1, r2
 80079e0:	2340      	movs	r3, #64	@ 0x40
 80079e2:	f000 fca4 	bl	800832e <USBD_LL_OpenEP>

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079e6:	4633      	mov	r3, r6
 80079e8:	2180      	movs	r1, #128	@ 0x80
 80079ea:	2200      	movs	r2, #0
 80079ec:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079ee:	f8c4 5158 	str.w	r5, [r4, #344]	@ 0x158
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079f2:	f8c4 6164 	str.w	r6, [r4, #356]	@ 0x164
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079f6:	f000 fc9a 	bl	800832e <USBD_LL_OpenEP>

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 80079fa:	2100      	movs	r1, #0
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData)
 80079fc:	f8d4 32b8 	ldr.w	r3, [r4, #696]	@ 0x2b8
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007a00:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007a02:	6266      	str	r6, [r4, #36]	@ 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a04:	f884 529c 	strb.w	r5, [r4, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007a08:	f8c4 1294 	str.w	r1, [r4, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007a0c:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a0e:	f8c4 12a4 	str.w	r1, [r4, #676]	@ 0x2a4
  if (pdev->pClassData)
 8007a12:	b123      	cbz	r3, 8007a1e <USBD_LL_Reset+0x4a>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a14:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8007a18:	4620      	mov	r0, r4
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	4798      	blx	r3
  }

  return USBD_OK;
}
 8007a1e:	2000      	movs	r0, #0
 8007a20:	bd70      	pop	{r4, r5, r6, pc}

08007a22 <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8007a22:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8007a24:	2000      	movs	r0, #0
 8007a26:	4770      	bx	lr

08007a28 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8007a28:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007a2c:	f880 329d 	strb.w	r3, [r0, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a30:	2304      	movs	r3, #4
 8007a32:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c

  return USBD_OK;
}
 8007a36:	2000      	movs	r0, #0
 8007a38:	4770      	bx	lr

08007a3a <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a3a:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007a3e:	2b04      	cmp	r3, #4
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a40:	bf04      	itt	eq
 8007a42:	f890 329d 	ldrbeq.w	r3, [r0, #669]	@ 0x29d
 8007a46:	f880 329c 	strbeq.w	r3, [r0, #668]	@ 0x29c
  }

  return USBD_OK;
}
 8007a4a:	2000      	movs	r0, #0
 8007a4c:	4770      	bx	lr

08007a4e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a4e:	b508      	push	{r3, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a50:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8007a54:	2a03      	cmp	r2, #3
 8007a56:	d104      	bne.n	8007a62 <USBD_LL_SOF+0x14>
  {
    if (pdev->pClass->SOF != NULL)
 8007a58:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	b103      	cbz	r3, 8007a62 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8007a60:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8007a62:	2000      	movs	r0, #0
 8007a64:	bd08      	pop	{r3, pc}

08007a66 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8007a66:	2000      	movs	r0, #0
 8007a68:	4770      	bx	lr

08007a6a <USBD_LL_IsoOUTIncomplete>:
* @brief  USBD_IsoOUTIncomplete
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
 8007a6a:	2000      	movs	r0, #0
 8007a6c:	4770      	bx	lr

08007a6e <USBD_LL_DevConnected>:
* @brief  USBD_DevConnected
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
 8007a6e:	2000      	movs	r0, #0
 8007a70:	4770      	bx	lr

08007a72 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a72:	2201      	movs	r2, #1
{
 8007a74:	b508      	push	{r3, lr}
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a76:	f880 229c 	strb.w	r2, [r0, #668]	@ 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a7a:	f8d0 22b4 	ldr.w	r2, [r0, #692]	@ 0x2b4
 8007a7e:	7901      	ldrb	r1, [r0, #4]
 8007a80:	6852      	ldr	r2, [r2, #4]
 8007a82:	4790      	blx	r2

  return USBD_OK;
}
 8007a84:	2000      	movs	r0, #0
 8007a86:	bd08      	pop	{r3, pc}

08007a88 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8007a88:	b510      	push	{r4, lr}
 8007a8a:	4604      	mov	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8007a8c:	2180      	movs	r1, #128	@ 0x80
 8007a8e:	f000 fc63 	bl	8008358 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a92:	4620      	mov	r0, r4
}
 8007a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007a98:	2100      	movs	r1, #0
 8007a9a:	f000 bc5d 	b.w	8008358 <USBD_LL_StallEP>
	...

08007aa0 <USBD_StdDevReq>:
{
 8007aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aa2:	780b      	ldrb	r3, [r1, #0]
 8007aa4:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aa6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007aaa:	2b20      	cmp	r3, #32
{
 8007aac:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aae:	d006      	beq.n	8007abe <USBD_StdDevReq+0x1e>
 8007ab0:	2b40      	cmp	r3, #64	@ 0x40
 8007ab2:	d004      	beq.n	8007abe <USBD_StdDevReq+0x1e>
 8007ab4:	b163      	cbz	r3, 8007ad0 <USBD_StdDevReq+0x30>
        USBD_CtlError(pdev, req);
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f7ff ffe6 	bl	8007a88 <USBD_CtlError.constprop.0>
        break;
 8007abc:	e005      	b.n	8007aca <USBD_StdDevReq+0x2a>
      pdev->pClass->Setup(pdev, req);
 8007abe:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8007ac2:	4629      	mov	r1, r5
 8007ac4:	4620      	mov	r0, r4
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	4798      	blx	r3
}
 8007aca:	2000      	movs	r0, #0
 8007acc:	b003      	add	sp, #12
 8007ace:	bd30      	pop	{r4, r5, pc}
      switch (req->bRequest)
 8007ad0:	784b      	ldrb	r3, [r1, #1]
 8007ad2:	2b09      	cmp	r3, #9
 8007ad4:	d8ef      	bhi.n	8007ab6 <USBD_StdDevReq+0x16>
 8007ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8007adc <USBD_StdDevReq+0x3c>)
 8007ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007adc:	08007cdf 	.word	0x08007cdf
 8007ae0:	08007d15 	.word	0x08007d15
 8007ae4:	08007ab7 	.word	0x08007ab7
 8007ae8:	08007d07 	.word	0x08007d07
 8007aec:	08007ab7 	.word	0x08007ab7
 8007af0:	08007c05 	.word	0x08007c05
 8007af4:	08007b05 	.word	0x08007b05
 8007af8:	08007ab7 	.word	0x08007ab7
 8007afc:	08007caf 	.word	0x08007caf
 8007b00:	08007c47 	.word	0x08007c47
  uint16_t len = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 8007b0a:	884b      	ldrh	r3, [r1, #2]
 8007b0c:	0a1a      	lsrs	r2, r3, #8
 8007b0e:	3a01      	subs	r2, #1
 8007b10:	2a06      	cmp	r2, #6
 8007b12:	d8d0      	bhi.n	8007ab6 <USBD_StdDevReq+0x16>
 8007b14:	a101      	add	r1, pc, #4	@ (adr r1, 8007b1c <USBD_StdDevReq+0x7c>)
 8007b16:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b1a:	bf00      	nop
 8007b1c:	08007b39 	.word	0x08007b39
 8007b20:	08007b5d 	.word	0x08007b5d
 8007b24:	08007b77 	.word	0x08007b77
 8007b28:	08007ab7 	.word	0x08007ab7
 8007b2c:	08007ab7 	.word	0x08007ab7
 8007b30:	08007bbb 	.word	0x08007bbb
 8007b34:	08007bd1 	.word	0x08007bd1
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b38:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007b3c:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b3e:	7c20      	ldrb	r0, [r4, #16]
 8007b40:	f10d 0106 	add.w	r1, sp, #6
 8007b44:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8007b46:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8007b4a:	88eb      	ldrh	r3, [r5, #6]
 8007b4c:	2a00      	cmp	r2, #0
 8007b4e:	d054      	beq.n	8007bfa <USBD_StdDevReq+0x15a>
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d149      	bne.n	8007be8 <USBD_StdDevReq+0x148>
        USBD_CtlSendStatus(pdev);
 8007b54:	4620      	mov	r0, r4
 8007b56:	f000 f9f7 	bl	8007f48 <USBD_CtlSendStatus>
 8007b5a:	e7b6      	b.n	8007aca <USBD_StdDevReq+0x2a>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b5c:	7c02      	ldrb	r2, [r0, #16]
      pdev->pClass->Setup(pdev, req);
 8007b5e:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b62:	b932      	cbnz	r2, 8007b72 <USBD_StdDevReq+0xd2>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b66:	f10d 0006 	add.w	r0, sp, #6
 8007b6a:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b6c:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007b6e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8007b70:	e7e9      	b.n	8007b46 <USBD_StdDevReq+0xa6>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b74:	e7f7      	b.n	8007b66 <USBD_StdDevReq+0xc6>
      switch ((uint8_t)(req->wValue))
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b05      	cmp	r3, #5
 8007b7a:	d89c      	bhi.n	8007ab6 <USBD_StdDevReq+0x16>
 8007b7c:	e8df f003 	tbb	[pc, r3]
 8007b80:	110d0903 	.word	0x110d0903
 8007b84:	1915      	.short	0x1915
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b86:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007b8a:	685b      	ldr	r3, [r3, #4]
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1d6      	bne.n	8007b3e <USBD_StdDevReq+0x9e>
 8007b90:	e791      	b.n	8007ab6 <USBD_StdDevReq+0x16>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007b92:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	e7f8      	b.n	8007b8c <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007b9a:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	e7f4      	b.n	8007b8c <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ba2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	e7f0      	b.n	8007b8c <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007baa:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	e7ec      	b.n	8007b8c <USBD_StdDevReq+0xec>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007bb2:	f8d0 32b0 	ldr.w	r3, [r0, #688]	@ 0x2b0
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	e7e8      	b.n	8007b8c <USBD_StdDevReq+0xec>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bba:	7c03      	ldrb	r3, [r0, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f47f af7a 	bne.w	8007ab6 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007bc2:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007bc6:	f10d 0006 	add.w	r0, sp, #6
 8007bca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bcc:	4798      	blx	r3
  if (err != 0U)
 8007bce:	e7ba      	b.n	8007b46 <USBD_StdDevReq+0xa6>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007bd0:	7c03      	ldrb	r3, [r0, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f47f af6f 	bne.w	8007ab6 <USBD_StdDevReq+0x16>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007bd8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	@ 0x2b4
 8007bdc:	f10d 0006 	add.w	r0, sp, #6
 8007be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007be2:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007be4:	2307      	movs	r3, #7
 8007be6:	e7c2      	b.n	8007b6e <USBD_StdDevReq+0xce>
      len = MIN(len, req->wLength);
 8007be8:	429a      	cmp	r2, r3
 8007bea:	bf28      	it	cs
 8007bec:	461a      	movcs	r2, r3
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bee:	4601      	mov	r1, r0
 8007bf0:	4620      	mov	r0, r4
      len = MIN(len, req->wLength);
 8007bf2:	f8ad 2006 	strh.w	r2, [sp, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bf6:	f000 f97d 	bl	8007ef4 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8007bfa:	88eb      	ldrh	r3, [r5, #6]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f47f af64 	bne.w	8007aca <USBD_StdDevReq+0x2a>
 8007c02:	e7a7      	b.n	8007b54 <USBD_StdDevReq+0xb4>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c04:	888b      	ldrh	r3, [r1, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f47f af55 	bne.w	8007ab6 <USBD_StdDevReq+0x16>
 8007c0c:	88cb      	ldrh	r3, [r1, #6]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f47f af51 	bne.w	8007ab6 <USBD_StdDevReq+0x16>
 8007c14:	884d      	ldrh	r5, [r1, #2]
 8007c16:	2d7f      	cmp	r5, #127	@ 0x7f
 8007c18:	f63f af4d 	bhi.w	8007ab6 <USBD_StdDevReq+0x16>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c1c:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	f43f af48 	beq.w	8007ab6 <USBD_StdDevReq+0x16>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c26:	b2ed      	uxtb	r5, r5
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c28:	4629      	mov	r1, r5
      pdev->dev_address = dev_addr;
 8007c2a:	f880 529e 	strb.w	r5, [r0, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c2e:	f000 fbb6 	bl	800839e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007c32:	4620      	mov	r0, r4
 8007c34:	f000 f988 	bl	8007f48 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8007c38:	b11d      	cbz	r5, 8007c42 <USBD_StdDevReq+0x1a2>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c3a:	2302      	movs	r3, #2
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c3c:	f884 329c 	strb.w	r3, [r4, #668]	@ 0x29c
 8007c40:	e743      	b.n	8007aca <USBD_StdDevReq+0x2a>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e7fa      	b.n	8007c3c <USBD_StdDevReq+0x19c>
  cfgidx = (uint8_t)(req->wValue);
 8007c46:	7889      	ldrb	r1, [r1, #2]
 8007c48:	4d38      	ldr	r5, [pc, #224]	@ (8007d2c <USBD_StdDevReq+0x28c>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c4a:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8007c4c:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007c4e:	f63f af32 	bhi.w	8007ab6 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8007c52:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	d008      	beq.n	8007c6c <USBD_StdDevReq+0x1cc>
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d015      	beq.n	8007c8a <USBD_StdDevReq+0x1ea>
        USBD_CtlError(pdev, req);
 8007c5e:	f7ff ff13 	bl	8007a88 <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007c62:	4620      	mov	r0, r4
 8007c64:	7829      	ldrb	r1, [r5, #0]
 8007c66:	f7ff fded 	bl	8007844 <USBD_ClrClassConfig>
        break;
 8007c6a:	e72e      	b.n	8007aca <USBD_StdDevReq+0x2a>
        if (cfgidx)
 8007c6c:	2900      	cmp	r1, #0
 8007c6e:	f43f af71 	beq.w	8007b54 <USBD_StdDevReq+0xb4>
          pdev->dev_config = cfgidx;
 8007c72:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c74:	2303      	movs	r3, #3
          pdev->dev_config = cfgidx;
 8007c76:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007c78:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	f7ff fdd4 	bl	800782a <USBD_SetClassConfig>
 8007c82:	2802      	cmp	r0, #2
 8007c84:	f47f af66 	bne.w	8007b54 <USBD_StdDevReq+0xb4>
 8007c88:	e715      	b.n	8007ab6 <USBD_StdDevReq+0x16>
        if (cfgidx == 0U)
 8007c8a:	b931      	cbnz	r1, 8007c9a <USBD_StdDevReq+0x1fa>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c8c:	2302      	movs	r3, #2
          pdev->dev_config = cfgidx;
 8007c8e:	6041      	str	r1, [r0, #4]
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c90:	f880 329c 	strb.w	r3, [r0, #668]	@ 0x29c
          USBD_ClrClassConfig(pdev, cfgidx);
 8007c94:	f7ff fdd6 	bl	8007844 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007c98:	e75c      	b.n	8007b54 <USBD_StdDevReq+0xb4>
        else if (cfgidx != pdev->dev_config)
 8007c9a:	6841      	ldr	r1, [r0, #4]
 8007c9c:	2901      	cmp	r1, #1
 8007c9e:	f43f af59 	beq.w	8007b54 <USBD_StdDevReq+0xb4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ca2:	b2c9      	uxtb	r1, r1
 8007ca4:	f7ff fdce 	bl	8007844 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007ca8:	7829      	ldrb	r1, [r5, #0]
 8007caa:	6061      	str	r1, [r4, #4]
 8007cac:	e7e6      	b.n	8007c7c <USBD_StdDevReq+0x1dc>
  if (req->wLength != 1U)
 8007cae:	88ca      	ldrh	r2, [r1, #6]
 8007cb0:	2a01      	cmp	r2, #1
 8007cb2:	f47f af00 	bne.w	8007ab6 <USBD_StdDevReq+0x16>
    switch (pdev->dev_state)
 8007cb6:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d80a      	bhi.n	8007cd4 <USBD_StdDevReq+0x234>
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f43f aef9 	beq.w	8007ab6 <USBD_StdDevReq+0x16>
        pdev->dev_default_config = 0U;
 8007cc4:	4601      	mov	r1, r0
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007ccc:	4620      	mov	r0, r4
 8007cce:	f000 f911 	bl	8007ef4 <USBD_CtlSendData>
      break;
 8007cd2:	e6fa      	b.n	8007aca <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	f47f aeee 	bne.w	8007ab6 <USBD_StdDevReq+0x16>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007cda:	1d01      	adds	r1, r0, #4
 8007cdc:	e7f6      	b.n	8007ccc <USBD_StdDevReq+0x22c>
  switch (pdev->dev_state)
 8007cde:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007ce2:	3b01      	subs	r3, #1
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	f63f aee6 	bhi.w	8007ab6 <USBD_StdDevReq+0x16>
      if (req->wLength != 0x2U)
 8007cea:	88ca      	ldrh	r2, [r1, #6]
 8007cec:	2a02      	cmp	r2, #2
 8007cee:	f47f aee2 	bne.w	8007ab6 <USBD_StdDevReq+0x16>
      if (pdev->dev_remote_wakeup)
 8007cf2:	f8d0 32a4 	ldr.w	r3, [r0, #676]	@ 0x2a4
 8007cf6:	4601      	mov	r1, r0
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	bf0c      	ite	eq
 8007cfc:	2301      	moveq	r3, #1
 8007cfe:	2303      	movne	r3, #3
 8007d00:	f841 3f0c 	str.w	r3, [r1, #12]!
 8007d04:	e7e2      	b.n	8007ccc <USBD_StdDevReq+0x22c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d06:	884b      	ldrh	r3, [r1, #2]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	f47f aede 	bne.w	8007aca <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8007d0e:	f8c4 32a4 	str.w	r3, [r4, #676]	@ 0x2a4
 8007d12:	e71f      	b.n	8007b54 <USBD_StdDevReq+0xb4>
  switch (pdev->dev_state)
 8007d14:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	2b02      	cmp	r3, #2
 8007d1c:	f63f aecb 	bhi.w	8007ab6 <USBD_StdDevReq+0x16>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007d20:	884b      	ldrh	r3, [r1, #2]
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	f47f aed1 	bne.w	8007aca <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e7f0      	b.n	8007d0e <USBD_StdDevReq+0x26e>
 8007d2c:	20000ddc 	.word	0x20000ddc

08007d30 <USBD_StdItfReq>:
{
 8007d30:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d32:	780b      	ldrb	r3, [r1, #0]
{
 8007d34:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d36:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8007d3a:	065b      	lsls	r3, r3, #25
{
 8007d3c:	460d      	mov	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d3e:	d501      	bpl.n	8007d44 <USBD_StdItfReq+0x14>
 8007d40:	2a40      	cmp	r2, #64	@ 0x40
 8007d42:	d115      	bne.n	8007d70 <USBD_StdItfReq+0x40>
      switch (pdev->dev_state)
 8007d44:	f894 329c 	ldrb.w	r3, [r4, #668]	@ 0x29c
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d810      	bhi.n	8007d70 <USBD_StdItfReq+0x40>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007d4e:	792b      	ldrb	r3, [r5, #4]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d80d      	bhi.n	8007d70 <USBD_StdItfReq+0x40>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007d54:	f8d4 32b4 	ldr.w	r3, [r4, #692]	@ 0x2b4
 8007d58:	4629      	mov	r1, r5
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007d60:	88eb      	ldrh	r3, [r5, #6]
 8007d62:	b91b      	cbnz	r3, 8007d6c <USBD_StdItfReq+0x3c>
 8007d64:	b910      	cbnz	r0, 8007d6c <USBD_StdItfReq+0x3c>
              USBD_CtlSendStatus(pdev);
 8007d66:	4620      	mov	r0, r4
 8007d68:	f000 f8ee 	bl	8007f48 <USBD_CtlSendStatus>
}
 8007d6c:	2000      	movs	r0, #0
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
          USBD_CtlError(pdev, req);
 8007d70:	4620      	mov	r0, r4
 8007d72:	f7ff fe89 	bl	8007a88 <USBD_CtlError.constprop.0>
          break;
 8007d76:	e7f9      	b.n	8007d6c <USBD_StdItfReq+0x3c>

08007d78 <USBD_StdEPReq>:
{
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	780a      	ldrb	r2, [r1, #0]
 8007d7c:	4604      	mov	r4, r0
  ep_addr  = LOBYTE(req->wIndex);
 8007d7e:	f002 0260 	and.w	r2, r2, #96	@ 0x60
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d82:	2a20      	cmp	r2, #32
{
 8007d84:	460b      	mov	r3, r1
  ep_addr  = LOBYTE(req->wIndex);
 8007d86:	888d      	ldrh	r5, [r1, #4]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007d88:	d006      	beq.n	8007d98 <USBD_StdEPReq+0x20>
 8007d8a:	2a40      	cmp	r2, #64	@ 0x40
 8007d8c:	d004      	beq.n	8007d98 <USBD_StdEPReq+0x20>
 8007d8e:	b15a      	cbz	r2, 8007da8 <USBD_StdEPReq+0x30>
              USBD_CtlError(pdev, req);
 8007d90:	4620      	mov	r0, r4
 8007d92:	f7ff fe79 	bl	8007a88 <USBD_CtlError.constprop.0>
              break;
 8007d96:	e005      	b.n	8007da4 <USBD_StdEPReq+0x2c>
      pdev->pClass->Setup(pdev, req);
 8007d98:	f8d4 22b4 	ldr.w	r2, [r4, #692]	@ 0x2b4
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4620      	mov	r0, r4
 8007da0:	6892      	ldr	r2, [r2, #8]
 8007da2:	4790      	blx	r2
}
 8007da4:	2000      	movs	r0, #0
 8007da6:	bd38      	pop	{r3, r4, r5, pc}
      switch (req->bRequest)
 8007da8:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8007daa:	b2e9      	uxtb	r1, r5
      switch (req->bRequest)
 8007dac:	2a01      	cmp	r2, #1
 8007dae:	d035      	beq.n	8007e1c <USBD_StdEPReq+0xa4>
 8007db0:	2a03      	cmp	r2, #3
 8007db2:	d021      	beq.n	8007df8 <USBD_StdEPReq+0x80>
 8007db4:	2a00      	cmp	r2, #0
 8007db6:	d1eb      	bne.n	8007d90 <USBD_StdEPReq+0x18>
          switch (pdev->dev_state)
 8007db8:	f890 329c 	ldrb.w	r3, [r0, #668]	@ 0x29c
 8007dbc:	2b02      	cmp	r3, #2
 8007dbe:	d044      	beq.n	8007e4a <USBD_StdEPReq+0xd2>
 8007dc0:	2b03      	cmp	r3, #3
 8007dc2:	d1e5      	bne.n	8007d90 <USBD_StdEPReq+0x18>
              if ((ep_addr & 0x80U) == 0x80U)
 8007dc4:	2214      	movs	r2, #20
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dc6:	f001 030f 	and.w	r3, r1, #15
              if ((ep_addr & 0x80U) == 0x80U)
 8007dca:	f015 0f80 	tst.w	r5, #128	@ 0x80
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dce:	fb02 0303 	mla	r3, r2, r3, r0
              if ((ep_addr & 0x80U) == 0x80U)
 8007dd2:	d04b      	beq.n	8007e6c <USBD_StdEPReq+0xf4>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d0da      	beq.n	8007d90 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dda:	2514      	movs	r5, #20
 8007ddc:	f001 037f 	and.w	r3, r1, #127	@ 0x7f
 8007de0:	fb03 5505 	mla	r5, r3, r5, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007de4:	2980      	cmp	r1, #128	@ 0x80
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007de6:	4405      	add	r5, r0
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007de8:	d04b      	beq.n	8007e82 <USBD_StdEPReq+0x10a>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007dea:	4620      	mov	r0, r4
 8007dec:	f000 fac6 	bl	800837c <USBD_LL_IsStallEP>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d04b      	beq.n	8007e8c <USBD_StdEPReq+0x114>
                pep->status = 0x0001U;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e045      	b.n	8007e84 <USBD_StdEPReq+0x10c>
          switch (pdev->dev_state)
 8007df8:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8007dfc:	2a02      	cmp	r2, #2
 8007dfe:	d01b      	beq.n	8007e38 <USBD_StdEPReq+0xc0>
 8007e00:	2a03      	cmp	r2, #3
 8007e02:	d1c5      	bne.n	8007d90 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e04:	885a      	ldrh	r2, [r3, #2]
 8007e06:	b92a      	cbnz	r2, 8007e14 <USBD_StdEPReq+0x9c>
                if ((ep_addr != 0x00U) &&
 8007e08:	064a      	lsls	r2, r1, #25
 8007e0a:	d003      	beq.n	8007e14 <USBD_StdEPReq+0x9c>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007e0c:	88db      	ldrh	r3, [r3, #6]
 8007e0e:	b90b      	cbnz	r3, 8007e14 <USBD_StdEPReq+0x9c>
                  USBD_LL_StallEP(pdev, ep_addr);
 8007e10:	f000 faa2 	bl	8008358 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 f897 	bl	8007f48 <USBD_CtlSendStatus>
              break;
 8007e1a:	e7c3      	b.n	8007da4 <USBD_StdEPReq+0x2c>
          switch (pdev->dev_state)
 8007e1c:	f890 229c 	ldrb.w	r2, [r0, #668]	@ 0x29c
 8007e20:	2a02      	cmp	r2, #2
 8007e22:	d009      	beq.n	8007e38 <USBD_StdEPReq+0xc0>
 8007e24:	2a03      	cmp	r2, #3
 8007e26:	d1b3      	bne.n	8007d90 <USBD_StdEPReq+0x18>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007e28:	885b      	ldrh	r3, [r3, #2]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1ba      	bne.n	8007da4 <USBD_StdEPReq+0x2c>
                if ((ep_addr & 0x7FU) != 0x00U)
 8007e2e:	064d      	lsls	r5, r1, #25
 8007e30:	d0f0      	beq.n	8007e14 <USBD_StdEPReq+0x9c>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007e32:	f000 fa9a 	bl	800836a <USBD_LL_ClearStallEP>
 8007e36:	e7ed      	b.n	8007e14 <USBD_StdEPReq+0x9c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e38:	064b      	lsls	r3, r1, #25
 8007e3a:	d0a9      	beq.n	8007d90 <USBD_StdEPReq+0x18>
                USBD_LL_StallEP(pdev, ep_addr);
 8007e3c:	f000 fa8c 	bl	8008358 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007e40:	2180      	movs	r1, #128	@ 0x80
 8007e42:	4620      	mov	r0, r4
 8007e44:	f000 fa88 	bl	8008358 <USBD_LL_StallEP>
 8007e48:	e7ac      	b.n	8007da4 <USBD_StdEPReq+0x2c>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007e4a:	064a      	lsls	r2, r1, #25
 8007e4c:	d1a0      	bne.n	8007d90 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e4e:	062b      	lsls	r3, r5, #24
              pep->status = 0x0000U;
 8007e50:	f04f 0300 	mov.w	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e54:	f04f 0202 	mov.w	r2, #2
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e58:	bf4c      	ite	mi
 8007e5a:	f100 0114 	addmi.w	r1, r0, #20
 8007e5e:	f500 71aa 	addpl.w	r1, r0, #340	@ 0x154
              pep->status = 0x0000U;
 8007e62:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e64:	4620      	mov	r0, r4
 8007e66:	f000 f845 	bl	8007ef4 <USBD_CtlSendData>
              break;
 8007e6a:	e79b      	b.n	8007da4 <USBD_StdEPReq+0x2c>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e6c:	f8d3 3158 	ldr.w	r3, [r3, #344]	@ 0x158
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d08d      	beq.n	8007d90 <USBD_StdEPReq+0x18>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e74:	2514      	movs	r5, #20
 8007e76:	fb05 0501 	mla	r5, r5, r1, r0
 8007e7a:	f505 75aa 	add.w	r5, r5, #340	@ 0x154
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e7e:	2900      	cmp	r1, #0
 8007e80:	d1b3      	bne.n	8007dea <USBD_StdEPReq+0x72>
                pep->status = 0x0000U;
 8007e82:	2300      	movs	r3, #0
                pep->status = 0x0001U;
 8007e84:	602b      	str	r3, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e86:	2202      	movs	r2, #2
 8007e88:	4629      	mov	r1, r5
 8007e8a:	e7eb      	b.n	8007e64 <USBD_StdEPReq+0xec>
                pep->status = 0x0000U;
 8007e8c:	6028      	str	r0, [r5, #0]
 8007e8e:	e7fa      	b.n	8007e86 <USBD_StdEPReq+0x10e>

08007e90 <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8007e90:	780b      	ldrb	r3, [r1, #0]
 8007e92:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007e94:	784b      	ldrb	r3, [r1, #1]
 8007e96:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007e98:	884b      	ldrh	r3, [r1, #2]
 8007e9a:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007e9c:	888b      	ldrh	r3, [r1, #4]
 8007e9e:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ea0:	88cb      	ldrh	r3, [r1, #6]
 8007ea2:	80c3      	strh	r3, [r0, #6]
}
 8007ea4:	4770      	bx	lr

08007ea6 <USBD_CtlError>:
{
 8007ea6:	b510      	push	{r4, lr}
 8007ea8:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8007eaa:	2180      	movs	r1, #128	@ 0x80
 8007eac:	f000 fa54 	bl	8008358 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007eb0:	4620      	mov	r0, r4
}
 8007eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev, 0U);
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	f000 ba4e 	b.w	8008358 <USBD_LL_StallEP>

08007ebc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007ebc:	b570      	push	{r4, r5, r6, lr}
 8007ebe:	460d      	mov	r5, r1
 8007ec0:	4616      	mov	r6, r2
  uint8_t idx = 0U;

  if (desc != NULL)
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	b170      	cbz	r0, 8007ee4 <USBD_GetString+0x28>
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8007ec6:	f7f8 f94d 	bl	8000164 <strlen>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007eca:	b2c3      	uxtb	r3, r0
 8007ecc:	3301      	adds	r3, #1
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	8033      	strh	r3, [r6, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007ed2:	702b      	strb	r3, [r5, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ed4:	2303      	movs	r3, #3
      unicode[idx++] =  0U;
 8007ed6:	2000      	movs	r0, #0
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007ed8:	706b      	strb	r3, [r5, #1]
 8007eda:	2302      	movs	r3, #2
 8007edc:	3c01      	subs	r4, #1
    while (*desc != '\0')
 8007ede:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8007ee2:	b901      	cbnz	r1, 8007ee6 <USBD_GetString+0x2a>
}
 8007ee4:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8007ee6:	1c5a      	adds	r2, r3, #1
 8007ee8:	54e9      	strb	r1, [r5, r3]
 8007eea:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8007eec:	3302      	adds	r3, #2
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	54a8      	strb	r0, [r5, r2]
 8007ef2:	e7f4      	b.n	8007ede <USBD_GetString+0x22>

08007ef4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007ef4:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007ef6:	2202      	movs	r2, #2
{
 8007ef8:	b510      	push	{r4, lr}
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;
 8007efa:	e9c0 3307 	strd	r3, r3, [r0, #28]
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007efe:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f02:	460a      	mov	r2, r1
 8007f04:	2100      	movs	r1, #0
 8007f06:	f000 fa53 	bl	80083b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	bd10      	pop	{r4, pc}

08007f0e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007f0e:	b508      	push	{r3, lr}
 8007f10:	4613      	mov	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007f12:	460a      	mov	r2, r1
 8007f14:	2100      	movs	r1, #0
 8007f16:	f000 fa4b 	bl	80083b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	bd08      	pop	{r3, pc}

08007f1e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007f1e:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f20:	2203      	movs	r2, #3
{
 8007f22:	b510      	push	{r4, lr}
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length   = len;
 8007f24:	e9c0 3357 	strd	r3, r3, [r0, #348]	@ 0x15c
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007f28:	f8c0 2294 	str.w	r2, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f2c:	460a      	mov	r2, r1
 8007f2e:	2100      	movs	r1, #0
 8007f30:	f000 fa47 	bl	80083c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007f34:	2000      	movs	r0, #0
 8007f36:	bd10      	pop	{r4, pc}

08007f38 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007f38:	b508      	push	{r3, lr}
 8007f3a:	4613      	mov	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007f3c:	460a      	mov	r2, r1
 8007f3e:	2100      	movs	r1, #0
 8007f40:	f000 fa3f 	bl	80083c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007f44:	2000      	movs	r0, #0
 8007f46:	bd08      	pop	{r3, pc}

08007f48 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007f48:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007f4a:	2304      	movs	r3, #4
 8007f4c:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007f50:	2300      	movs	r3, #0
 8007f52:	461a      	mov	r2, r3
 8007f54:	4619      	mov	r1, r3
 8007f56:	f000 fa2b 	bl	80083b0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8007f5a:	2000      	movs	r0, #0
 8007f5c:	bd08      	pop	{r3, pc}

08007f5e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007f5e:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f60:	2305      	movs	r3, #5
 8007f62:	f8c0 3294 	str.w	r3, [r0, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f66:	2300      	movs	r3, #0
 8007f68:	461a      	mov	r2, r3
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	f000 fa29 	bl	80083c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8007f70:	2000      	movs	r0, #0
 8007f72:	bd08      	pop	{r3, pc}

08007f74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f74:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f76:	2200      	movs	r2, #0
 8007f78:	490e      	ldr	r1, [pc, #56]	@ (8007fb4 <MX_USB_DEVICE_Init+0x40>)
 8007f7a:	480f      	ldr	r0, [pc, #60]	@ (8007fb8 <MX_USB_DEVICE_Init+0x44>)
 8007f7c:	f7ff fc34 	bl	80077e8 <USBD_Init>
 8007f80:	b108      	cbz	r0, 8007f86 <MX_USB_DEVICE_Init+0x12>
  {
    Error_Handler();
 8007f82:	f7f9 ffaf 	bl	8001ee4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f86:	490d      	ldr	r1, [pc, #52]	@ (8007fbc <MX_USB_DEVICE_Init+0x48>)
 8007f88:	480b      	ldr	r0, [pc, #44]	@ (8007fb8 <MX_USB_DEVICE_Init+0x44>)
 8007f8a:	f7ff fc42 	bl	8007812 <USBD_RegisterClass>
 8007f8e:	b108      	cbz	r0, 8007f94 <MX_USB_DEVICE_Init+0x20>
  {
    Error_Handler();
 8007f90:	f7f9 ffa8 	bl	8001ee4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f94:	490a      	ldr	r1, [pc, #40]	@ (8007fc0 <MX_USB_DEVICE_Init+0x4c>)
 8007f96:	4808      	ldr	r0, [pc, #32]	@ (8007fb8 <MX_USB_DEVICE_Init+0x44>)
 8007f98:	f7ff fbe5 	bl	8007766 <USBD_CDC_RegisterInterface>
 8007f9c:	b108      	cbz	r0, 8007fa2 <MX_USB_DEVICE_Init+0x2e>
  {
    Error_Handler();
 8007f9e:	f7f9 ffa1 	bl	8001ee4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007fa2:	4805      	ldr	r0, [pc, #20]	@ (8007fb8 <MX_USB_DEVICE_Init+0x44>)
 8007fa4:	f7ff fc3c 	bl	8007820 <USBD_Start>
 8007fa8:	b118      	cbz	r0, 8007fb2 <MX_USB_DEVICE_Init+0x3e>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007faa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007fae:	f7f9 bf99 	b.w	8001ee4 <Error_Handler>
}
 8007fb2:	bd08      	pop	{r3, pc}
 8007fb4:	20000160 	.word	0x20000160
 8007fb8:	20000de0 	.word	0x20000de0
 8007fbc:	200000d8 	.word	0x200000d8
 8007fc0:	2000011c 	.word	0x2000011c

08007fc4 <CDC_DeInit_FS>:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  CDC_Transmit_busy = 0;
 8007fc4:	2000      	movs	r0, #0
 8007fc6:	4b01      	ldr	r3, [pc, #4]	@ (8007fcc <CDC_DeInit_FS+0x8>)
 8007fc8:	7018      	strb	r0, [r3, #0]
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8007fca:	4770      	bx	lr
 8007fcc:	200018a4 	.word	0x200018a4

08007fd0 <CDC_Control_FS>:
      break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	4770      	bx	lr

08007fd4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007fd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN 6 */
  // Вызываем функцию обработки полученных данных из usb_cdc.c
  USB_CDC_ReceiveCallback(Buf, Len);
  
  // Перенастраиваем буфер приема для следующего пакета
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007fd6:	4c06      	ldr	r4, [pc, #24]	@ (8007ff0 <CDC_Receive_FS+0x1c>)
  USB_CDC_ReceiveCallback(Buf, Len);
 8007fd8:	f7fa fb74 	bl	80026c4 <USB_CDC_ReceiveCallback>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007fdc:	4905      	ldr	r1, [pc, #20]	@ (8007ff4 <CDC_Receive_FS+0x20>)
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f7ff fbd0 	bl	8007784 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f7ff fbec 	bl	80077c2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007fea:	2000      	movs	r0, #0
 8007fec:	bd10      	pop	{r4, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000de0 	.word	0x20000de0
 8007ff4:	200014a4 	.word	0x200014a4

08007ff8 <CDC_Init_FS>:
{
 8007ff8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007ffa:	4c07      	ldr	r4, [pc, #28]	@ (8008018 <CDC_Init_FS+0x20>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	4620      	mov	r0, r4
 8008000:	4906      	ldr	r1, [pc, #24]	@ (800801c <CDC_Init_FS+0x24>)
 8008002:	f7ff fbb7 	bl	8007774 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008006:	4620      	mov	r0, r4
 8008008:	4905      	ldr	r1, [pc, #20]	@ (8008020 <CDC_Init_FS+0x28>)
 800800a:	f7ff fbbb 	bl	8007784 <USBD_CDC_SetRxBuffer>
  CDC_Transmit_busy = 0;
 800800e:	2000      	movs	r0, #0
 8008010:	4b04      	ldr	r3, [pc, #16]	@ (8008024 <CDC_Init_FS+0x2c>)
 8008012:	7018      	strb	r0, [r3, #0]
}
 8008014:	bd10      	pop	{r4, pc}
 8008016:	bf00      	nop
 8008018:	20000de0 	.word	0x20000de0
 800801c:	200010a4 	.word	0x200010a4
 8008020:	200014a4 	.word	0x200014a4
 8008024:	200018a4 	.word	0x200018a4

08008028 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008028:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 800802a:	4801      	ldr	r0, [pc, #4]	@ (8008030 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 800802c:	800b      	strh	r3, [r1, #0]
}
 800802e:	4770      	bx	lr
 8008030:	2000014c 	.word	0x2000014c

08008034 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008034:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8008036:	4801      	ldr	r0, [pc, #4]	@ (800803c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8008038:	800b      	strh	r3, [r1, #0]
}
 800803a:	4770      	bx	lr
 800803c:	20000148 	.word	0x20000148

08008040 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008040:	2300      	movs	r3, #0
 8008042:	b570      	push	{r4, r5, r6, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8008044:	461e      	mov	r6, r3
 8008046:	1c4d      	adds	r5, r1, #1
      pbuf[2 * idx] = (value >> 28) + '0';
 8008048:	0f04      	lsrs	r4, r0, #28
    if (((value >> 28)) < 0xA)
 800804a:	f1b0 4f20 	cmp.w	r0, #2684354560	@ 0xa0000000
      pbuf[2 * idx] = (value >> 28) + '0';
 800804e:	bf34      	ite	cc
 8008050:	3430      	addcc	r4, #48	@ 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008052:	3437      	addcs	r4, #55	@ 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8008054:	f801 4013 	strb.w	r4, [r1, r3, lsl #1]
    pbuf[2 * idx + 1] = 0;
 8008058:	f805 6013 	strb.w	r6, [r5, r3, lsl #1]
  for (idx = 0; idx < len; idx++)
 800805c:	3301      	adds	r3, #1
 800805e:	b2dc      	uxtb	r4, r3
 8008060:	42a2      	cmp	r2, r4
    value = value << 4;
 8008062:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 8008066:	d8ef      	bhi.n	8008048 <IntToUnicode+0x8>
  }
}
 8008068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800806c <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 800806c:	231a      	movs	r3, #26
{
 800806e:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8008070:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008072:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <USBD_FS_SerialStrDescriptor+0x30>)
 8008074:	f8d3 07e8 	ldr.w	r0, [r3, #2024]	@ 0x7e8
  deviceserial0 += deviceserial2;
 8008078:	f8d3 27f0 	ldr.w	r2, [r3, #2032]	@ 0x7f0
  if (deviceserial0 != 0)
 800807c:	1880      	adds	r0, r0, r2
 800807e:	d00a      	beq.n	8008096 <USBD_FS_SerialStrDescriptor+0x2a>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008080:	f8d3 47ec 	ldr.w	r4, [r3, #2028]	@ 0x7ec
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008084:	4906      	ldr	r1, [pc, #24]	@ (80080a0 <USBD_FS_SerialStrDescriptor+0x34>)
 8008086:	2208      	movs	r2, #8
 8008088:	f7ff ffda 	bl	8008040 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800808c:	2204      	movs	r2, #4
 800808e:	4620      	mov	r0, r4
 8008090:	3110      	adds	r1, #16
 8008092:	f7ff ffd5 	bl	8008040 <IntToUnicode>
}
 8008096:	4803      	ldr	r0, [pc, #12]	@ (80080a4 <USBD_FS_SerialStrDescriptor+0x38>)
 8008098:	bd10      	pop	{r4, pc}
 800809a:	bf00      	nop
 800809c:	1ffff000 	.word	0x1ffff000
 80080a0:	2000012e 	.word	0x2000012e
 80080a4:	2000012c 	.word	0x2000012c

080080a8 <USBD_FS_ManufacturerStrDescriptor>:
{
 80080a8:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080aa:	4c04      	ldr	r4, [pc, #16]	@ (80080bc <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80080ac:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80080ae:	4804      	ldr	r0, [pc, #16]	@ (80080c0 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80080b0:	4621      	mov	r1, r4
 80080b2:	f7ff ff03 	bl	8007ebc <USBD_GetString>
}
 80080b6:	4620      	mov	r0, r4
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	bf00      	nop
 80080bc:	200018a8 	.word	0x200018a8
 80080c0:	0800c5a1 	.word	0x0800c5a1

080080c4 <USBD_FS_ProductStrDescriptor>:
{
 80080c4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080c6:	4c04      	ldr	r4, [pc, #16]	@ (80080d8 <USBD_FS_ProductStrDescriptor+0x14>)
{
 80080c8:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80080ca:	4804      	ldr	r0, [pc, #16]	@ (80080dc <USBD_FS_ProductStrDescriptor+0x18>)
 80080cc:	4621      	mov	r1, r4
 80080ce:	f7ff fef5 	bl	8007ebc <USBD_GetString>
}
 80080d2:	4620      	mov	r0, r4
 80080d4:	bd10      	pop	{r4, pc}
 80080d6:	bf00      	nop
 80080d8:	200018a8 	.word	0x200018a8
 80080dc:	0800c5b1 	.word	0x0800c5b1

080080e0 <USBD_FS_ConfigStrDescriptor>:
{
 80080e0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080e2:	4c04      	ldr	r4, [pc, #16]	@ (80080f4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80080e4:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80080e6:	4804      	ldr	r0, [pc, #16]	@ (80080f8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80080e8:	4621      	mov	r1, r4
 80080ea:	f7ff fee7 	bl	8007ebc <USBD_GetString>
}
 80080ee:	4620      	mov	r0, r4
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	bf00      	nop
 80080f4:	200018a8 	.word	0x200018a8
 80080f8:	0800c5bf 	.word	0x0800c5bf

080080fc <USBD_FS_InterfaceStrDescriptor>:
{
 80080fc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80080fe:	4c04      	ldr	r4, [pc, #16]	@ (8008110 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8008100:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008102:	4804      	ldr	r0, [pc, #16]	@ (8008114 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8008104:	4621      	mov	r1, r4
 8008106:	f7ff fed9 	bl	8007ebc <USBD_GetString>
}
 800810a:	4620      	mov	r0, r4
 800810c:	bd10      	pop	{r4, pc}
 800810e:	bf00      	nop
 8008110:	200018a8 	.word	0x200018a8
 8008114:	0800c5ca 	.word	0x0800c5ca

08008118 <USBD_Get_USB_Status>:
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8008118:	b118      	cbz	r0, 8008122 <USBD_Get_USB_Status+0xa>
 800811a:	2802      	cmp	r0, #2
 800811c:	bf0c      	ite	eq
 800811e:	2001      	moveq	r0, #1
 8008120:	2002      	movne	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8008122:	4770      	bx	lr

08008124 <PCD_ISOINIncompleteCallback>:
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008124:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8008128:	f7ff bc9d 	b.w	8007a66 <USBD_LL_IsoINIncomplete>

0800812c <PCD_ISOOUTIncompleteCallback>:
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800812c:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8008130:	f7ff bc9b 	b.w	8007a6a <USBD_LL_IsoOUTIncomplete>

08008134 <PCD_DataInStageCallback>:
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008134:	2328      	movs	r3, #40	@ 0x28
 8008136:	fb03 0301 	mla	r3, r3, r1, r0
 800813a:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800813e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008140:	f7ff bbec 	b.w	800791c <USBD_LL_DataInStage>

08008144 <PCD_DataOutStageCallback>:
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008144:	2328      	movs	r3, #40	@ 0x28
 8008146:	fb03 0301 	mla	r3, r3, r1, r0
 800814a:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800814e:	f8d3 2164 	ldr.w	r2, [r3, #356]	@ 0x164
 8008152:	f7ff bbab 	b.w	80078ac <USBD_LL_DataOutStage>

08008156 <PCD_DisconnectCallback>:
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008156:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800815a:	f7ff bc8a 	b.w	8007a72 <USBD_LL_DevDisconnected>

0800815e <PCD_ConnectCallback>:
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800815e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 8008162:	f7ff bc84 	b.w	8007a6e <USBD_LL_DevConnected>

08008166 <PCD_ResumeCallback>:
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008166:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800816a:	f7ff bc66 	b.w	8007a3a <USBD_LL_Resume>

0800816e <PCD_ResetCallback>:
{
 800816e:	b510      	push	{r4, lr}
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008170:	7983      	ldrb	r3, [r0, #6]
{
 8008172:	4604      	mov	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008174:	2b02      	cmp	r3, #2
 8008176:	d001      	beq.n	800817c <PCD_ResetCallback+0xe>
    Error_Handler();
 8008178:	f7f9 feb4 	bl	8001ee4 <Error_Handler>
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800817c:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
 8008180:	2101      	movs	r1, #1
 8008182:	f7ff fc4e 	bl	8007a22 <USBD_LL_SetSpeed>
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008186:	f8d4 02d4 	ldr.w	r0, [r4, #724]	@ 0x2d4
}
 800818a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800818e:	f7ff bc21 	b.w	80079d4 <USBD_LL_Reset>

08008192 <PCD_SetupStageCallback>:
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008192:	f500 7126 	add.w	r1, r0, #664	@ 0x298
 8008196:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 800819a:	f7ff bb5a 	b.w	8007852 <USBD_LL_SetupStage>

0800819e <PCD_SOFCallback>:
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800819e:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80081a2:	f7ff bc54 	b.w	8007a4e <USBD_LL_SOF>
	...

080081a8 <PCD_SuspendCallback>:
{
 80081a8:	b510      	push	{r4, lr}
 80081aa:	4604      	mov	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80081ac:	f8d0 02d4 	ldr.w	r0, [r0, #724]	@ 0x2d4
 80081b0:	f7ff fc3a 	bl	8007a28 <USBD_LL_Suspend>
  if (hpcd->Init.low_power_enable)
 80081b4:	7aa3      	ldrb	r3, [r4, #10]
 80081b6:	b123      	cbz	r3, 80081c2 <PCD_SuspendCallback+0x1a>
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80081b8:	4a02      	ldr	r2, [pc, #8]	@ (80081c4 <PCD_SuspendCallback+0x1c>)
 80081ba:	6913      	ldr	r3, [r2, #16]
 80081bc:	f043 0306 	orr.w	r3, r3, #6
 80081c0:	6113      	str	r3, [r2, #16]
}
 80081c2:	bd10      	pop	{r4, pc}
 80081c4:	e000ed00 	.word	0xe000ed00

080081c8 <HAL_PCD_MspInit>:
{
 80081c8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80081ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008204 <HAL_PCD_MspInit+0x3c>)
 80081cc:	6802      	ldr	r2, [r0, #0]
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d115      	bne.n	80081fe <HAL_PCD_MspInit+0x36>
    __HAL_RCC_USB_CLK_ENABLE();
 80081d2:	f503 33da 	add.w	r3, r3, #111616	@ 0x1b400
 80081d6:	69da      	ldr	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80081d8:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 80081da:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80081de:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80081e0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80081e2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80081e4:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80081e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80081ee:	f7fa fed3 	bl	8002f98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80081f2:	2014      	movs	r0, #20
}
 80081f4:	b003      	add	sp, #12
 80081f6:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80081fa:	f7fa befd 	b.w	8002ff8 <HAL_NVIC_EnableIRQ>
}
 80081fe:	b003      	add	sp, #12
 8008200:	f85d fb04 	ldr.w	pc, [sp], #4
 8008204:	40005c00 	.word	0x40005c00

08008208 <USBD_LL_Init>:
{
 8008208:	b510      	push	{r4, lr}
  hpcd_USB_FS.Instance = USB;
 800820a:	4b37      	ldr	r3, [pc, #220]	@ (80082e8 <USBD_LL_Init+0xe0>)
{
 800820c:	4604      	mov	r4, r0
  hpcd_USB_FS.pData = pdev;
 800820e:	4837      	ldr	r0, [pc, #220]	@ (80082ec <USBD_LL_Init+0xe4>)
  hpcd_USB_FS.Instance = USB;
 8008210:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008212:	2308      	movs	r3, #8
 8008214:	7103      	strb	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008216:	2302      	movs	r3, #2
 8008218:	7183      	strb	r3, [r0, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800821a:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 800821c:	f8c0 42d4 	str.w	r4, [r0, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 8008220:	f8c4 02c0 	str.w	r0, [r4, #704]	@ 0x2c0
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008224:	8143      	strh	r3, [r0, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008226:	7303      	strb	r3, [r0, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008228:	f7fc fb8e 	bl	8004948 <HAL_PCD_Init>
 800822c:	b108      	cbz	r0, 8008232 <USBD_LL_Init+0x2a>
    Error_Handler( );
 800822e:	f7f9 fe59 	bl	8001ee4 <Error_Handler>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_SOF_CB_ID, PCD_SOFCallback);
 8008232:	2101      	movs	r1, #1
 8008234:	4a2e      	ldr	r2, [pc, #184]	@ (80082f0 <USBD_LL_Init+0xe8>)
 8008236:	482d      	ldr	r0, [pc, #180]	@ (80082ec <USBD_LL_Init+0xe4>)
 8008238:	f7fc fc2c 	bl	8004a94 <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_SETUPSTAGE_CB_ID, PCD_SetupStageCallback);
 800823c:	2102      	movs	r1, #2
 800823e:	4a2d      	ldr	r2, [pc, #180]	@ (80082f4 <USBD_LL_Init+0xec>)
 8008240:	482a      	ldr	r0, [pc, #168]	@ (80082ec <USBD_LL_Init+0xe4>)
 8008242:	f7fc fc27 	bl	8004a94 <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_RESET_CB_ID, PCD_ResetCallback);
 8008246:	2103      	movs	r1, #3
 8008248:	4a2b      	ldr	r2, [pc, #172]	@ (80082f8 <USBD_LL_Init+0xf0>)
 800824a:	4828      	ldr	r0, [pc, #160]	@ (80082ec <USBD_LL_Init+0xe4>)
 800824c:	f7fc fc22 	bl	8004a94 <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_SUSPEND_CB_ID, PCD_SuspendCallback);
 8008250:	2104      	movs	r1, #4
 8008252:	4a2a      	ldr	r2, [pc, #168]	@ (80082fc <USBD_LL_Init+0xf4>)
 8008254:	4825      	ldr	r0, [pc, #148]	@ (80082ec <USBD_LL_Init+0xe4>)
 8008256:	f7fc fc1d 	bl	8004a94 <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_RESUME_CB_ID, PCD_ResumeCallback);
 800825a:	2105      	movs	r1, #5
 800825c:	4a28      	ldr	r2, [pc, #160]	@ (8008300 <USBD_LL_Init+0xf8>)
 800825e:	4823      	ldr	r0, [pc, #140]	@ (80082ec <USBD_LL_Init+0xe4>)
 8008260:	f7fc fc18 	bl	8004a94 <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_CONNECT_CB_ID, PCD_ConnectCallback);
 8008264:	2106      	movs	r1, #6
 8008266:	4a27      	ldr	r2, [pc, #156]	@ (8008304 <USBD_LL_Init+0xfc>)
 8008268:	4820      	ldr	r0, [pc, #128]	@ (80082ec <USBD_LL_Init+0xe4>)
 800826a:	f7fc fc13 	bl	8004a94 <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_DISCONNECT_CB_ID, PCD_DisconnectCallback);
 800826e:	4a26      	ldr	r2, [pc, #152]	@ (8008308 <USBD_LL_Init+0x100>)
 8008270:	2107      	movs	r1, #7
 8008272:	481e      	ldr	r0, [pc, #120]	@ (80082ec <USBD_LL_Init+0xe4>)
 8008274:	f7fc fc0e 	bl	8004a94 <HAL_PCD_RegisterCallback>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_FS, PCD_DataOutStageCallback);
 8008278:	4924      	ldr	r1, [pc, #144]	@ (800830c <USBD_LL_Init+0x104>)
 800827a:	481c      	ldr	r0, [pc, #112]	@ (80082ec <USBD_LL_Init+0xe4>)
 800827c:	f7fc fc59 	bl	8004b32 <HAL_PCD_RegisterDataOutStageCallback>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
 8008280:	4923      	ldr	r1, [pc, #140]	@ (8008310 <USBD_LL_Init+0x108>)
 8008282:	481a      	ldr	r0, [pc, #104]	@ (80082ec <USBD_LL_Init+0xe4>)
 8008284:	f7fc fc7b 	bl	8004b7e <HAL_PCD_RegisterDataInStageCallback>
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
 8008288:	4922      	ldr	r1, [pc, #136]	@ (8008314 <USBD_LL_Init+0x10c>)
 800828a:	4818      	ldr	r0, [pc, #96]	@ (80082ec <USBD_LL_Init+0xe4>)
 800828c:	f7fc fc9d 	bl	8004bca <HAL_PCD_RegisterIsoOutIncpltCallback>
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
 8008290:	4921      	ldr	r1, [pc, #132]	@ (8008318 <USBD_LL_Init+0x110>)
 8008292:	4816      	ldr	r0, [pc, #88]	@ (80082ec <USBD_LL_Init+0xe4>)
 8008294:	f7fc fcbf 	bl	8004c16 <HAL_PCD_RegisterIsoInIncpltCallback>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008298:	2200      	movs	r2, #0
 800829a:	2318      	movs	r3, #24
 800829c:	4611      	mov	r1, r2
 800829e:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80082a2:	f7fd fb14 	bl	80058ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80082a6:	2358      	movs	r3, #88	@ 0x58
 80082a8:	2200      	movs	r2, #0
 80082aa:	2180      	movs	r1, #128	@ 0x80
 80082ac:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80082b0:	f7fd fb0d 	bl	80058ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80082b4:	23c0      	movs	r3, #192	@ 0xc0
 80082b6:	2200      	movs	r2, #0
 80082b8:	2181      	movs	r1, #129	@ 0x81
 80082ba:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80082be:	f7fd fb06 	bl	80058ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80082c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80082c6:	2200      	movs	r2, #0
 80082c8:	2101      	movs	r1, #1
 80082ca:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80082ce:	f7fd fafe 	bl	80058ce <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80082d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80082d6:	2200      	movs	r2, #0
 80082d8:	2182      	movs	r1, #130	@ 0x82
 80082da:	f8d4 02c0 	ldr.w	r0, [r4, #704]	@ 0x2c0
 80082de:	f7fd faf6 	bl	80058ce <HAL_PCDEx_PMAConfig>
}
 80082e2:	2000      	movs	r0, #0
 80082e4:	bd10      	pop	{r4, pc}
 80082e6:	bf00      	nop
 80082e8:	40005c00 	.word	0x40005c00
 80082ec:	20001cc8 	.word	0x20001cc8
 80082f0:	0800819f 	.word	0x0800819f
 80082f4:	08008193 	.word	0x08008193
 80082f8:	0800816f 	.word	0x0800816f
 80082fc:	080081a9 	.word	0x080081a9
 8008300:	08008167 	.word	0x08008167
 8008304:	0800815f 	.word	0x0800815f
 8008308:	08008157 	.word	0x08008157
 800830c:	08008145 	.word	0x08008145
 8008310:	08008135 	.word	0x08008135
 8008314:	0800812d 	.word	0x0800812d
 8008318:	08008125 	.word	0x08008125

0800831c <USBD_LL_Start>:
{
 800831c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 800831e:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8008322:	f7fc fc9e 	bl	8004c62 <HAL_PCD_Start>
}
 8008326:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 800832a:	f7ff bef5 	b.w	8008118 <USBD_Get_USB_Status>

0800832e <USBD_LL_OpenEP>:
{
 800832e:	b510      	push	{r4, lr}
 8008330:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008332:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
{
 8008336:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008338:	4623      	mov	r3, r4
 800833a:	f7fd f9d1 	bl	80056e0 <HAL_PCD_EP_Open>
}
 800833e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008342:	f7ff bee9 	b.w	8008118 <USBD_Get_USB_Status>

08008346 <USBD_LL_CloseEP>:
{
 8008346:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008348:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800834c:	f7fd f9f8 	bl	8005740 <HAL_PCD_EP_Close>
}
 8008350:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008354:	f7ff bee0 	b.w	8008118 <USBD_Get_USB_Status>

08008358 <USBD_LL_StallEP>:
{
 8008358:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800835a:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 800835e:	f7fd fa4e 	bl	80057fe <HAL_PCD_EP_SetStall>
}
 8008362:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008366:	f7ff bed7 	b.w	8008118 <USBD_Get_USB_Status>

0800836a <USBD_LL_ClearStallEP>:
{
 800836a:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800836c:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 8008370:	f7fd fa7b 	bl	800586a <HAL_PCD_EP_ClrStall>
}
 8008374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008378:	f7ff bece 	b.w	8008118 <USBD_Get_USB_Status>

0800837c <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800837c:	2228      	movs	r2, #40	@ 0x28
  if((ep_addr & 0x80) == 0x80)
 800837e:	f011 0f80 	tst.w	r1, #128	@ 0x80
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008382:	f8d0 32c0 	ldr.w	r3, [r0, #704]	@ 0x2c0
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008386:	bf1b      	ittet	ne
 8008388:	f001 017f 	andne.w	r1, r1, #127	@ 0x7f
 800838c:	fb02 3301 	mlane	r3, r2, r1, r3
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008390:	fb02 3301 	mlaeq	r3, r2, r1, r3
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008394:	7c98      	ldrbne	r0, [r3, #18]
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008396:	bf08      	it	eq
 8008398:	f893 0152 	ldrbeq.w	r0, [r3, #338]	@ 0x152
}
 800839c:	4770      	bx	lr

0800839e <USBD_LL_SetUSBAddress>:
{
 800839e:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80083a0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80083a4:	f7fc fc76 	bl	8004c94 <HAL_PCD_SetAddress>
}
 80083a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80083ac:	f7ff beb4 	b.w	8008118 <USBD_Get_USB_Status>

080083b0 <USBD_LL_Transmit>:
{
 80083b0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80083b2:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80083b6:	f7fd fa0a 	bl	80057ce <HAL_PCD_EP_Transmit>
}
 80083ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80083be:	f7ff beab 	b.w	8008118 <USBD_Get_USB_Status>

080083c2 <USBD_LL_PrepareReceive>:
{
 80083c2:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083c4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80083c8:	f7fd f9e2 	bl	8005790 <HAL_PCD_EP_Receive>
}
 80083cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  usb_status =  USBD_Get_USB_Status(hal_status);
 80083d0:	f7ff bea2 	b.w	8008118 <USBD_Get_USB_Status>

080083d4 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80083d4:	f8d0 02c0 	ldr.w	r0, [r0, #704]	@ 0x2c0
 80083d8:	f7fd b9f1 	b.w	80057be <HAL_PCD_EP_GetRxCount>

080083dc <USBD_static_malloc>:
}
 80083dc:	4800      	ldr	r0, [pc, #0]	@ (80083e0 <USBD_static_malloc+0x4>)
 80083de:	4770      	bx	lr
 80083e0:	20001aa8 	.word	0x20001aa8

080083e4 <USBD_static_free>:
}
 80083e4:	4770      	bx	lr

080083e6 <atof>:
 80083e6:	2100      	movs	r1, #0
 80083e8:	f000 bdfe 	b.w	8008fe8 <strtod>

080083ec <atoi>:
 80083ec:	220a      	movs	r2, #10
 80083ee:	2100      	movs	r1, #0
 80083f0:	f000 be80 	b.w	80090f4 <strtol>

080083f4 <sulp>:
 80083f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f8:	460f      	mov	r7, r1
 80083fa:	4690      	mov	r8, r2
 80083fc:	f002 f83a 	bl	800a474 <__ulp>
 8008400:	4604      	mov	r4, r0
 8008402:	460d      	mov	r5, r1
 8008404:	f1b8 0f00 	cmp.w	r8, #0
 8008408:	d011      	beq.n	800842e <sulp+0x3a>
 800840a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800840e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008412:	2b00      	cmp	r3, #0
 8008414:	dd0b      	ble.n	800842e <sulp+0x3a>
 8008416:	2400      	movs	r4, #0
 8008418:	051b      	lsls	r3, r3, #20
 800841a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800841e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008422:	4622      	mov	r2, r4
 8008424:	462b      	mov	r3, r5
 8008426:	f7f8 f861 	bl	80004ec <__aeabi_dmul>
 800842a:	4604      	mov	r4, r0
 800842c:	460d      	mov	r5, r1
 800842e:	4620      	mov	r0, r4
 8008430:	4629      	mov	r1, r5
 8008432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008438 <_strtod_l>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	b09f      	sub	sp, #124	@ 0x7c
 800843e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008440:	2200      	movs	r2, #0
 8008442:	460c      	mov	r4, r1
 8008444:	921a      	str	r2, [sp, #104]	@ 0x68
 8008446:	f04f 0a00 	mov.w	sl, #0
 800844a:	f04f 0b00 	mov.w	fp, #0
 800844e:	460a      	mov	r2, r1
 8008450:	9005      	str	r0, [sp, #20]
 8008452:	9219      	str	r2, [sp, #100]	@ 0x64
 8008454:	7811      	ldrb	r1, [r2, #0]
 8008456:	292b      	cmp	r1, #43	@ 0x2b
 8008458:	d048      	beq.n	80084ec <_strtod_l+0xb4>
 800845a:	d836      	bhi.n	80084ca <_strtod_l+0x92>
 800845c:	290d      	cmp	r1, #13
 800845e:	d830      	bhi.n	80084c2 <_strtod_l+0x8a>
 8008460:	2908      	cmp	r1, #8
 8008462:	d830      	bhi.n	80084c6 <_strtod_l+0x8e>
 8008464:	2900      	cmp	r1, #0
 8008466:	d039      	beq.n	80084dc <_strtod_l+0xa4>
 8008468:	2200      	movs	r2, #0
 800846a:	920e      	str	r2, [sp, #56]	@ 0x38
 800846c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800846e:	782a      	ldrb	r2, [r5, #0]
 8008470:	2a30      	cmp	r2, #48	@ 0x30
 8008472:	f040 80b0 	bne.w	80085d6 <_strtod_l+0x19e>
 8008476:	786a      	ldrb	r2, [r5, #1]
 8008478:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800847c:	2a58      	cmp	r2, #88	@ 0x58
 800847e:	d16c      	bne.n	800855a <_strtod_l+0x122>
 8008480:	9302      	str	r3, [sp, #8]
 8008482:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008484:	4a8f      	ldr	r2, [pc, #572]	@ (80086c4 <_strtod_l+0x28c>)
 8008486:	9301      	str	r3, [sp, #4]
 8008488:	ab1a      	add	r3, sp, #104	@ 0x68
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	9805      	ldr	r0, [sp, #20]
 800848e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008490:	a919      	add	r1, sp, #100	@ 0x64
 8008492:	f001 f8f1 	bl	8009678 <__gethex>
 8008496:	f010 060f 	ands.w	r6, r0, #15
 800849a:	4604      	mov	r4, r0
 800849c:	d005      	beq.n	80084aa <_strtod_l+0x72>
 800849e:	2e06      	cmp	r6, #6
 80084a0:	d126      	bne.n	80084f0 <_strtod_l+0xb8>
 80084a2:	2300      	movs	r3, #0
 80084a4:	3501      	adds	r5, #1
 80084a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80084a8:	930e      	str	r3, [sp, #56]	@ 0x38
 80084aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	f040 8582 	bne.w	8008fb6 <_strtod_l+0xb7e>
 80084b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084b4:	b1bb      	cbz	r3, 80084e6 <_strtod_l+0xae>
 80084b6:	4650      	mov	r0, sl
 80084b8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80084bc:	b01f      	add	sp, #124	@ 0x7c
 80084be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084c2:	2920      	cmp	r1, #32
 80084c4:	d1d0      	bne.n	8008468 <_strtod_l+0x30>
 80084c6:	3201      	adds	r2, #1
 80084c8:	e7c3      	b.n	8008452 <_strtod_l+0x1a>
 80084ca:	292d      	cmp	r1, #45	@ 0x2d
 80084cc:	d1cc      	bne.n	8008468 <_strtod_l+0x30>
 80084ce:	2101      	movs	r1, #1
 80084d0:	910e      	str	r1, [sp, #56]	@ 0x38
 80084d2:	1c51      	adds	r1, r2, #1
 80084d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80084d6:	7852      	ldrb	r2, [r2, #1]
 80084d8:	2a00      	cmp	r2, #0
 80084da:	d1c7      	bne.n	800846c <_strtod_l+0x34>
 80084dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80084de:	9419      	str	r4, [sp, #100]	@ 0x64
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f040 8566 	bne.w	8008fb2 <_strtod_l+0xb7a>
 80084e6:	4650      	mov	r0, sl
 80084e8:	4659      	mov	r1, fp
 80084ea:	e7e7      	b.n	80084bc <_strtod_l+0x84>
 80084ec:	2100      	movs	r1, #0
 80084ee:	e7ef      	b.n	80084d0 <_strtod_l+0x98>
 80084f0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80084f2:	b13a      	cbz	r2, 8008504 <_strtod_l+0xcc>
 80084f4:	2135      	movs	r1, #53	@ 0x35
 80084f6:	a81c      	add	r0, sp, #112	@ 0x70
 80084f8:	f002 f8ac 	bl	800a654 <__copybits>
 80084fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084fe:	9805      	ldr	r0, [sp, #20]
 8008500:	f001 fc8c 	bl	8009e1c <_Bfree>
 8008504:	3e01      	subs	r6, #1
 8008506:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008508:	2e04      	cmp	r6, #4
 800850a:	d806      	bhi.n	800851a <_strtod_l+0xe2>
 800850c:	e8df f006 	tbb	[pc, r6]
 8008510:	201d0314 	.word	0x201d0314
 8008514:	14          	.byte	0x14
 8008515:	00          	.byte	0x00
 8008516:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800851a:	05e1      	lsls	r1, r4, #23
 800851c:	bf48      	it	mi
 800851e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008522:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008526:	0d1b      	lsrs	r3, r3, #20
 8008528:	051b      	lsls	r3, r3, #20
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1bd      	bne.n	80084aa <_strtod_l+0x72>
 800852e:	f000 ffb1 	bl	8009494 <__errno>
 8008532:	2322      	movs	r3, #34	@ 0x22
 8008534:	6003      	str	r3, [r0, #0]
 8008536:	e7b8      	b.n	80084aa <_strtod_l+0x72>
 8008538:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800853c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008540:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008544:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008548:	e7e7      	b.n	800851a <_strtod_l+0xe2>
 800854a:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80086c8 <_strtod_l+0x290>
 800854e:	e7e4      	b.n	800851a <_strtod_l+0xe2>
 8008550:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008554:	f04f 3aff 	mov.w	sl, #4294967295
 8008558:	e7df      	b.n	800851a <_strtod_l+0xe2>
 800855a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	2b30      	cmp	r3, #48	@ 0x30
 8008564:	d0f9      	beq.n	800855a <_strtod_l+0x122>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d09f      	beq.n	80084aa <_strtod_l+0x72>
 800856a:	2301      	movs	r3, #1
 800856c:	2700      	movs	r7, #0
 800856e:	220a      	movs	r2, #10
 8008570:	46b9      	mov	r9, r7
 8008572:	9308      	str	r3, [sp, #32]
 8008574:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008576:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008578:	930c      	str	r3, [sp, #48]	@ 0x30
 800857a:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800857c:	7805      	ldrb	r5, [r0, #0]
 800857e:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008582:	b2d9      	uxtb	r1, r3
 8008584:	2909      	cmp	r1, #9
 8008586:	d928      	bls.n	80085da <_strtod_l+0x1a2>
 8008588:	2201      	movs	r2, #1
 800858a:	4950      	ldr	r1, [pc, #320]	@ (80086cc <_strtod_l+0x294>)
 800858c:	f000 feff 	bl	800938e <strncmp>
 8008590:	2800      	cmp	r0, #0
 8008592:	d032      	beq.n	80085fa <_strtod_l+0x1c2>
 8008594:	2000      	movs	r0, #0
 8008596:	462a      	mov	r2, r5
 8008598:	4603      	mov	r3, r0
 800859a:	464d      	mov	r5, r9
 800859c:	900a      	str	r0, [sp, #40]	@ 0x28
 800859e:	2a65      	cmp	r2, #101	@ 0x65
 80085a0:	d001      	beq.n	80085a6 <_strtod_l+0x16e>
 80085a2:	2a45      	cmp	r2, #69	@ 0x45
 80085a4:	d114      	bne.n	80085d0 <_strtod_l+0x198>
 80085a6:	b91d      	cbnz	r5, 80085b0 <_strtod_l+0x178>
 80085a8:	9a08      	ldr	r2, [sp, #32]
 80085aa:	4302      	orrs	r2, r0
 80085ac:	d096      	beq.n	80084dc <_strtod_l+0xa4>
 80085ae:	2500      	movs	r5, #0
 80085b0:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80085b2:	1c62      	adds	r2, r4, #1
 80085b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80085b6:	7862      	ldrb	r2, [r4, #1]
 80085b8:	2a2b      	cmp	r2, #43	@ 0x2b
 80085ba:	d07a      	beq.n	80086b2 <_strtod_l+0x27a>
 80085bc:	2a2d      	cmp	r2, #45	@ 0x2d
 80085be:	d07e      	beq.n	80086be <_strtod_l+0x286>
 80085c0:	f04f 0c00 	mov.w	ip, #0
 80085c4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80085c8:	2909      	cmp	r1, #9
 80085ca:	f240 8085 	bls.w	80086d8 <_strtod_l+0x2a0>
 80085ce:	9419      	str	r4, [sp, #100]	@ 0x64
 80085d0:	f04f 0800 	mov.w	r8, #0
 80085d4:	e0a5      	b.n	8008722 <_strtod_l+0x2ea>
 80085d6:	2300      	movs	r3, #0
 80085d8:	e7c8      	b.n	800856c <_strtod_l+0x134>
 80085da:	f1b9 0f08 	cmp.w	r9, #8
 80085de:	bfd8      	it	le
 80085e0:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80085e2:	f100 0001 	add.w	r0, r0, #1
 80085e6:	bfd6      	itet	le
 80085e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80085ec:	fb02 3707 	mlagt	r7, r2, r7, r3
 80085f0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80085f2:	f109 0901 	add.w	r9, r9, #1
 80085f6:	9019      	str	r0, [sp, #100]	@ 0x64
 80085f8:	e7bf      	b.n	800857a <_strtod_l+0x142>
 80085fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80085fc:	1c5a      	adds	r2, r3, #1
 80085fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8008600:	785a      	ldrb	r2, [r3, #1]
 8008602:	f1b9 0f00 	cmp.w	r9, #0
 8008606:	d03b      	beq.n	8008680 <_strtod_l+0x248>
 8008608:	464d      	mov	r5, r9
 800860a:	900a      	str	r0, [sp, #40]	@ 0x28
 800860c:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008610:	2b09      	cmp	r3, #9
 8008612:	d912      	bls.n	800863a <_strtod_l+0x202>
 8008614:	2301      	movs	r3, #1
 8008616:	e7c2      	b.n	800859e <_strtod_l+0x166>
 8008618:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800861a:	3001      	adds	r0, #1
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008620:	785a      	ldrb	r2, [r3, #1]
 8008622:	2a30      	cmp	r2, #48	@ 0x30
 8008624:	d0f8      	beq.n	8008618 <_strtod_l+0x1e0>
 8008626:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800862a:	2b08      	cmp	r3, #8
 800862c:	f200 84c8 	bhi.w	8008fc0 <_strtod_l+0xb88>
 8008630:	900a      	str	r0, [sp, #40]	@ 0x28
 8008632:	2000      	movs	r0, #0
 8008634:	4605      	mov	r5, r0
 8008636:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008638:	930c      	str	r3, [sp, #48]	@ 0x30
 800863a:	3a30      	subs	r2, #48	@ 0x30
 800863c:	f100 0301 	add.w	r3, r0, #1
 8008640:	d018      	beq.n	8008674 <_strtod_l+0x23c>
 8008642:	462e      	mov	r6, r5
 8008644:	f04f 0e0a 	mov.w	lr, #10
 8008648:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800864a:	4419      	add	r1, r3
 800864c:	910a      	str	r1, [sp, #40]	@ 0x28
 800864e:	1c71      	adds	r1, r6, #1
 8008650:	eba1 0c05 	sub.w	ip, r1, r5
 8008654:	4563      	cmp	r3, ip
 8008656:	dc15      	bgt.n	8008684 <_strtod_l+0x24c>
 8008658:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800865c:	182b      	adds	r3, r5, r0
 800865e:	2b08      	cmp	r3, #8
 8008660:	f105 0501 	add.w	r5, r5, #1
 8008664:	4405      	add	r5, r0
 8008666:	dc1a      	bgt.n	800869e <_strtod_l+0x266>
 8008668:	230a      	movs	r3, #10
 800866a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800866c:	fb03 2301 	mla	r3, r3, r1, r2
 8008670:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008672:	2300      	movs	r3, #0
 8008674:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008676:	4618      	mov	r0, r3
 8008678:	1c51      	adds	r1, r2, #1
 800867a:	9119      	str	r1, [sp, #100]	@ 0x64
 800867c:	7852      	ldrb	r2, [r2, #1]
 800867e:	e7c5      	b.n	800860c <_strtod_l+0x1d4>
 8008680:	4648      	mov	r0, r9
 8008682:	e7ce      	b.n	8008622 <_strtod_l+0x1ea>
 8008684:	2e08      	cmp	r6, #8
 8008686:	dc05      	bgt.n	8008694 <_strtod_l+0x25c>
 8008688:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800868a:	fb0e f606 	mul.w	r6, lr, r6
 800868e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008690:	460e      	mov	r6, r1
 8008692:	e7dc      	b.n	800864e <_strtod_l+0x216>
 8008694:	2910      	cmp	r1, #16
 8008696:	bfd8      	it	le
 8008698:	fb0e f707 	mulle.w	r7, lr, r7
 800869c:	e7f8      	b.n	8008690 <_strtod_l+0x258>
 800869e:	2b0f      	cmp	r3, #15
 80086a0:	bfdc      	itt	le
 80086a2:	230a      	movle	r3, #10
 80086a4:	fb03 2707 	mlale	r7, r3, r7, r2
 80086a8:	e7e3      	b.n	8008672 <_strtod_l+0x23a>
 80086aa:	2300      	movs	r3, #0
 80086ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80086ae:	2301      	movs	r3, #1
 80086b0:	e77a      	b.n	80085a8 <_strtod_l+0x170>
 80086b2:	f04f 0c00 	mov.w	ip, #0
 80086b6:	1ca2      	adds	r2, r4, #2
 80086b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80086ba:	78a2      	ldrb	r2, [r4, #2]
 80086bc:	e782      	b.n	80085c4 <_strtod_l+0x18c>
 80086be:	f04f 0c01 	mov.w	ip, #1
 80086c2:	e7f8      	b.n	80086b6 <_strtod_l+0x27e>
 80086c4:	0800c7d0 	.word	0x0800c7d0
 80086c8:	7ff00000 	.word	0x7ff00000
 80086cc:	0800c5d8 	.word	0x0800c5d8
 80086d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086d2:	1c51      	adds	r1, r2, #1
 80086d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80086d6:	7852      	ldrb	r2, [r2, #1]
 80086d8:	2a30      	cmp	r2, #48	@ 0x30
 80086da:	d0f9      	beq.n	80086d0 <_strtod_l+0x298>
 80086dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80086e0:	2908      	cmp	r1, #8
 80086e2:	f63f af75 	bhi.w	80085d0 <_strtod_l+0x198>
 80086e6:	f04f 080a 	mov.w	r8, #10
 80086ea:	3a30      	subs	r2, #48	@ 0x30
 80086ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80086ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086f0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80086f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80086f4:	1c56      	adds	r6, r2, #1
 80086f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80086f8:	7852      	ldrb	r2, [r2, #1]
 80086fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80086fe:	f1be 0f09 	cmp.w	lr, #9
 8008702:	d939      	bls.n	8008778 <_strtod_l+0x340>
 8008704:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008706:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800870a:	1a76      	subs	r6, r6, r1
 800870c:	2e08      	cmp	r6, #8
 800870e:	dc03      	bgt.n	8008718 <_strtod_l+0x2e0>
 8008710:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008712:	4588      	cmp	r8, r1
 8008714:	bfa8      	it	ge
 8008716:	4688      	movge	r8, r1
 8008718:	f1bc 0f00 	cmp.w	ip, #0
 800871c:	d001      	beq.n	8008722 <_strtod_l+0x2ea>
 800871e:	f1c8 0800 	rsb	r8, r8, #0
 8008722:	2d00      	cmp	r5, #0
 8008724:	d14e      	bne.n	80087c4 <_strtod_l+0x38c>
 8008726:	9908      	ldr	r1, [sp, #32]
 8008728:	4308      	orrs	r0, r1
 800872a:	f47f aebe 	bne.w	80084aa <_strtod_l+0x72>
 800872e:	2b00      	cmp	r3, #0
 8008730:	f47f aed4 	bne.w	80084dc <_strtod_l+0xa4>
 8008734:	2a69      	cmp	r2, #105	@ 0x69
 8008736:	d028      	beq.n	800878a <_strtod_l+0x352>
 8008738:	dc25      	bgt.n	8008786 <_strtod_l+0x34e>
 800873a:	2a49      	cmp	r2, #73	@ 0x49
 800873c:	d025      	beq.n	800878a <_strtod_l+0x352>
 800873e:	2a4e      	cmp	r2, #78	@ 0x4e
 8008740:	f47f aecc 	bne.w	80084dc <_strtod_l+0xa4>
 8008744:	4999      	ldr	r1, [pc, #612]	@ (80089ac <_strtod_l+0x574>)
 8008746:	a819      	add	r0, sp, #100	@ 0x64
 8008748:	f001 f9b8 	bl	8009abc <__match>
 800874c:	2800      	cmp	r0, #0
 800874e:	f43f aec5 	beq.w	80084dc <_strtod_l+0xa4>
 8008752:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	2b28      	cmp	r3, #40	@ 0x28
 8008758:	d12e      	bne.n	80087b8 <_strtod_l+0x380>
 800875a:	4995      	ldr	r1, [pc, #596]	@ (80089b0 <_strtod_l+0x578>)
 800875c:	aa1c      	add	r2, sp, #112	@ 0x70
 800875e:	a819      	add	r0, sp, #100	@ 0x64
 8008760:	f001 f9c0 	bl	8009ae4 <__hexnan>
 8008764:	2805      	cmp	r0, #5
 8008766:	d127      	bne.n	80087b8 <_strtod_l+0x380>
 8008768:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800876a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800876e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008772:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008776:	e698      	b.n	80084aa <_strtod_l+0x72>
 8008778:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800877a:	fb08 2101 	mla	r1, r8, r1, r2
 800877e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008782:	9209      	str	r2, [sp, #36]	@ 0x24
 8008784:	e7b5      	b.n	80086f2 <_strtod_l+0x2ba>
 8008786:	2a6e      	cmp	r2, #110	@ 0x6e
 8008788:	e7da      	b.n	8008740 <_strtod_l+0x308>
 800878a:	498a      	ldr	r1, [pc, #552]	@ (80089b4 <_strtod_l+0x57c>)
 800878c:	a819      	add	r0, sp, #100	@ 0x64
 800878e:	f001 f995 	bl	8009abc <__match>
 8008792:	2800      	cmp	r0, #0
 8008794:	f43f aea2 	beq.w	80084dc <_strtod_l+0xa4>
 8008798:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800879a:	4987      	ldr	r1, [pc, #540]	@ (80089b8 <_strtod_l+0x580>)
 800879c:	3b01      	subs	r3, #1
 800879e:	a819      	add	r0, sp, #100	@ 0x64
 80087a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80087a2:	f001 f98b 	bl	8009abc <__match>
 80087a6:	b910      	cbnz	r0, 80087ae <_strtod_l+0x376>
 80087a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80087aa:	3301      	adds	r3, #1
 80087ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80087ae:	f04f 0a00 	mov.w	sl, #0
 80087b2:	f8df b208 	ldr.w	fp, [pc, #520]	@ 80089bc <_strtod_l+0x584>
 80087b6:	e678      	b.n	80084aa <_strtod_l+0x72>
 80087b8:	4881      	ldr	r0, [pc, #516]	@ (80089c0 <_strtod_l+0x588>)
 80087ba:	f000 fea7 	bl	800950c <nan>
 80087be:	4682      	mov	sl, r0
 80087c0:	468b      	mov	fp, r1
 80087c2:	e672      	b.n	80084aa <_strtod_l+0x72>
 80087c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087c6:	f1b9 0f00 	cmp.w	r9, #0
 80087ca:	bf08      	it	eq
 80087cc:	46a9      	moveq	r9, r5
 80087ce:	eba8 0303 	sub.w	r3, r8, r3
 80087d2:	2d10      	cmp	r5, #16
 80087d4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80087d6:	462c      	mov	r4, r5
 80087d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80087da:	bfa8      	it	ge
 80087dc:	2410      	movge	r4, #16
 80087de:	f7f7 fe0b 	bl	80003f8 <__aeabi_ui2d>
 80087e2:	2d09      	cmp	r5, #9
 80087e4:	4682      	mov	sl, r0
 80087e6:	468b      	mov	fp, r1
 80087e8:	dc11      	bgt.n	800880e <_strtod_l+0x3d6>
 80087ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	f43f ae5c 	beq.w	80084aa <_strtod_l+0x72>
 80087f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087f4:	dd76      	ble.n	80088e4 <_strtod_l+0x4ac>
 80087f6:	2b16      	cmp	r3, #22
 80087f8:	dc5d      	bgt.n	80088b6 <_strtod_l+0x47e>
 80087fa:	4972      	ldr	r1, [pc, #456]	@ (80089c4 <_strtod_l+0x58c>)
 80087fc:	4652      	mov	r2, sl
 80087fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008802:	465b      	mov	r3, fp
 8008804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008808:	f7f7 fe70 	bl	80004ec <__aeabi_dmul>
 800880c:	e7d7      	b.n	80087be <_strtod_l+0x386>
 800880e:	4b6d      	ldr	r3, [pc, #436]	@ (80089c4 <_strtod_l+0x58c>)
 8008810:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008814:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008818:	f7f7 fe68 	bl	80004ec <__aeabi_dmul>
 800881c:	4682      	mov	sl, r0
 800881e:	4638      	mov	r0, r7
 8008820:	468b      	mov	fp, r1
 8008822:	f7f7 fde9 	bl	80003f8 <__aeabi_ui2d>
 8008826:	4602      	mov	r2, r0
 8008828:	460b      	mov	r3, r1
 800882a:	4650      	mov	r0, sl
 800882c:	4659      	mov	r1, fp
 800882e:	f7f7 fca7 	bl	8000180 <__adddf3>
 8008832:	2d0f      	cmp	r5, #15
 8008834:	4682      	mov	sl, r0
 8008836:	468b      	mov	fp, r1
 8008838:	ddd7      	ble.n	80087ea <_strtod_l+0x3b2>
 800883a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800883c:	1b2c      	subs	r4, r5, r4
 800883e:	441c      	add	r4, r3
 8008840:	2c00      	cmp	r4, #0
 8008842:	f340 8093 	ble.w	800896c <_strtod_l+0x534>
 8008846:	f014 030f 	ands.w	r3, r4, #15
 800884a:	d00a      	beq.n	8008862 <_strtod_l+0x42a>
 800884c:	495d      	ldr	r1, [pc, #372]	@ (80089c4 <_strtod_l+0x58c>)
 800884e:	4652      	mov	r2, sl
 8008850:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008854:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008858:	465b      	mov	r3, fp
 800885a:	f7f7 fe47 	bl	80004ec <__aeabi_dmul>
 800885e:	4682      	mov	sl, r0
 8008860:	468b      	mov	fp, r1
 8008862:	f034 040f 	bics.w	r4, r4, #15
 8008866:	d073      	beq.n	8008950 <_strtod_l+0x518>
 8008868:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800886c:	dd49      	ble.n	8008902 <_strtod_l+0x4ca>
 800886e:	2400      	movs	r4, #0
 8008870:	46a0      	mov	r8, r4
 8008872:	46a1      	mov	r9, r4
 8008874:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008876:	2322      	movs	r3, #34	@ 0x22
 8008878:	f04f 0a00 	mov.w	sl, #0
 800887c:	9a05      	ldr	r2, [sp, #20]
 800887e:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 80089bc <_strtod_l+0x584>
 8008882:	6013      	str	r3, [r2, #0]
 8008884:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008886:	2b00      	cmp	r3, #0
 8008888:	f43f ae0f 	beq.w	80084aa <_strtod_l+0x72>
 800888c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800888e:	9805      	ldr	r0, [sp, #20]
 8008890:	f001 fac4 	bl	8009e1c <_Bfree>
 8008894:	4649      	mov	r1, r9
 8008896:	9805      	ldr	r0, [sp, #20]
 8008898:	f001 fac0 	bl	8009e1c <_Bfree>
 800889c:	4641      	mov	r1, r8
 800889e:	9805      	ldr	r0, [sp, #20]
 80088a0:	f001 fabc 	bl	8009e1c <_Bfree>
 80088a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80088a6:	9805      	ldr	r0, [sp, #20]
 80088a8:	f001 fab8 	bl	8009e1c <_Bfree>
 80088ac:	4621      	mov	r1, r4
 80088ae:	9805      	ldr	r0, [sp, #20]
 80088b0:	f001 fab4 	bl	8009e1c <_Bfree>
 80088b4:	e5f9      	b.n	80084aa <_strtod_l+0x72>
 80088b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80088bc:	4293      	cmp	r3, r2
 80088be:	dbbc      	blt.n	800883a <_strtod_l+0x402>
 80088c0:	4c40      	ldr	r4, [pc, #256]	@ (80089c4 <_strtod_l+0x58c>)
 80088c2:	f1c5 050f 	rsb	r5, r5, #15
 80088c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80088ca:	4652      	mov	r2, sl
 80088cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80088d0:	465b      	mov	r3, fp
 80088d2:	f7f7 fe0b 	bl	80004ec <__aeabi_dmul>
 80088d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d8:	1b5d      	subs	r5, r3, r5
 80088da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80088de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80088e2:	e791      	b.n	8008808 <_strtod_l+0x3d0>
 80088e4:	3316      	adds	r3, #22
 80088e6:	dba8      	blt.n	800883a <_strtod_l+0x402>
 80088e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088ea:	4650      	mov	r0, sl
 80088ec:	eba3 0808 	sub.w	r8, r3, r8
 80088f0:	4b34      	ldr	r3, [pc, #208]	@ (80089c4 <_strtod_l+0x58c>)
 80088f2:	4659      	mov	r1, fp
 80088f4:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80088f8:	e9d8 2300 	ldrd	r2, r3, [r8]
 80088fc:	f7f7 ff20 	bl	8000740 <__aeabi_ddiv>
 8008900:	e75d      	b.n	80087be <_strtod_l+0x386>
 8008902:	2300      	movs	r3, #0
 8008904:	4650      	mov	r0, sl
 8008906:	4659      	mov	r1, fp
 8008908:	461e      	mov	r6, r3
 800890a:	4f2f      	ldr	r7, [pc, #188]	@ (80089c8 <_strtod_l+0x590>)
 800890c:	1124      	asrs	r4, r4, #4
 800890e:	2c01      	cmp	r4, #1
 8008910:	dc21      	bgt.n	8008956 <_strtod_l+0x51e>
 8008912:	b10b      	cbz	r3, 8008918 <_strtod_l+0x4e0>
 8008914:	4682      	mov	sl, r0
 8008916:	468b      	mov	fp, r1
 8008918:	492b      	ldr	r1, [pc, #172]	@ (80089c8 <_strtod_l+0x590>)
 800891a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800891e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008922:	4652      	mov	r2, sl
 8008924:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008928:	465b      	mov	r3, fp
 800892a:	f7f7 fddf 	bl	80004ec <__aeabi_dmul>
 800892e:	4b23      	ldr	r3, [pc, #140]	@ (80089bc <_strtod_l+0x584>)
 8008930:	460a      	mov	r2, r1
 8008932:	400b      	ands	r3, r1
 8008934:	4925      	ldr	r1, [pc, #148]	@ (80089cc <_strtod_l+0x594>)
 8008936:	4682      	mov	sl, r0
 8008938:	428b      	cmp	r3, r1
 800893a:	d898      	bhi.n	800886e <_strtod_l+0x436>
 800893c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008940:	428b      	cmp	r3, r1
 8008942:	bf86      	itte	hi
 8008944:	f04f 3aff 	movhi.w	sl, #4294967295
 8008948:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 80089d0 <_strtod_l+0x598>
 800894c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008950:	2300      	movs	r3, #0
 8008952:	9308      	str	r3, [sp, #32]
 8008954:	e076      	b.n	8008a44 <_strtod_l+0x60c>
 8008956:	07e2      	lsls	r2, r4, #31
 8008958:	d504      	bpl.n	8008964 <_strtod_l+0x52c>
 800895a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800895e:	f7f7 fdc5 	bl	80004ec <__aeabi_dmul>
 8008962:	2301      	movs	r3, #1
 8008964:	3601      	adds	r6, #1
 8008966:	1064      	asrs	r4, r4, #1
 8008968:	3708      	adds	r7, #8
 800896a:	e7d0      	b.n	800890e <_strtod_l+0x4d6>
 800896c:	d0f0      	beq.n	8008950 <_strtod_l+0x518>
 800896e:	4264      	negs	r4, r4
 8008970:	f014 020f 	ands.w	r2, r4, #15
 8008974:	d00a      	beq.n	800898c <_strtod_l+0x554>
 8008976:	4b13      	ldr	r3, [pc, #76]	@ (80089c4 <_strtod_l+0x58c>)
 8008978:	4650      	mov	r0, sl
 800897a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800897e:	4659      	mov	r1, fp
 8008980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008984:	f7f7 fedc 	bl	8000740 <__aeabi_ddiv>
 8008988:	4682      	mov	sl, r0
 800898a:	468b      	mov	fp, r1
 800898c:	1124      	asrs	r4, r4, #4
 800898e:	d0df      	beq.n	8008950 <_strtod_l+0x518>
 8008990:	2c1f      	cmp	r4, #31
 8008992:	dd1f      	ble.n	80089d4 <_strtod_l+0x59c>
 8008994:	2400      	movs	r4, #0
 8008996:	46a0      	mov	r8, r4
 8008998:	46a1      	mov	r9, r4
 800899a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800899c:	2322      	movs	r3, #34	@ 0x22
 800899e:	9a05      	ldr	r2, [sp, #20]
 80089a0:	f04f 0a00 	mov.w	sl, #0
 80089a4:	f04f 0b00 	mov.w	fp, #0
 80089a8:	6013      	str	r3, [r2, #0]
 80089aa:	e76b      	b.n	8008884 <_strtod_l+0x44c>
 80089ac:	0800c5e3 	.word	0x0800c5e3
 80089b0:	0800c7bc 	.word	0x0800c7bc
 80089b4:	0800c5da 	.word	0x0800c5da
 80089b8:	0800c5dd 	.word	0x0800c5dd
 80089bc:	7ff00000 	.word	0x7ff00000
 80089c0:	0800c5a0 	.word	0x0800c5a0
 80089c4:	0800c948 	.word	0x0800c948
 80089c8:	0800c920 	.word	0x0800c920
 80089cc:	7ca00000 	.word	0x7ca00000
 80089d0:	7fefffff 	.word	0x7fefffff
 80089d4:	f014 0310 	ands.w	r3, r4, #16
 80089d8:	bf18      	it	ne
 80089da:	236a      	movne	r3, #106	@ 0x6a
 80089dc:	4650      	mov	r0, sl
 80089de:	9308      	str	r3, [sp, #32]
 80089e0:	4659      	mov	r1, fp
 80089e2:	2300      	movs	r3, #0
 80089e4:	4e77      	ldr	r6, [pc, #476]	@ (8008bc4 <_strtod_l+0x78c>)
 80089e6:	07e7      	lsls	r7, r4, #31
 80089e8:	d504      	bpl.n	80089f4 <_strtod_l+0x5bc>
 80089ea:	e9d6 2300 	ldrd	r2, r3, [r6]
 80089ee:	f7f7 fd7d 	bl	80004ec <__aeabi_dmul>
 80089f2:	2301      	movs	r3, #1
 80089f4:	1064      	asrs	r4, r4, #1
 80089f6:	f106 0608 	add.w	r6, r6, #8
 80089fa:	d1f4      	bne.n	80089e6 <_strtod_l+0x5ae>
 80089fc:	b10b      	cbz	r3, 8008a02 <_strtod_l+0x5ca>
 80089fe:	4682      	mov	sl, r0
 8008a00:	468b      	mov	fp, r1
 8008a02:	9b08      	ldr	r3, [sp, #32]
 8008a04:	b1b3      	cbz	r3, 8008a34 <_strtod_l+0x5fc>
 8008a06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008a0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	4659      	mov	r1, fp
 8008a12:	dd0f      	ble.n	8008a34 <_strtod_l+0x5fc>
 8008a14:	2b1f      	cmp	r3, #31
 8008a16:	dd58      	ble.n	8008aca <_strtod_l+0x692>
 8008a18:	2b34      	cmp	r3, #52	@ 0x34
 8008a1a:	bfd8      	it	le
 8008a1c:	f04f 33ff 	movle.w	r3, #4294967295
 8008a20:	f04f 0a00 	mov.w	sl, #0
 8008a24:	bfcf      	iteee	gt
 8008a26:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008a2a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008a2e:	4093      	lslle	r3, r2
 8008a30:	ea03 0b01 	andle.w	fp, r3, r1
 8008a34:	2200      	movs	r2, #0
 8008a36:	2300      	movs	r3, #0
 8008a38:	4650      	mov	r0, sl
 8008a3a:	4659      	mov	r1, fp
 8008a3c:	f7f7 ffbe 	bl	80009bc <__aeabi_dcmpeq>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d1a7      	bne.n	8008994 <_strtod_l+0x55c>
 8008a44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a46:	464a      	mov	r2, r9
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008a4c:	462b      	mov	r3, r5
 8008a4e:	9805      	ldr	r0, [sp, #20]
 8008a50:	f001 fa4c 	bl	8009eec <__s2b>
 8008a54:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008a56:	2800      	cmp	r0, #0
 8008a58:	f43f af09 	beq.w	800886e <_strtod_l+0x436>
 8008a5c:	2400      	movs	r4, #0
 8008a5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a60:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	eba3 0308 	sub.w	r3, r3, r8
 8008a68:	bfa8      	it	ge
 8008a6a:	2300      	movge	r3, #0
 8008a6c:	46a0      	mov	r8, r4
 8008a6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008a70:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008a74:	9316      	str	r3, [sp, #88]	@ 0x58
 8008a76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a78:	9805      	ldr	r0, [sp, #20]
 8008a7a:	6859      	ldr	r1, [r3, #4]
 8008a7c:	f001 f98e 	bl	8009d9c <_Balloc>
 8008a80:	4681      	mov	r9, r0
 8008a82:	2800      	cmp	r0, #0
 8008a84:	f43f aef7 	beq.w	8008876 <_strtod_l+0x43e>
 8008a88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a8a:	300c      	adds	r0, #12
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	f103 010c 	add.w	r1, r3, #12
 8008a92:	3202      	adds	r2, #2
 8008a94:	0092      	lsls	r2, r2, #2
 8008a96:	f000 fd2a 	bl	80094ee <memcpy>
 8008a9a:	ab1c      	add	r3, sp, #112	@ 0x70
 8008a9c:	9301      	str	r3, [sp, #4]
 8008a9e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008aa0:	9300      	str	r3, [sp, #0]
 8008aa2:	4652      	mov	r2, sl
 8008aa4:	465b      	mov	r3, fp
 8008aa6:	9805      	ldr	r0, [sp, #20]
 8008aa8:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008aac:	f001 fd4a 	bl	800a544 <__d2b>
 8008ab0:	901a      	str	r0, [sp, #104]	@ 0x68
 8008ab2:	2800      	cmp	r0, #0
 8008ab4:	f43f aedf 	beq.w	8008876 <_strtod_l+0x43e>
 8008ab8:	2101      	movs	r1, #1
 8008aba:	9805      	ldr	r0, [sp, #20]
 8008abc:	f001 faac 	bl	800a018 <__i2b>
 8008ac0:	4680      	mov	r8, r0
 8008ac2:	b948      	cbnz	r0, 8008ad8 <_strtod_l+0x6a0>
 8008ac4:	f04f 0800 	mov.w	r8, #0
 8008ac8:	e6d5      	b.n	8008876 <_strtod_l+0x43e>
 8008aca:	f04f 32ff 	mov.w	r2, #4294967295
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	ea03 0a0a 	and.w	sl, r3, sl
 8008ad6:	e7ad      	b.n	8008a34 <_strtod_l+0x5fc>
 8008ad8:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008ada:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008adc:	2d00      	cmp	r5, #0
 8008ade:	bfab      	itete	ge
 8008ae0:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008ae2:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008ae4:	18ef      	addge	r7, r5, r3
 8008ae6:	1b5e      	sublt	r6, r3, r5
 8008ae8:	9b08      	ldr	r3, [sp, #32]
 8008aea:	bfa8      	it	ge
 8008aec:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008aee:	eba5 0503 	sub.w	r5, r5, r3
 8008af2:	4415      	add	r5, r2
 8008af4:	4b34      	ldr	r3, [pc, #208]	@ (8008bc8 <_strtod_l+0x790>)
 8008af6:	f105 35ff 	add.w	r5, r5, #4294967295
 8008afa:	bfb8      	it	lt
 8008afc:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008afe:	429d      	cmp	r5, r3
 8008b00:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008b04:	da50      	bge.n	8008ba8 <_strtod_l+0x770>
 8008b06:	1b5b      	subs	r3, r3, r5
 8008b08:	2b1f      	cmp	r3, #31
 8008b0a:	f04f 0101 	mov.w	r1, #1
 8008b0e:	eba2 0203 	sub.w	r2, r2, r3
 8008b12:	dc3d      	bgt.n	8008b90 <_strtod_l+0x758>
 8008b14:	fa01 f303 	lsl.w	r3, r1, r3
 8008b18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	9310      	str	r3, [sp, #64]	@ 0x40
 8008b1e:	18bd      	adds	r5, r7, r2
 8008b20:	9b08      	ldr	r3, [sp, #32]
 8008b22:	42af      	cmp	r7, r5
 8008b24:	4416      	add	r6, r2
 8008b26:	441e      	add	r6, r3
 8008b28:	463b      	mov	r3, r7
 8008b2a:	bfa8      	it	ge
 8008b2c:	462b      	movge	r3, r5
 8008b2e:	42b3      	cmp	r3, r6
 8008b30:	bfa8      	it	ge
 8008b32:	4633      	movge	r3, r6
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	bfc2      	ittt	gt
 8008b38:	1aed      	subgt	r5, r5, r3
 8008b3a:	1af6      	subgt	r6, r6, r3
 8008b3c:	1aff      	subgt	r7, r7, r3
 8008b3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	dd16      	ble.n	8008b72 <_strtod_l+0x73a>
 8008b44:	4641      	mov	r1, r8
 8008b46:	461a      	mov	r2, r3
 8008b48:	9805      	ldr	r0, [sp, #20]
 8008b4a:	f001 fb1d 	bl	800a188 <__pow5mult>
 8008b4e:	4680      	mov	r8, r0
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d0b7      	beq.n	8008ac4 <_strtod_l+0x68c>
 8008b54:	4601      	mov	r1, r0
 8008b56:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008b58:	9805      	ldr	r0, [sp, #20]
 8008b5a:	f001 fa73 	bl	800a044 <__multiply>
 8008b5e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b60:	2800      	cmp	r0, #0
 8008b62:	f43f ae88 	beq.w	8008876 <_strtod_l+0x43e>
 8008b66:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b68:	9805      	ldr	r0, [sp, #20]
 8008b6a:	f001 f957 	bl	8009e1c <_Bfree>
 8008b6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b70:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b72:	2d00      	cmp	r5, #0
 8008b74:	dc1d      	bgt.n	8008bb2 <_strtod_l+0x77a>
 8008b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	dd27      	ble.n	8008bcc <_strtod_l+0x794>
 8008b7c:	4649      	mov	r1, r9
 8008b7e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008b80:	9805      	ldr	r0, [sp, #20]
 8008b82:	f001 fb01 	bl	800a188 <__pow5mult>
 8008b86:	4681      	mov	r9, r0
 8008b88:	bb00      	cbnz	r0, 8008bcc <_strtod_l+0x794>
 8008b8a:	f04f 0900 	mov.w	r9, #0
 8008b8e:	e672      	b.n	8008876 <_strtod_l+0x43e>
 8008b90:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008b94:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008b98:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008b9c:	35e2      	adds	r5, #226	@ 0xe2
 8008b9e:	fa01 f305 	lsl.w	r3, r1, r5
 8008ba2:	9310      	str	r3, [sp, #64]	@ 0x40
 8008ba4:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008ba6:	e7ba      	b.n	8008b1e <_strtod_l+0x6e6>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bac:	2301      	movs	r3, #1
 8008bae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008bb0:	e7b5      	b.n	8008b1e <_strtod_l+0x6e6>
 8008bb2:	462a      	mov	r2, r5
 8008bb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bb6:	9805      	ldr	r0, [sp, #20]
 8008bb8:	f001 fb40 	bl	800a23c <__lshift>
 8008bbc:	901a      	str	r0, [sp, #104]	@ 0x68
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d1d9      	bne.n	8008b76 <_strtod_l+0x73e>
 8008bc2:	e658      	b.n	8008876 <_strtod_l+0x43e>
 8008bc4:	0800c7e8 	.word	0x0800c7e8
 8008bc8:	fffffc02 	.word	0xfffffc02
 8008bcc:	2e00      	cmp	r6, #0
 8008bce:	dd07      	ble.n	8008be0 <_strtod_l+0x7a8>
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	4632      	mov	r2, r6
 8008bd4:	9805      	ldr	r0, [sp, #20]
 8008bd6:	f001 fb31 	bl	800a23c <__lshift>
 8008bda:	4681      	mov	r9, r0
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	d0d4      	beq.n	8008b8a <_strtod_l+0x752>
 8008be0:	2f00      	cmp	r7, #0
 8008be2:	dd08      	ble.n	8008bf6 <_strtod_l+0x7be>
 8008be4:	4641      	mov	r1, r8
 8008be6:	463a      	mov	r2, r7
 8008be8:	9805      	ldr	r0, [sp, #20]
 8008bea:	f001 fb27 	bl	800a23c <__lshift>
 8008bee:	4680      	mov	r8, r0
 8008bf0:	2800      	cmp	r0, #0
 8008bf2:	f43f ae40 	beq.w	8008876 <_strtod_l+0x43e>
 8008bf6:	464a      	mov	r2, r9
 8008bf8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008bfa:	9805      	ldr	r0, [sp, #20]
 8008bfc:	f001 fba6 	bl	800a34c <__mdiff>
 8008c00:	4604      	mov	r4, r0
 8008c02:	2800      	cmp	r0, #0
 8008c04:	f43f ae37 	beq.w	8008876 <_strtod_l+0x43e>
 8008c08:	68c3      	ldr	r3, [r0, #12]
 8008c0a:	4641      	mov	r1, r8
 8008c0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60c3      	str	r3, [r0, #12]
 8008c12:	f001 fb7f 	bl	800a314 <__mcmp>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	da3d      	bge.n	8008c96 <_strtod_l+0x85e>
 8008c1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c1c:	ea53 030a 	orrs.w	r3, r3, sl
 8008c20:	d163      	bne.n	8008cea <_strtod_l+0x8b2>
 8008c22:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d15f      	bne.n	8008cea <_strtod_l+0x8b2>
 8008c2a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c2e:	0d1b      	lsrs	r3, r3, #20
 8008c30:	051b      	lsls	r3, r3, #20
 8008c32:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c36:	d958      	bls.n	8008cea <_strtod_l+0x8b2>
 8008c38:	6963      	ldr	r3, [r4, #20]
 8008c3a:	b913      	cbnz	r3, 8008c42 <_strtod_l+0x80a>
 8008c3c:	6923      	ldr	r3, [r4, #16]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	dd53      	ble.n	8008cea <_strtod_l+0x8b2>
 8008c42:	4621      	mov	r1, r4
 8008c44:	2201      	movs	r2, #1
 8008c46:	9805      	ldr	r0, [sp, #20]
 8008c48:	f001 faf8 	bl	800a23c <__lshift>
 8008c4c:	4641      	mov	r1, r8
 8008c4e:	4604      	mov	r4, r0
 8008c50:	f001 fb60 	bl	800a314 <__mcmp>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	dd48      	ble.n	8008cea <_strtod_l+0x8b2>
 8008c58:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c5c:	9a08      	ldr	r2, [sp, #32]
 8008c5e:	0d1b      	lsrs	r3, r3, #20
 8008c60:	051b      	lsls	r3, r3, #20
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	d062      	beq.n	8008d2c <_strtod_l+0x8f4>
 8008c66:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008c6a:	d85f      	bhi.n	8008d2c <_strtod_l+0x8f4>
 8008c6c:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008c70:	f67f ae94 	bls.w	800899c <_strtod_l+0x564>
 8008c74:	4650      	mov	r0, sl
 8008c76:	4659      	mov	r1, fp
 8008c78:	4ba3      	ldr	r3, [pc, #652]	@ (8008f08 <_strtod_l+0xad0>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	f7f7 fc36 	bl	80004ec <__aeabi_dmul>
 8008c80:	4ba2      	ldr	r3, [pc, #648]	@ (8008f0c <_strtod_l+0xad4>)
 8008c82:	4682      	mov	sl, r0
 8008c84:	400b      	ands	r3, r1
 8008c86:	468b      	mov	fp, r1
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f47f adff 	bne.w	800888c <_strtod_l+0x454>
 8008c8e:	2322      	movs	r3, #34	@ 0x22
 8008c90:	9a05      	ldr	r2, [sp, #20]
 8008c92:	6013      	str	r3, [r2, #0]
 8008c94:	e5fa      	b.n	800888c <_strtod_l+0x454>
 8008c96:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008c9a:	d165      	bne.n	8008d68 <_strtod_l+0x930>
 8008c9c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008c9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008ca2:	b35a      	cbz	r2, 8008cfc <_strtod_l+0x8c4>
 8008ca4:	4a9a      	ldr	r2, [pc, #616]	@ (8008f10 <_strtod_l+0xad8>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d12b      	bne.n	8008d02 <_strtod_l+0x8ca>
 8008caa:	9b08      	ldr	r3, [sp, #32]
 8008cac:	4651      	mov	r1, sl
 8008cae:	b303      	cbz	r3, 8008cf2 <_strtod_l+0x8ba>
 8008cb0:	465a      	mov	r2, fp
 8008cb2:	4b96      	ldr	r3, [pc, #600]	@ (8008f0c <_strtod_l+0xad4>)
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008cba:	f04f 32ff 	mov.w	r2, #4294967295
 8008cbe:	d81b      	bhi.n	8008cf8 <_strtod_l+0x8c0>
 8008cc0:	0d1b      	lsrs	r3, r3, #20
 8008cc2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8008cca:	4299      	cmp	r1, r3
 8008ccc:	d119      	bne.n	8008d02 <_strtod_l+0x8ca>
 8008cce:	4b91      	ldr	r3, [pc, #580]	@ (8008f14 <_strtod_l+0xadc>)
 8008cd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d102      	bne.n	8008cdc <_strtod_l+0x8a4>
 8008cd6:	3101      	adds	r1, #1
 8008cd8:	f43f adcd 	beq.w	8008876 <_strtod_l+0x43e>
 8008cdc:	f04f 0a00 	mov.w	sl, #0
 8008ce0:	4b8a      	ldr	r3, [pc, #552]	@ (8008f0c <_strtod_l+0xad4>)
 8008ce2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ce4:	401a      	ands	r2, r3
 8008ce6:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008cea:	9b08      	ldr	r3, [sp, #32]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1c1      	bne.n	8008c74 <_strtod_l+0x83c>
 8008cf0:	e5cc      	b.n	800888c <_strtod_l+0x454>
 8008cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8008cf6:	e7e8      	b.n	8008cca <_strtod_l+0x892>
 8008cf8:	4613      	mov	r3, r2
 8008cfa:	e7e6      	b.n	8008cca <_strtod_l+0x892>
 8008cfc:	ea53 030a 	orrs.w	r3, r3, sl
 8008d00:	d0aa      	beq.n	8008c58 <_strtod_l+0x820>
 8008d02:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008d04:	b1db      	cbz	r3, 8008d3e <_strtod_l+0x906>
 8008d06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d08:	4213      	tst	r3, r2
 8008d0a:	d0ee      	beq.n	8008cea <_strtod_l+0x8b2>
 8008d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d0e:	4650      	mov	r0, sl
 8008d10:	4659      	mov	r1, fp
 8008d12:	9a08      	ldr	r2, [sp, #32]
 8008d14:	b1bb      	cbz	r3, 8008d46 <_strtod_l+0x90e>
 8008d16:	f7ff fb6d 	bl	80083f4 <sulp>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d22:	f7f7 fa2d 	bl	8000180 <__adddf3>
 8008d26:	4682      	mov	sl, r0
 8008d28:	468b      	mov	fp, r1
 8008d2a:	e7de      	b.n	8008cea <_strtod_l+0x8b2>
 8008d2c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008d30:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008d34:	f04f 3aff 	mov.w	sl, #4294967295
 8008d38:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008d3c:	e7d5      	b.n	8008cea <_strtod_l+0x8b2>
 8008d3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008d40:	ea13 0f0a 	tst.w	r3, sl
 8008d44:	e7e1      	b.n	8008d0a <_strtod_l+0x8d2>
 8008d46:	f7ff fb55 	bl	80083f4 <sulp>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d52:	f7f7 fa13 	bl	800017c <__aeabi_dsub>
 8008d56:	2200      	movs	r2, #0
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4682      	mov	sl, r0
 8008d5c:	468b      	mov	fp, r1
 8008d5e:	f7f7 fe2d 	bl	80009bc <__aeabi_dcmpeq>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d0c1      	beq.n	8008cea <_strtod_l+0x8b2>
 8008d66:	e619      	b.n	800899c <_strtod_l+0x564>
 8008d68:	4641      	mov	r1, r8
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f001 fc42 	bl	800a5f4 <__ratio>
 8008d70:	2200      	movs	r2, #0
 8008d72:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008d76:	4606      	mov	r6, r0
 8008d78:	460f      	mov	r7, r1
 8008d7a:	f7f7 fe33 	bl	80009e4 <__aeabi_dcmple>
 8008d7e:	2800      	cmp	r0, #0
 8008d80:	d06d      	beq.n	8008e5e <_strtod_l+0xa26>
 8008d82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d178      	bne.n	8008e7a <_strtod_l+0xa42>
 8008d88:	f1ba 0f00 	cmp.w	sl, #0
 8008d8c:	d156      	bne.n	8008e3c <_strtod_l+0xa04>
 8008d8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d158      	bne.n	8008e4a <_strtod_l+0xa12>
 8008d98:	2200      	movs	r2, #0
 8008d9a:	4630      	mov	r0, r6
 8008d9c:	4639      	mov	r1, r7
 8008d9e:	4b5e      	ldr	r3, [pc, #376]	@ (8008f18 <_strtod_l+0xae0>)
 8008da0:	f7f7 fe16 	bl	80009d0 <__aeabi_dcmplt>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d157      	bne.n	8008e58 <_strtod_l+0xa20>
 8008da8:	4630      	mov	r0, r6
 8008daa:	4639      	mov	r1, r7
 8008dac:	2200      	movs	r2, #0
 8008dae:	4b5b      	ldr	r3, [pc, #364]	@ (8008f1c <_strtod_l+0xae4>)
 8008db0:	f7f7 fb9c 	bl	80004ec <__aeabi_dmul>
 8008db4:	4606      	mov	r6, r0
 8008db6:	460f      	mov	r7, r1
 8008db8:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008dbc:	9606      	str	r6, [sp, #24]
 8008dbe:	9307      	str	r3, [sp, #28]
 8008dc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dc4:	4d51      	ldr	r5, [pc, #324]	@ (8008f0c <_strtod_l+0xad4>)
 8008dc6:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008dca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dcc:	401d      	ands	r5, r3
 8008dce:	4b54      	ldr	r3, [pc, #336]	@ (8008f20 <_strtod_l+0xae8>)
 8008dd0:	429d      	cmp	r5, r3
 8008dd2:	f040 80ab 	bne.w	8008f2c <_strtod_l+0xaf4>
 8008dd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dd8:	4650      	mov	r0, sl
 8008dda:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008dde:	4659      	mov	r1, fp
 8008de0:	f001 fb48 	bl	800a474 <__ulp>
 8008de4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008de8:	f7f7 fb80 	bl	80004ec <__aeabi_dmul>
 8008dec:	4652      	mov	r2, sl
 8008dee:	465b      	mov	r3, fp
 8008df0:	f7f7 f9c6 	bl	8000180 <__adddf3>
 8008df4:	460b      	mov	r3, r1
 8008df6:	4945      	ldr	r1, [pc, #276]	@ (8008f0c <_strtod_l+0xad4>)
 8008df8:	4a4a      	ldr	r2, [pc, #296]	@ (8008f24 <_strtod_l+0xaec>)
 8008dfa:	4019      	ands	r1, r3
 8008dfc:	4291      	cmp	r1, r2
 8008dfe:	4682      	mov	sl, r0
 8008e00:	d942      	bls.n	8008e88 <_strtod_l+0xa50>
 8008e02:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008e04:	4b43      	ldr	r3, [pc, #268]	@ (8008f14 <_strtod_l+0xadc>)
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d103      	bne.n	8008e12 <_strtod_l+0x9da>
 8008e0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	f43f ad32 	beq.w	8008876 <_strtod_l+0x43e>
 8008e12:	f04f 3aff 	mov.w	sl, #4294967295
 8008e16:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8008f14 <_strtod_l+0xadc>
 8008e1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e1c:	9805      	ldr	r0, [sp, #20]
 8008e1e:	f000 fffd 	bl	8009e1c <_Bfree>
 8008e22:	4649      	mov	r1, r9
 8008e24:	9805      	ldr	r0, [sp, #20]
 8008e26:	f000 fff9 	bl	8009e1c <_Bfree>
 8008e2a:	4641      	mov	r1, r8
 8008e2c:	9805      	ldr	r0, [sp, #20]
 8008e2e:	f000 fff5 	bl	8009e1c <_Bfree>
 8008e32:	4621      	mov	r1, r4
 8008e34:	9805      	ldr	r0, [sp, #20]
 8008e36:	f000 fff1 	bl	8009e1c <_Bfree>
 8008e3a:	e61c      	b.n	8008a76 <_strtod_l+0x63e>
 8008e3c:	f1ba 0f01 	cmp.w	sl, #1
 8008e40:	d103      	bne.n	8008e4a <_strtod_l+0xa12>
 8008e42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f43f ada9 	beq.w	800899c <_strtod_l+0x564>
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	4b36      	ldr	r3, [pc, #216]	@ (8008f28 <_strtod_l+0xaf0>)
 8008e4e:	2600      	movs	r6, #0
 8008e50:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e54:	4f30      	ldr	r7, [pc, #192]	@ (8008f18 <_strtod_l+0xae0>)
 8008e56:	e7b3      	b.n	8008dc0 <_strtod_l+0x988>
 8008e58:	2600      	movs	r6, #0
 8008e5a:	4f30      	ldr	r7, [pc, #192]	@ (8008f1c <_strtod_l+0xae4>)
 8008e5c:	e7ac      	b.n	8008db8 <_strtod_l+0x980>
 8008e5e:	4630      	mov	r0, r6
 8008e60:	4639      	mov	r1, r7
 8008e62:	4b2e      	ldr	r3, [pc, #184]	@ (8008f1c <_strtod_l+0xae4>)
 8008e64:	2200      	movs	r2, #0
 8008e66:	f7f7 fb41 	bl	80004ec <__aeabi_dmul>
 8008e6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d0a1      	beq.n	8008db8 <_strtod_l+0x980>
 8008e74:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008e78:	e7a2      	b.n	8008dc0 <_strtod_l+0x988>
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	4b26      	ldr	r3, [pc, #152]	@ (8008f18 <_strtod_l+0xae0>)
 8008e7e:	4616      	mov	r6, r2
 8008e80:	461f      	mov	r7, r3
 8008e82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e86:	e79b      	b.n	8008dc0 <_strtod_l+0x988>
 8008e88:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008e8c:	9b08      	ldr	r3, [sp, #32]
 8008e8e:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1c1      	bne.n	8008e1a <_strtod_l+0x9e2>
 8008e96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008e9a:	0d1b      	lsrs	r3, r3, #20
 8008e9c:	051b      	lsls	r3, r3, #20
 8008e9e:	429d      	cmp	r5, r3
 8008ea0:	d1bb      	bne.n	8008e1a <_strtod_l+0x9e2>
 8008ea2:	4630      	mov	r0, r6
 8008ea4:	4639      	mov	r1, r7
 8008ea6:	f7f8 f93b 	bl	8001120 <__aeabi_d2lz>
 8008eaa:	f7f7 faf1 	bl	8000490 <__aeabi_l2d>
 8008eae:	4602      	mov	r2, r0
 8008eb0:	460b      	mov	r3, r1
 8008eb2:	4630      	mov	r0, r6
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	f7f7 f961 	bl	800017c <__aeabi_dsub>
 8008eba:	460b      	mov	r3, r1
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008ec2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008ec6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ec8:	ea46 060a 	orr.w	r6, r6, sl
 8008ecc:	431e      	orrs	r6, r3
 8008ece:	d06a      	beq.n	8008fa6 <_strtod_l+0xb6e>
 8008ed0:	a309      	add	r3, pc, #36	@ (adr r3, 8008ef8 <_strtod_l+0xac0>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7f7 fd7b 	bl	80009d0 <__aeabi_dcmplt>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	f47f acd6 	bne.w	800888c <_strtod_l+0x454>
 8008ee0:	a307      	add	r3, pc, #28	@ (adr r3, 8008f00 <_strtod_l+0xac8>)
 8008ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008eea:	f7f7 fd8f 	bl	8000a0c <__aeabi_dcmpgt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d093      	beq.n	8008e1a <_strtod_l+0x9e2>
 8008ef2:	e4cb      	b.n	800888c <_strtod_l+0x454>
 8008ef4:	f3af 8000 	nop.w
 8008ef8:	94a03595 	.word	0x94a03595
 8008efc:	3fdfffff 	.word	0x3fdfffff
 8008f00:	35afe535 	.word	0x35afe535
 8008f04:	3fe00000 	.word	0x3fe00000
 8008f08:	39500000 	.word	0x39500000
 8008f0c:	7ff00000 	.word	0x7ff00000
 8008f10:	000fffff 	.word	0x000fffff
 8008f14:	7fefffff 	.word	0x7fefffff
 8008f18:	3ff00000 	.word	0x3ff00000
 8008f1c:	3fe00000 	.word	0x3fe00000
 8008f20:	7fe00000 	.word	0x7fe00000
 8008f24:	7c9fffff 	.word	0x7c9fffff
 8008f28:	bff00000 	.word	0xbff00000
 8008f2c:	9b08      	ldr	r3, [sp, #32]
 8008f2e:	b323      	cbz	r3, 8008f7a <_strtod_l+0xb42>
 8008f30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008f34:	d821      	bhi.n	8008f7a <_strtod_l+0xb42>
 8008f36:	a328      	add	r3, pc, #160	@ (adr r3, 8008fd8 <_strtod_l+0xba0>)
 8008f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	4639      	mov	r1, r7
 8008f40:	f7f7 fd50 	bl	80009e4 <__aeabi_dcmple>
 8008f44:	b1a0      	cbz	r0, 8008f70 <_strtod_l+0xb38>
 8008f46:	4639      	mov	r1, r7
 8008f48:	4630      	mov	r0, r6
 8008f4a:	f7f7 fd69 	bl	8000a20 <__aeabi_d2uiz>
 8008f4e:	2801      	cmp	r0, #1
 8008f50:	bf38      	it	cc
 8008f52:	2001      	movcc	r0, #1
 8008f54:	f7f7 fa50 	bl	80003f8 <__aeabi_ui2d>
 8008f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	460f      	mov	r7, r1
 8008f5e:	b9fb      	cbnz	r3, 8008fa0 <_strtod_l+0xb68>
 8008f60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f64:	9014      	str	r0, [sp, #80]	@ 0x50
 8008f66:	9315      	str	r3, [sp, #84]	@ 0x54
 8008f68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008f6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008f70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008f76:	1b5b      	subs	r3, r3, r5
 8008f78:	9311      	str	r3, [sp, #68]	@ 0x44
 8008f7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008f82:	f001 fa77 	bl	800a474 <__ulp>
 8008f86:	4602      	mov	r2, r0
 8008f88:	460b      	mov	r3, r1
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	f7f7 faad 	bl	80004ec <__aeabi_dmul>
 8008f92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008f96:	f7f7 f8f3 	bl	8000180 <__adddf3>
 8008f9a:	4682      	mov	sl, r0
 8008f9c:	468b      	mov	fp, r1
 8008f9e:	e775      	b.n	8008e8c <_strtod_l+0xa54>
 8008fa0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008fa4:	e7e0      	b.n	8008f68 <_strtod_l+0xb30>
 8008fa6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008fe0 <_strtod_l+0xba8>)
 8008fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fac:	f7f7 fd10 	bl	80009d0 <__aeabi_dcmplt>
 8008fb0:	e79d      	b.n	8008eee <_strtod_l+0xab6>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	930e      	str	r3, [sp, #56]	@ 0x38
 8008fb6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fb8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008fba:	6013      	str	r3, [r2, #0]
 8008fbc:	f7ff ba79 	b.w	80084b2 <_strtod_l+0x7a>
 8008fc0:	2a65      	cmp	r2, #101	@ 0x65
 8008fc2:	f43f ab72 	beq.w	80086aa <_strtod_l+0x272>
 8008fc6:	2a45      	cmp	r2, #69	@ 0x45
 8008fc8:	f43f ab6f 	beq.w	80086aa <_strtod_l+0x272>
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f7ff bbaa 	b.w	8008726 <_strtod_l+0x2ee>
 8008fd2:	bf00      	nop
 8008fd4:	f3af 8000 	nop.w
 8008fd8:	ffc00000 	.word	0xffc00000
 8008fdc:	41dfffff 	.word	0x41dfffff
 8008fe0:	94a03595 	.word	0x94a03595
 8008fe4:	3fcfffff 	.word	0x3fcfffff

08008fe8 <strtod>:
 8008fe8:	460a      	mov	r2, r1
 8008fea:	4601      	mov	r1, r0
 8008fec:	4802      	ldr	r0, [pc, #8]	@ (8008ff8 <strtod+0x10>)
 8008fee:	4b03      	ldr	r3, [pc, #12]	@ (8008ffc <strtod+0x14>)
 8008ff0:	6800      	ldr	r0, [r0, #0]
 8008ff2:	f7ff ba21 	b.w	8008438 <_strtod_l>
 8008ff6:	bf00      	nop
 8008ff8:	200002f4 	.word	0x200002f4
 8008ffc:	20000188 	.word	0x20000188

08009000 <_strtol_l.isra.0>:
 8009000:	2b24      	cmp	r3, #36	@ 0x24
 8009002:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009006:	4686      	mov	lr, r0
 8009008:	4690      	mov	r8, r2
 800900a:	d801      	bhi.n	8009010 <_strtol_l.isra.0+0x10>
 800900c:	2b01      	cmp	r3, #1
 800900e:	d106      	bne.n	800901e <_strtol_l.isra.0+0x1e>
 8009010:	f000 fa40 	bl	8009494 <__errno>
 8009014:	2316      	movs	r3, #22
 8009016:	6003      	str	r3, [r0, #0]
 8009018:	2000      	movs	r0, #0
 800901a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800901e:	460d      	mov	r5, r1
 8009020:	4833      	ldr	r0, [pc, #204]	@ (80090f0 <_strtol_l.isra.0+0xf0>)
 8009022:	462a      	mov	r2, r5
 8009024:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009028:	5d06      	ldrb	r6, [r0, r4]
 800902a:	f016 0608 	ands.w	r6, r6, #8
 800902e:	d1f8      	bne.n	8009022 <_strtol_l.isra.0+0x22>
 8009030:	2c2d      	cmp	r4, #45	@ 0x2d
 8009032:	d110      	bne.n	8009056 <_strtol_l.isra.0+0x56>
 8009034:	2601      	movs	r6, #1
 8009036:	782c      	ldrb	r4, [r5, #0]
 8009038:	1c95      	adds	r5, r2, #2
 800903a:	f033 0210 	bics.w	r2, r3, #16
 800903e:	d115      	bne.n	800906c <_strtol_l.isra.0+0x6c>
 8009040:	2c30      	cmp	r4, #48	@ 0x30
 8009042:	d10d      	bne.n	8009060 <_strtol_l.isra.0+0x60>
 8009044:	782a      	ldrb	r2, [r5, #0]
 8009046:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800904a:	2a58      	cmp	r2, #88	@ 0x58
 800904c:	d108      	bne.n	8009060 <_strtol_l.isra.0+0x60>
 800904e:	786c      	ldrb	r4, [r5, #1]
 8009050:	3502      	adds	r5, #2
 8009052:	2310      	movs	r3, #16
 8009054:	e00a      	b.n	800906c <_strtol_l.isra.0+0x6c>
 8009056:	2c2b      	cmp	r4, #43	@ 0x2b
 8009058:	bf04      	itt	eq
 800905a:	782c      	ldrbeq	r4, [r5, #0]
 800905c:	1c95      	addeq	r5, r2, #2
 800905e:	e7ec      	b.n	800903a <_strtol_l.isra.0+0x3a>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1f6      	bne.n	8009052 <_strtol_l.isra.0+0x52>
 8009064:	2c30      	cmp	r4, #48	@ 0x30
 8009066:	bf14      	ite	ne
 8009068:	230a      	movne	r3, #10
 800906a:	2308      	moveq	r3, #8
 800906c:	2200      	movs	r2, #0
 800906e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009072:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009076:	fbbc f9f3 	udiv	r9, ip, r3
 800907a:	4610      	mov	r0, r2
 800907c:	fb03 ca19 	mls	sl, r3, r9, ip
 8009080:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009084:	2f09      	cmp	r7, #9
 8009086:	d80f      	bhi.n	80090a8 <_strtol_l.isra.0+0xa8>
 8009088:	463c      	mov	r4, r7
 800908a:	42a3      	cmp	r3, r4
 800908c:	dd1b      	ble.n	80090c6 <_strtol_l.isra.0+0xc6>
 800908e:	1c57      	adds	r7, r2, #1
 8009090:	d007      	beq.n	80090a2 <_strtol_l.isra.0+0xa2>
 8009092:	4581      	cmp	r9, r0
 8009094:	d314      	bcc.n	80090c0 <_strtol_l.isra.0+0xc0>
 8009096:	d101      	bne.n	800909c <_strtol_l.isra.0+0x9c>
 8009098:	45a2      	cmp	sl, r4
 800909a:	db11      	blt.n	80090c0 <_strtol_l.isra.0+0xc0>
 800909c:	2201      	movs	r2, #1
 800909e:	fb00 4003 	mla	r0, r0, r3, r4
 80090a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090a6:	e7eb      	b.n	8009080 <_strtol_l.isra.0+0x80>
 80090a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80090ac:	2f19      	cmp	r7, #25
 80090ae:	d801      	bhi.n	80090b4 <_strtol_l.isra.0+0xb4>
 80090b0:	3c37      	subs	r4, #55	@ 0x37
 80090b2:	e7ea      	b.n	800908a <_strtol_l.isra.0+0x8a>
 80090b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80090b8:	2f19      	cmp	r7, #25
 80090ba:	d804      	bhi.n	80090c6 <_strtol_l.isra.0+0xc6>
 80090bc:	3c57      	subs	r4, #87	@ 0x57
 80090be:	e7e4      	b.n	800908a <_strtol_l.isra.0+0x8a>
 80090c0:	f04f 32ff 	mov.w	r2, #4294967295
 80090c4:	e7ed      	b.n	80090a2 <_strtol_l.isra.0+0xa2>
 80090c6:	1c53      	adds	r3, r2, #1
 80090c8:	d108      	bne.n	80090dc <_strtol_l.isra.0+0xdc>
 80090ca:	2322      	movs	r3, #34	@ 0x22
 80090cc:	4660      	mov	r0, ip
 80090ce:	f8ce 3000 	str.w	r3, [lr]
 80090d2:	f1b8 0f00 	cmp.w	r8, #0
 80090d6:	d0a0      	beq.n	800901a <_strtol_l.isra.0+0x1a>
 80090d8:	1e69      	subs	r1, r5, #1
 80090da:	e006      	b.n	80090ea <_strtol_l.isra.0+0xea>
 80090dc:	b106      	cbz	r6, 80090e0 <_strtol_l.isra.0+0xe0>
 80090de:	4240      	negs	r0, r0
 80090e0:	f1b8 0f00 	cmp.w	r8, #0
 80090e4:	d099      	beq.n	800901a <_strtol_l.isra.0+0x1a>
 80090e6:	2a00      	cmp	r2, #0
 80090e8:	d1f6      	bne.n	80090d8 <_strtol_l.isra.0+0xd8>
 80090ea:	f8c8 1000 	str.w	r1, [r8]
 80090ee:	e794      	b.n	800901a <_strtol_l.isra.0+0x1a>
 80090f0:	0800c811 	.word	0x0800c811

080090f4 <strtol>:
 80090f4:	4613      	mov	r3, r2
 80090f6:	460a      	mov	r2, r1
 80090f8:	4601      	mov	r1, r0
 80090fa:	4802      	ldr	r0, [pc, #8]	@ (8009104 <strtol+0x10>)
 80090fc:	6800      	ldr	r0, [r0, #0]
 80090fe:	f7ff bf7f 	b.w	8009000 <_strtol_l.isra.0>
 8009102:	bf00      	nop
 8009104:	200002f4 	.word	0x200002f4

08009108 <std>:
 8009108:	2300      	movs	r3, #0
 800910a:	b510      	push	{r4, lr}
 800910c:	4604      	mov	r4, r0
 800910e:	e9c0 3300 	strd	r3, r3, [r0]
 8009112:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009116:	6083      	str	r3, [r0, #8]
 8009118:	8181      	strh	r1, [r0, #12]
 800911a:	6643      	str	r3, [r0, #100]	@ 0x64
 800911c:	81c2      	strh	r2, [r0, #14]
 800911e:	6183      	str	r3, [r0, #24]
 8009120:	4619      	mov	r1, r3
 8009122:	2208      	movs	r2, #8
 8009124:	305c      	adds	r0, #92	@ 0x5c
 8009126:	f000 f92a 	bl	800937e <memset>
 800912a:	4b0d      	ldr	r3, [pc, #52]	@ (8009160 <std+0x58>)
 800912c:	6224      	str	r4, [r4, #32]
 800912e:	6263      	str	r3, [r4, #36]	@ 0x24
 8009130:	4b0c      	ldr	r3, [pc, #48]	@ (8009164 <std+0x5c>)
 8009132:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009134:	4b0c      	ldr	r3, [pc, #48]	@ (8009168 <std+0x60>)
 8009136:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009138:	4b0c      	ldr	r3, [pc, #48]	@ (800916c <std+0x64>)
 800913a:	6323      	str	r3, [r4, #48]	@ 0x30
 800913c:	4b0c      	ldr	r3, [pc, #48]	@ (8009170 <std+0x68>)
 800913e:	429c      	cmp	r4, r3
 8009140:	d006      	beq.n	8009150 <std+0x48>
 8009142:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009146:	4294      	cmp	r4, r2
 8009148:	d002      	beq.n	8009150 <std+0x48>
 800914a:	33d0      	adds	r3, #208	@ 0xd0
 800914c:	429c      	cmp	r4, r3
 800914e:	d105      	bne.n	800915c <std+0x54>
 8009150:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009158:	f000 b9c6 	b.w	80094e8 <__retarget_lock_init_recursive>
 800915c:	bd10      	pop	{r4, pc}
 800915e:	bf00      	nop
 8009160:	080092f9 	.word	0x080092f9
 8009164:	0800931b 	.word	0x0800931b
 8009168:	08009353 	.word	0x08009353
 800916c:	08009377 	.word	0x08009377
 8009170:	20001fd4 	.word	0x20001fd4

08009174 <stdio_exit_handler>:
 8009174:	4a02      	ldr	r2, [pc, #8]	@ (8009180 <stdio_exit_handler+0xc>)
 8009176:	4903      	ldr	r1, [pc, #12]	@ (8009184 <stdio_exit_handler+0x10>)
 8009178:	4803      	ldr	r0, [pc, #12]	@ (8009188 <stdio_exit_handler+0x14>)
 800917a:	f000 b869 	b.w	8009250 <_fwalk_sglue>
 800917e:	bf00      	nop
 8009180:	2000017c 	.word	0x2000017c
 8009184:	0800adc5 	.word	0x0800adc5
 8009188:	200002f8 	.word	0x200002f8

0800918c <cleanup_stdio>:
 800918c:	6841      	ldr	r1, [r0, #4]
 800918e:	4b0c      	ldr	r3, [pc, #48]	@ (80091c0 <cleanup_stdio+0x34>)
 8009190:	b510      	push	{r4, lr}
 8009192:	4299      	cmp	r1, r3
 8009194:	4604      	mov	r4, r0
 8009196:	d001      	beq.n	800919c <cleanup_stdio+0x10>
 8009198:	f001 fe14 	bl	800adc4 <_fflush_r>
 800919c:	68a1      	ldr	r1, [r4, #8]
 800919e:	4b09      	ldr	r3, [pc, #36]	@ (80091c4 <cleanup_stdio+0x38>)
 80091a0:	4299      	cmp	r1, r3
 80091a2:	d002      	beq.n	80091aa <cleanup_stdio+0x1e>
 80091a4:	4620      	mov	r0, r4
 80091a6:	f001 fe0d 	bl	800adc4 <_fflush_r>
 80091aa:	68e1      	ldr	r1, [r4, #12]
 80091ac:	4b06      	ldr	r3, [pc, #24]	@ (80091c8 <cleanup_stdio+0x3c>)
 80091ae:	4299      	cmp	r1, r3
 80091b0:	d004      	beq.n	80091bc <cleanup_stdio+0x30>
 80091b2:	4620      	mov	r0, r4
 80091b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091b8:	f001 be04 	b.w	800adc4 <_fflush_r>
 80091bc:	bd10      	pop	{r4, pc}
 80091be:	bf00      	nop
 80091c0:	20001fd4 	.word	0x20001fd4
 80091c4:	2000203c 	.word	0x2000203c
 80091c8:	200020a4 	.word	0x200020a4

080091cc <global_stdio_init.part.0>:
 80091cc:	b510      	push	{r4, lr}
 80091ce:	4b0b      	ldr	r3, [pc, #44]	@ (80091fc <global_stdio_init.part.0+0x30>)
 80091d0:	4c0b      	ldr	r4, [pc, #44]	@ (8009200 <global_stdio_init.part.0+0x34>)
 80091d2:	4a0c      	ldr	r2, [pc, #48]	@ (8009204 <global_stdio_init.part.0+0x38>)
 80091d4:	4620      	mov	r0, r4
 80091d6:	601a      	str	r2, [r3, #0]
 80091d8:	2104      	movs	r1, #4
 80091da:	2200      	movs	r2, #0
 80091dc:	f7ff ff94 	bl	8009108 <std>
 80091e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80091e4:	2201      	movs	r2, #1
 80091e6:	2109      	movs	r1, #9
 80091e8:	f7ff ff8e 	bl	8009108 <std>
 80091ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80091f0:	2202      	movs	r2, #2
 80091f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091f6:	2112      	movs	r1, #18
 80091f8:	f7ff bf86 	b.w	8009108 <std>
 80091fc:	2000210c 	.word	0x2000210c
 8009200:	20001fd4 	.word	0x20001fd4
 8009204:	08009175 	.word	0x08009175

08009208 <__sfp_lock_acquire>:
 8009208:	4801      	ldr	r0, [pc, #4]	@ (8009210 <__sfp_lock_acquire+0x8>)
 800920a:	f000 b96e 	b.w	80094ea <__retarget_lock_acquire_recursive>
 800920e:	bf00      	nop
 8009210:	20002115 	.word	0x20002115

08009214 <__sfp_lock_release>:
 8009214:	4801      	ldr	r0, [pc, #4]	@ (800921c <__sfp_lock_release+0x8>)
 8009216:	f000 b969 	b.w	80094ec <__retarget_lock_release_recursive>
 800921a:	bf00      	nop
 800921c:	20002115 	.word	0x20002115

08009220 <__sinit>:
 8009220:	b510      	push	{r4, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	f7ff fff0 	bl	8009208 <__sfp_lock_acquire>
 8009228:	6a23      	ldr	r3, [r4, #32]
 800922a:	b11b      	cbz	r3, 8009234 <__sinit+0x14>
 800922c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009230:	f7ff bff0 	b.w	8009214 <__sfp_lock_release>
 8009234:	4b04      	ldr	r3, [pc, #16]	@ (8009248 <__sinit+0x28>)
 8009236:	6223      	str	r3, [r4, #32]
 8009238:	4b04      	ldr	r3, [pc, #16]	@ (800924c <__sinit+0x2c>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f5      	bne.n	800922c <__sinit+0xc>
 8009240:	f7ff ffc4 	bl	80091cc <global_stdio_init.part.0>
 8009244:	e7f2      	b.n	800922c <__sinit+0xc>
 8009246:	bf00      	nop
 8009248:	0800918d 	.word	0x0800918d
 800924c:	2000210c 	.word	0x2000210c

08009250 <_fwalk_sglue>:
 8009250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009254:	4607      	mov	r7, r0
 8009256:	4688      	mov	r8, r1
 8009258:	4614      	mov	r4, r2
 800925a:	2600      	movs	r6, #0
 800925c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009260:	f1b9 0901 	subs.w	r9, r9, #1
 8009264:	d505      	bpl.n	8009272 <_fwalk_sglue+0x22>
 8009266:	6824      	ldr	r4, [r4, #0]
 8009268:	2c00      	cmp	r4, #0
 800926a:	d1f7      	bne.n	800925c <_fwalk_sglue+0xc>
 800926c:	4630      	mov	r0, r6
 800926e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009272:	89ab      	ldrh	r3, [r5, #12]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d907      	bls.n	8009288 <_fwalk_sglue+0x38>
 8009278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800927c:	3301      	adds	r3, #1
 800927e:	d003      	beq.n	8009288 <_fwalk_sglue+0x38>
 8009280:	4629      	mov	r1, r5
 8009282:	4638      	mov	r0, r7
 8009284:	47c0      	blx	r8
 8009286:	4306      	orrs	r6, r0
 8009288:	3568      	adds	r5, #104	@ 0x68
 800928a:	e7e9      	b.n	8009260 <_fwalk_sglue+0x10>

0800928c <sniprintf>:
 800928c:	b40c      	push	{r2, r3}
 800928e:	b530      	push	{r4, r5, lr}
 8009290:	4b18      	ldr	r3, [pc, #96]	@ (80092f4 <sniprintf+0x68>)
 8009292:	1e0c      	subs	r4, r1, #0
 8009294:	681d      	ldr	r5, [r3, #0]
 8009296:	b09d      	sub	sp, #116	@ 0x74
 8009298:	da08      	bge.n	80092ac <sniprintf+0x20>
 800929a:	238b      	movs	r3, #139	@ 0x8b
 800929c:	f04f 30ff 	mov.w	r0, #4294967295
 80092a0:	602b      	str	r3, [r5, #0]
 80092a2:	b01d      	add	sp, #116	@ 0x74
 80092a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80092a8:	b002      	add	sp, #8
 80092aa:	4770      	bx	lr
 80092ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80092b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80092b4:	f04f 0300 	mov.w	r3, #0
 80092b8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80092ba:	bf0c      	ite	eq
 80092bc:	4623      	moveq	r3, r4
 80092be:	f104 33ff 	addne.w	r3, r4, #4294967295
 80092c2:	9304      	str	r3, [sp, #16]
 80092c4:	9307      	str	r3, [sp, #28]
 80092c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80092ca:	9002      	str	r0, [sp, #8]
 80092cc:	9006      	str	r0, [sp, #24]
 80092ce:	f8ad 3016 	strh.w	r3, [sp, #22]
 80092d2:	4628      	mov	r0, r5
 80092d4:	ab21      	add	r3, sp, #132	@ 0x84
 80092d6:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80092d8:	a902      	add	r1, sp, #8
 80092da:	9301      	str	r3, [sp, #4]
 80092dc:	f001 fa66 	bl	800a7ac <_svfiprintf_r>
 80092e0:	1c43      	adds	r3, r0, #1
 80092e2:	bfbc      	itt	lt
 80092e4:	238b      	movlt	r3, #139	@ 0x8b
 80092e6:	602b      	strlt	r3, [r5, #0]
 80092e8:	2c00      	cmp	r4, #0
 80092ea:	d0da      	beq.n	80092a2 <sniprintf+0x16>
 80092ec:	2200      	movs	r2, #0
 80092ee:	9b02      	ldr	r3, [sp, #8]
 80092f0:	701a      	strb	r2, [r3, #0]
 80092f2:	e7d6      	b.n	80092a2 <sniprintf+0x16>
 80092f4:	200002f4 	.word	0x200002f4

080092f8 <__sread>:
 80092f8:	b510      	push	{r4, lr}
 80092fa:	460c      	mov	r4, r1
 80092fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009300:	f000 f8a4 	bl	800944c <_read_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	bfab      	itete	ge
 8009308:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800930a:	89a3      	ldrhlt	r3, [r4, #12]
 800930c:	181b      	addge	r3, r3, r0
 800930e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009312:	bfac      	ite	ge
 8009314:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009316:	81a3      	strhlt	r3, [r4, #12]
 8009318:	bd10      	pop	{r4, pc}

0800931a <__swrite>:
 800931a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800931e:	461f      	mov	r7, r3
 8009320:	898b      	ldrh	r3, [r1, #12]
 8009322:	4605      	mov	r5, r0
 8009324:	05db      	lsls	r3, r3, #23
 8009326:	460c      	mov	r4, r1
 8009328:	4616      	mov	r6, r2
 800932a:	d505      	bpl.n	8009338 <__swrite+0x1e>
 800932c:	2302      	movs	r3, #2
 800932e:	2200      	movs	r2, #0
 8009330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009334:	f000 f878 	bl	8009428 <_lseek_r>
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	4632      	mov	r2, r6
 800933c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009340:	81a3      	strh	r3, [r4, #12]
 8009342:	4628      	mov	r0, r5
 8009344:	463b      	mov	r3, r7
 8009346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800934a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800934e:	f000 b88f 	b.w	8009470 <_write_r>

08009352 <__sseek>:
 8009352:	b510      	push	{r4, lr}
 8009354:	460c      	mov	r4, r1
 8009356:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800935a:	f000 f865 	bl	8009428 <_lseek_r>
 800935e:	1c43      	adds	r3, r0, #1
 8009360:	89a3      	ldrh	r3, [r4, #12]
 8009362:	bf15      	itete	ne
 8009364:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009366:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800936a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800936e:	81a3      	strheq	r3, [r4, #12]
 8009370:	bf18      	it	ne
 8009372:	81a3      	strhne	r3, [r4, #12]
 8009374:	bd10      	pop	{r4, pc}

08009376 <__sclose>:
 8009376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800937a:	f000 b845 	b.w	8009408 <_close_r>

0800937e <memset>:
 800937e:	4603      	mov	r3, r0
 8009380:	4402      	add	r2, r0
 8009382:	4293      	cmp	r3, r2
 8009384:	d100      	bne.n	8009388 <memset+0xa>
 8009386:	4770      	bx	lr
 8009388:	f803 1b01 	strb.w	r1, [r3], #1
 800938c:	e7f9      	b.n	8009382 <memset+0x4>

0800938e <strncmp>:
 800938e:	b510      	push	{r4, lr}
 8009390:	b16a      	cbz	r2, 80093ae <strncmp+0x20>
 8009392:	3901      	subs	r1, #1
 8009394:	1884      	adds	r4, r0, r2
 8009396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800939a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800939e:	429a      	cmp	r2, r3
 80093a0:	d103      	bne.n	80093aa <strncmp+0x1c>
 80093a2:	42a0      	cmp	r0, r4
 80093a4:	d001      	beq.n	80093aa <strncmp+0x1c>
 80093a6:	2a00      	cmp	r2, #0
 80093a8:	d1f5      	bne.n	8009396 <strncmp+0x8>
 80093aa:	1ad0      	subs	r0, r2, r3
 80093ac:	bd10      	pop	{r4, pc}
 80093ae:	4610      	mov	r0, r2
 80093b0:	e7fc      	b.n	80093ac <strncmp+0x1e>

080093b2 <__strtok_r>:
 80093b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b4:	4604      	mov	r4, r0
 80093b6:	b908      	cbnz	r0, 80093bc <__strtok_r+0xa>
 80093b8:	6814      	ldr	r4, [r2, #0]
 80093ba:	b144      	cbz	r4, 80093ce <__strtok_r+0x1c>
 80093bc:	460f      	mov	r7, r1
 80093be:	4620      	mov	r0, r4
 80093c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80093c4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80093c8:	b91e      	cbnz	r6, 80093d2 <__strtok_r+0x20>
 80093ca:	b965      	cbnz	r5, 80093e6 <__strtok_r+0x34>
 80093cc:	6015      	str	r5, [r2, #0]
 80093ce:	2000      	movs	r0, #0
 80093d0:	e005      	b.n	80093de <__strtok_r+0x2c>
 80093d2:	42b5      	cmp	r5, r6
 80093d4:	d1f6      	bne.n	80093c4 <__strtok_r+0x12>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1f0      	bne.n	80093bc <__strtok_r+0xa>
 80093da:	6014      	str	r4, [r2, #0]
 80093dc:	7003      	strb	r3, [r0, #0]
 80093de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093e0:	461c      	mov	r4, r3
 80093e2:	e00c      	b.n	80093fe <__strtok_r+0x4c>
 80093e4:	b91d      	cbnz	r5, 80093ee <__strtok_r+0x3c>
 80093e6:	460e      	mov	r6, r1
 80093e8:	4627      	mov	r7, r4
 80093ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 80093f2:	42ab      	cmp	r3, r5
 80093f4:	d1f6      	bne.n	80093e4 <__strtok_r+0x32>
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d0f2      	beq.n	80093e0 <__strtok_r+0x2e>
 80093fa:	2300      	movs	r3, #0
 80093fc:	703b      	strb	r3, [r7, #0]
 80093fe:	6014      	str	r4, [r2, #0]
 8009400:	e7ed      	b.n	80093de <__strtok_r+0x2c>

08009402 <strtok_r>:
 8009402:	2301      	movs	r3, #1
 8009404:	f7ff bfd5 	b.w	80093b2 <__strtok_r>

08009408 <_close_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	2300      	movs	r3, #0
 800940c:	4d05      	ldr	r5, [pc, #20]	@ (8009424 <_close_r+0x1c>)
 800940e:	4604      	mov	r4, r0
 8009410:	4608      	mov	r0, r1
 8009412:	602b      	str	r3, [r5, #0]
 8009414:	f7f8 ff00 	bl	8002218 <_close>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_close_r+0x1a>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_close_r+0x1a>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20002110 	.word	0x20002110

08009428 <_lseek_r>:
 8009428:	b538      	push	{r3, r4, r5, lr}
 800942a:	4604      	mov	r4, r0
 800942c:	4608      	mov	r0, r1
 800942e:	4611      	mov	r1, r2
 8009430:	2200      	movs	r2, #0
 8009432:	4d05      	ldr	r5, [pc, #20]	@ (8009448 <_lseek_r+0x20>)
 8009434:	602a      	str	r2, [r5, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f7f8 fef8 	bl	800222c <_lseek>
 800943c:	1c43      	adds	r3, r0, #1
 800943e:	d102      	bne.n	8009446 <_lseek_r+0x1e>
 8009440:	682b      	ldr	r3, [r5, #0]
 8009442:	b103      	cbz	r3, 8009446 <_lseek_r+0x1e>
 8009444:	6023      	str	r3, [r4, #0]
 8009446:	bd38      	pop	{r3, r4, r5, pc}
 8009448:	20002110 	.word	0x20002110

0800944c <_read_r>:
 800944c:	b538      	push	{r3, r4, r5, lr}
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	4611      	mov	r1, r2
 8009454:	2200      	movs	r2, #0
 8009456:	4d05      	ldr	r5, [pc, #20]	@ (800946c <_read_r+0x20>)
 8009458:	602a      	str	r2, [r5, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	f7f8 fec0 	bl	80021e0 <_read>
 8009460:	1c43      	adds	r3, r0, #1
 8009462:	d102      	bne.n	800946a <_read_r+0x1e>
 8009464:	682b      	ldr	r3, [r5, #0]
 8009466:	b103      	cbz	r3, 800946a <_read_r+0x1e>
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	20002110 	.word	0x20002110

08009470 <_write_r>:
 8009470:	b538      	push	{r3, r4, r5, lr}
 8009472:	4604      	mov	r4, r0
 8009474:	4608      	mov	r0, r1
 8009476:	4611      	mov	r1, r2
 8009478:	2200      	movs	r2, #0
 800947a:	4d05      	ldr	r5, [pc, #20]	@ (8009490 <_write_r+0x20>)
 800947c:	602a      	str	r2, [r5, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	f7f8 febc 	bl	80021fc <_write>
 8009484:	1c43      	adds	r3, r0, #1
 8009486:	d102      	bne.n	800948e <_write_r+0x1e>
 8009488:	682b      	ldr	r3, [r5, #0]
 800948a:	b103      	cbz	r3, 800948e <_write_r+0x1e>
 800948c:	6023      	str	r3, [r4, #0]
 800948e:	bd38      	pop	{r3, r4, r5, pc}
 8009490:	20002110 	.word	0x20002110

08009494 <__errno>:
 8009494:	4b01      	ldr	r3, [pc, #4]	@ (800949c <__errno+0x8>)
 8009496:	6818      	ldr	r0, [r3, #0]
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	200002f4 	.word	0x200002f4

080094a0 <__libc_init_array>:
 80094a0:	b570      	push	{r4, r5, r6, lr}
 80094a2:	2600      	movs	r6, #0
 80094a4:	4d0c      	ldr	r5, [pc, #48]	@ (80094d8 <__libc_init_array+0x38>)
 80094a6:	4c0d      	ldr	r4, [pc, #52]	@ (80094dc <__libc_init_array+0x3c>)
 80094a8:	1b64      	subs	r4, r4, r5
 80094aa:	10a4      	asrs	r4, r4, #2
 80094ac:	42a6      	cmp	r6, r4
 80094ae:	d109      	bne.n	80094c4 <__libc_init_array+0x24>
 80094b0:	f003 f82a 	bl	800c508 <_init>
 80094b4:	2600      	movs	r6, #0
 80094b6:	4d0a      	ldr	r5, [pc, #40]	@ (80094e0 <__libc_init_array+0x40>)
 80094b8:	4c0a      	ldr	r4, [pc, #40]	@ (80094e4 <__libc_init_array+0x44>)
 80094ba:	1b64      	subs	r4, r4, r5
 80094bc:	10a4      	asrs	r4, r4, #2
 80094be:	42a6      	cmp	r6, r4
 80094c0:	d105      	bne.n	80094ce <__libc_init_array+0x2e>
 80094c2:	bd70      	pop	{r4, r5, r6, pc}
 80094c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c8:	4798      	blx	r3
 80094ca:	3601      	adds	r6, #1
 80094cc:	e7ee      	b.n	80094ac <__libc_init_array+0xc>
 80094ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d2:	4798      	blx	r3
 80094d4:	3601      	adds	r6, #1
 80094d6:	e7f2      	b.n	80094be <__libc_init_array+0x1e>
 80094d8:	0800ce28 	.word	0x0800ce28
 80094dc:	0800ce28 	.word	0x0800ce28
 80094e0:	0800ce28 	.word	0x0800ce28
 80094e4:	0800ce2c 	.word	0x0800ce2c

080094e8 <__retarget_lock_init_recursive>:
 80094e8:	4770      	bx	lr

080094ea <__retarget_lock_acquire_recursive>:
 80094ea:	4770      	bx	lr

080094ec <__retarget_lock_release_recursive>:
 80094ec:	4770      	bx	lr

080094ee <memcpy>:
 80094ee:	440a      	add	r2, r1
 80094f0:	4291      	cmp	r1, r2
 80094f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80094f6:	d100      	bne.n	80094fa <memcpy+0xc>
 80094f8:	4770      	bx	lr
 80094fa:	b510      	push	{r4, lr}
 80094fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009500:	4291      	cmp	r1, r2
 8009502:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009506:	d1f9      	bne.n	80094fc <memcpy+0xe>
 8009508:	bd10      	pop	{r4, pc}
	...

0800950c <nan>:
 800950c:	2000      	movs	r0, #0
 800950e:	4901      	ldr	r1, [pc, #4]	@ (8009514 <nan+0x8>)
 8009510:	4770      	bx	lr
 8009512:	bf00      	nop
 8009514:	7ff80000 	.word	0x7ff80000

08009518 <_free_r>:
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	4605      	mov	r5, r0
 800951c:	2900      	cmp	r1, #0
 800951e:	d040      	beq.n	80095a2 <_free_r+0x8a>
 8009520:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009524:	1f0c      	subs	r4, r1, #4
 8009526:	2b00      	cmp	r3, #0
 8009528:	bfb8      	it	lt
 800952a:	18e4      	addlt	r4, r4, r3
 800952c:	f000 fc2a 	bl	8009d84 <__malloc_lock>
 8009530:	4a1c      	ldr	r2, [pc, #112]	@ (80095a4 <_free_r+0x8c>)
 8009532:	6813      	ldr	r3, [r2, #0]
 8009534:	b933      	cbnz	r3, 8009544 <_free_r+0x2c>
 8009536:	6063      	str	r3, [r4, #4]
 8009538:	6014      	str	r4, [r2, #0]
 800953a:	4628      	mov	r0, r5
 800953c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009540:	f000 bc26 	b.w	8009d90 <__malloc_unlock>
 8009544:	42a3      	cmp	r3, r4
 8009546:	d908      	bls.n	800955a <_free_r+0x42>
 8009548:	6820      	ldr	r0, [r4, #0]
 800954a:	1821      	adds	r1, r4, r0
 800954c:	428b      	cmp	r3, r1
 800954e:	bf01      	itttt	eq
 8009550:	6819      	ldreq	r1, [r3, #0]
 8009552:	685b      	ldreq	r3, [r3, #4]
 8009554:	1809      	addeq	r1, r1, r0
 8009556:	6021      	streq	r1, [r4, #0]
 8009558:	e7ed      	b.n	8009536 <_free_r+0x1e>
 800955a:	461a      	mov	r2, r3
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	b10b      	cbz	r3, 8009564 <_free_r+0x4c>
 8009560:	42a3      	cmp	r3, r4
 8009562:	d9fa      	bls.n	800955a <_free_r+0x42>
 8009564:	6811      	ldr	r1, [r2, #0]
 8009566:	1850      	adds	r0, r2, r1
 8009568:	42a0      	cmp	r0, r4
 800956a:	d10b      	bne.n	8009584 <_free_r+0x6c>
 800956c:	6820      	ldr	r0, [r4, #0]
 800956e:	4401      	add	r1, r0
 8009570:	1850      	adds	r0, r2, r1
 8009572:	4283      	cmp	r3, r0
 8009574:	6011      	str	r1, [r2, #0]
 8009576:	d1e0      	bne.n	800953a <_free_r+0x22>
 8009578:	6818      	ldr	r0, [r3, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	4408      	add	r0, r1
 800957e:	6010      	str	r0, [r2, #0]
 8009580:	6053      	str	r3, [r2, #4]
 8009582:	e7da      	b.n	800953a <_free_r+0x22>
 8009584:	d902      	bls.n	800958c <_free_r+0x74>
 8009586:	230c      	movs	r3, #12
 8009588:	602b      	str	r3, [r5, #0]
 800958a:	e7d6      	b.n	800953a <_free_r+0x22>
 800958c:	6820      	ldr	r0, [r4, #0]
 800958e:	1821      	adds	r1, r4, r0
 8009590:	428b      	cmp	r3, r1
 8009592:	bf01      	itttt	eq
 8009594:	6819      	ldreq	r1, [r3, #0]
 8009596:	685b      	ldreq	r3, [r3, #4]
 8009598:	1809      	addeq	r1, r1, r0
 800959a:	6021      	streq	r1, [r4, #0]
 800959c:	6063      	str	r3, [r4, #4]
 800959e:	6054      	str	r4, [r2, #4]
 80095a0:	e7cb      	b.n	800953a <_free_r+0x22>
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	2000211c 	.word	0x2000211c

080095a8 <rshift>:
 80095a8:	6903      	ldr	r3, [r0, #16]
 80095aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095b2:	f100 0414 	add.w	r4, r0, #20
 80095b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095ba:	dd46      	ble.n	800964a <rshift+0xa2>
 80095bc:	f011 011f 	ands.w	r1, r1, #31
 80095c0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095c4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095c8:	d10c      	bne.n	80095e4 <rshift+0x3c>
 80095ca:	4629      	mov	r1, r5
 80095cc:	f100 0710 	add.w	r7, r0, #16
 80095d0:	42b1      	cmp	r1, r6
 80095d2:	d335      	bcc.n	8009640 <rshift+0x98>
 80095d4:	1a9b      	subs	r3, r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	1eea      	subs	r2, r5, #3
 80095da:	4296      	cmp	r6, r2
 80095dc:	bf38      	it	cc
 80095de:	2300      	movcc	r3, #0
 80095e0:	4423      	add	r3, r4
 80095e2:	e015      	b.n	8009610 <rshift+0x68>
 80095e4:	46a1      	mov	r9, r4
 80095e6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80095ea:	f1c1 0820 	rsb	r8, r1, #32
 80095ee:	40cf      	lsrs	r7, r1
 80095f0:	f105 0e04 	add.w	lr, r5, #4
 80095f4:	4576      	cmp	r6, lr
 80095f6:	46f4      	mov	ip, lr
 80095f8:	d816      	bhi.n	8009628 <rshift+0x80>
 80095fa:	1a9a      	subs	r2, r3, r2
 80095fc:	0092      	lsls	r2, r2, #2
 80095fe:	3a04      	subs	r2, #4
 8009600:	3501      	adds	r5, #1
 8009602:	42ae      	cmp	r6, r5
 8009604:	bf38      	it	cc
 8009606:	2200      	movcc	r2, #0
 8009608:	18a3      	adds	r3, r4, r2
 800960a:	50a7      	str	r7, [r4, r2]
 800960c:	b107      	cbz	r7, 8009610 <rshift+0x68>
 800960e:	3304      	adds	r3, #4
 8009610:	42a3      	cmp	r3, r4
 8009612:	eba3 0204 	sub.w	r2, r3, r4
 8009616:	bf08      	it	eq
 8009618:	2300      	moveq	r3, #0
 800961a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800961e:	6102      	str	r2, [r0, #16]
 8009620:	bf08      	it	eq
 8009622:	6143      	streq	r3, [r0, #20]
 8009624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009628:	f8dc c000 	ldr.w	ip, [ip]
 800962c:	fa0c fc08 	lsl.w	ip, ip, r8
 8009630:	ea4c 0707 	orr.w	r7, ip, r7
 8009634:	f849 7b04 	str.w	r7, [r9], #4
 8009638:	f85e 7b04 	ldr.w	r7, [lr], #4
 800963c:	40cf      	lsrs	r7, r1
 800963e:	e7d9      	b.n	80095f4 <rshift+0x4c>
 8009640:	f851 cb04 	ldr.w	ip, [r1], #4
 8009644:	f847 cf04 	str.w	ip, [r7, #4]!
 8009648:	e7c2      	b.n	80095d0 <rshift+0x28>
 800964a:	4623      	mov	r3, r4
 800964c:	e7e0      	b.n	8009610 <rshift+0x68>

0800964e <__hexdig_fun>:
 800964e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009652:	2b09      	cmp	r3, #9
 8009654:	d802      	bhi.n	800965c <__hexdig_fun+0xe>
 8009656:	3820      	subs	r0, #32
 8009658:	b2c0      	uxtb	r0, r0
 800965a:	4770      	bx	lr
 800965c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009660:	2b05      	cmp	r3, #5
 8009662:	d801      	bhi.n	8009668 <__hexdig_fun+0x1a>
 8009664:	3847      	subs	r0, #71	@ 0x47
 8009666:	e7f7      	b.n	8009658 <__hexdig_fun+0xa>
 8009668:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800966c:	2b05      	cmp	r3, #5
 800966e:	d801      	bhi.n	8009674 <__hexdig_fun+0x26>
 8009670:	3827      	subs	r0, #39	@ 0x27
 8009672:	e7f1      	b.n	8009658 <__hexdig_fun+0xa>
 8009674:	2000      	movs	r0, #0
 8009676:	4770      	bx	lr

08009678 <__gethex>:
 8009678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800967c:	468a      	mov	sl, r1
 800967e:	4690      	mov	r8, r2
 8009680:	b085      	sub	sp, #20
 8009682:	9302      	str	r3, [sp, #8]
 8009684:	680b      	ldr	r3, [r1, #0]
 8009686:	9001      	str	r0, [sp, #4]
 8009688:	1c9c      	adds	r4, r3, #2
 800968a:	46a1      	mov	r9, r4
 800968c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009690:	2830      	cmp	r0, #48	@ 0x30
 8009692:	d0fa      	beq.n	800968a <__gethex+0x12>
 8009694:	eba9 0303 	sub.w	r3, r9, r3
 8009698:	f1a3 0b02 	sub.w	fp, r3, #2
 800969c:	f7ff ffd7 	bl	800964e <__hexdig_fun>
 80096a0:	4605      	mov	r5, r0
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d168      	bne.n	8009778 <__gethex+0x100>
 80096a6:	2201      	movs	r2, #1
 80096a8:	4648      	mov	r0, r9
 80096aa:	499f      	ldr	r1, [pc, #636]	@ (8009928 <__gethex+0x2b0>)
 80096ac:	f7ff fe6f 	bl	800938e <strncmp>
 80096b0:	4607      	mov	r7, r0
 80096b2:	2800      	cmp	r0, #0
 80096b4:	d167      	bne.n	8009786 <__gethex+0x10e>
 80096b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80096ba:	4626      	mov	r6, r4
 80096bc:	f7ff ffc7 	bl	800964e <__hexdig_fun>
 80096c0:	2800      	cmp	r0, #0
 80096c2:	d062      	beq.n	800978a <__gethex+0x112>
 80096c4:	4623      	mov	r3, r4
 80096c6:	7818      	ldrb	r0, [r3, #0]
 80096c8:	4699      	mov	r9, r3
 80096ca:	2830      	cmp	r0, #48	@ 0x30
 80096cc:	f103 0301 	add.w	r3, r3, #1
 80096d0:	d0f9      	beq.n	80096c6 <__gethex+0x4e>
 80096d2:	f7ff ffbc 	bl	800964e <__hexdig_fun>
 80096d6:	fab0 f580 	clz	r5, r0
 80096da:	f04f 0b01 	mov.w	fp, #1
 80096de:	096d      	lsrs	r5, r5, #5
 80096e0:	464a      	mov	r2, r9
 80096e2:	4616      	mov	r6, r2
 80096e4:	7830      	ldrb	r0, [r6, #0]
 80096e6:	3201      	adds	r2, #1
 80096e8:	f7ff ffb1 	bl	800964e <__hexdig_fun>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	d1f8      	bne.n	80096e2 <__gethex+0x6a>
 80096f0:	2201      	movs	r2, #1
 80096f2:	4630      	mov	r0, r6
 80096f4:	498c      	ldr	r1, [pc, #560]	@ (8009928 <__gethex+0x2b0>)
 80096f6:	f7ff fe4a 	bl	800938e <strncmp>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d13f      	bne.n	800977e <__gethex+0x106>
 80096fe:	b944      	cbnz	r4, 8009712 <__gethex+0x9a>
 8009700:	1c74      	adds	r4, r6, #1
 8009702:	4622      	mov	r2, r4
 8009704:	4616      	mov	r6, r2
 8009706:	7830      	ldrb	r0, [r6, #0]
 8009708:	3201      	adds	r2, #1
 800970a:	f7ff ffa0 	bl	800964e <__hexdig_fun>
 800970e:	2800      	cmp	r0, #0
 8009710:	d1f8      	bne.n	8009704 <__gethex+0x8c>
 8009712:	1ba4      	subs	r4, r4, r6
 8009714:	00a7      	lsls	r7, r4, #2
 8009716:	7833      	ldrb	r3, [r6, #0]
 8009718:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800971c:	2b50      	cmp	r3, #80	@ 0x50
 800971e:	d13e      	bne.n	800979e <__gethex+0x126>
 8009720:	7873      	ldrb	r3, [r6, #1]
 8009722:	2b2b      	cmp	r3, #43	@ 0x2b
 8009724:	d033      	beq.n	800978e <__gethex+0x116>
 8009726:	2b2d      	cmp	r3, #45	@ 0x2d
 8009728:	d034      	beq.n	8009794 <__gethex+0x11c>
 800972a:	2400      	movs	r4, #0
 800972c:	1c71      	adds	r1, r6, #1
 800972e:	7808      	ldrb	r0, [r1, #0]
 8009730:	f7ff ff8d 	bl	800964e <__hexdig_fun>
 8009734:	1e43      	subs	r3, r0, #1
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b18      	cmp	r3, #24
 800973a:	d830      	bhi.n	800979e <__gethex+0x126>
 800973c:	f1a0 0210 	sub.w	r2, r0, #16
 8009740:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009744:	f7ff ff83 	bl	800964e <__hexdig_fun>
 8009748:	f100 3cff 	add.w	ip, r0, #4294967295
 800974c:	fa5f fc8c 	uxtb.w	ip, ip
 8009750:	f1bc 0f18 	cmp.w	ip, #24
 8009754:	f04f 030a 	mov.w	r3, #10
 8009758:	d91e      	bls.n	8009798 <__gethex+0x120>
 800975a:	b104      	cbz	r4, 800975e <__gethex+0xe6>
 800975c:	4252      	negs	r2, r2
 800975e:	4417      	add	r7, r2
 8009760:	f8ca 1000 	str.w	r1, [sl]
 8009764:	b1ed      	cbz	r5, 80097a2 <__gethex+0x12a>
 8009766:	f1bb 0f00 	cmp.w	fp, #0
 800976a:	bf0c      	ite	eq
 800976c:	2506      	moveq	r5, #6
 800976e:	2500      	movne	r5, #0
 8009770:	4628      	mov	r0, r5
 8009772:	b005      	add	sp, #20
 8009774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009778:	2500      	movs	r5, #0
 800977a:	462c      	mov	r4, r5
 800977c:	e7b0      	b.n	80096e0 <__gethex+0x68>
 800977e:	2c00      	cmp	r4, #0
 8009780:	d1c7      	bne.n	8009712 <__gethex+0x9a>
 8009782:	4627      	mov	r7, r4
 8009784:	e7c7      	b.n	8009716 <__gethex+0x9e>
 8009786:	464e      	mov	r6, r9
 8009788:	462f      	mov	r7, r5
 800978a:	2501      	movs	r5, #1
 800978c:	e7c3      	b.n	8009716 <__gethex+0x9e>
 800978e:	2400      	movs	r4, #0
 8009790:	1cb1      	adds	r1, r6, #2
 8009792:	e7cc      	b.n	800972e <__gethex+0xb6>
 8009794:	2401      	movs	r4, #1
 8009796:	e7fb      	b.n	8009790 <__gethex+0x118>
 8009798:	fb03 0002 	mla	r0, r3, r2, r0
 800979c:	e7ce      	b.n	800973c <__gethex+0xc4>
 800979e:	4631      	mov	r1, r6
 80097a0:	e7de      	b.n	8009760 <__gethex+0xe8>
 80097a2:	4629      	mov	r1, r5
 80097a4:	eba6 0309 	sub.w	r3, r6, r9
 80097a8:	3b01      	subs	r3, #1
 80097aa:	2b07      	cmp	r3, #7
 80097ac:	dc0a      	bgt.n	80097c4 <__gethex+0x14c>
 80097ae:	9801      	ldr	r0, [sp, #4]
 80097b0:	f000 faf4 	bl	8009d9c <_Balloc>
 80097b4:	4604      	mov	r4, r0
 80097b6:	b940      	cbnz	r0, 80097ca <__gethex+0x152>
 80097b8:	4602      	mov	r2, r0
 80097ba:	21e4      	movs	r1, #228	@ 0xe4
 80097bc:	4b5b      	ldr	r3, [pc, #364]	@ (800992c <__gethex+0x2b4>)
 80097be:	485c      	ldr	r0, [pc, #368]	@ (8009930 <__gethex+0x2b8>)
 80097c0:	f001 fb60 	bl	800ae84 <__assert_func>
 80097c4:	3101      	adds	r1, #1
 80097c6:	105b      	asrs	r3, r3, #1
 80097c8:	e7ef      	b.n	80097aa <__gethex+0x132>
 80097ca:	2300      	movs	r3, #0
 80097cc:	f100 0a14 	add.w	sl, r0, #20
 80097d0:	4655      	mov	r5, sl
 80097d2:	469b      	mov	fp, r3
 80097d4:	45b1      	cmp	r9, r6
 80097d6:	d337      	bcc.n	8009848 <__gethex+0x1d0>
 80097d8:	f845 bb04 	str.w	fp, [r5], #4
 80097dc:	eba5 050a 	sub.w	r5, r5, sl
 80097e0:	10ad      	asrs	r5, r5, #2
 80097e2:	6125      	str	r5, [r4, #16]
 80097e4:	4658      	mov	r0, fp
 80097e6:	f000 fbcb 	bl	8009f80 <__hi0bits>
 80097ea:	016d      	lsls	r5, r5, #5
 80097ec:	f8d8 6000 	ldr.w	r6, [r8]
 80097f0:	1a2d      	subs	r5, r5, r0
 80097f2:	42b5      	cmp	r5, r6
 80097f4:	dd54      	ble.n	80098a0 <__gethex+0x228>
 80097f6:	1bad      	subs	r5, r5, r6
 80097f8:	4629      	mov	r1, r5
 80097fa:	4620      	mov	r0, r4
 80097fc:	f000 ff4d 	bl	800a69a <__any_on>
 8009800:	4681      	mov	r9, r0
 8009802:	b178      	cbz	r0, 8009824 <__gethex+0x1ac>
 8009804:	f04f 0901 	mov.w	r9, #1
 8009808:	1e6b      	subs	r3, r5, #1
 800980a:	1159      	asrs	r1, r3, #5
 800980c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009810:	f003 021f 	and.w	r2, r3, #31
 8009814:	fa09 f202 	lsl.w	r2, r9, r2
 8009818:	420a      	tst	r2, r1
 800981a:	d003      	beq.n	8009824 <__gethex+0x1ac>
 800981c:	454b      	cmp	r3, r9
 800981e:	dc36      	bgt.n	800988e <__gethex+0x216>
 8009820:	f04f 0902 	mov.w	r9, #2
 8009824:	4629      	mov	r1, r5
 8009826:	4620      	mov	r0, r4
 8009828:	f7ff febe 	bl	80095a8 <rshift>
 800982c:	442f      	add	r7, r5
 800982e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009832:	42bb      	cmp	r3, r7
 8009834:	da42      	bge.n	80098bc <__gethex+0x244>
 8009836:	4621      	mov	r1, r4
 8009838:	9801      	ldr	r0, [sp, #4]
 800983a:	f000 faef 	bl	8009e1c <_Bfree>
 800983e:	2300      	movs	r3, #0
 8009840:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009842:	25a3      	movs	r5, #163	@ 0xa3
 8009844:	6013      	str	r3, [r2, #0]
 8009846:	e793      	b.n	8009770 <__gethex+0xf8>
 8009848:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800984c:	2a2e      	cmp	r2, #46	@ 0x2e
 800984e:	d012      	beq.n	8009876 <__gethex+0x1fe>
 8009850:	2b20      	cmp	r3, #32
 8009852:	d104      	bne.n	800985e <__gethex+0x1e6>
 8009854:	f845 bb04 	str.w	fp, [r5], #4
 8009858:	f04f 0b00 	mov.w	fp, #0
 800985c:	465b      	mov	r3, fp
 800985e:	7830      	ldrb	r0, [r6, #0]
 8009860:	9303      	str	r3, [sp, #12]
 8009862:	f7ff fef4 	bl	800964e <__hexdig_fun>
 8009866:	9b03      	ldr	r3, [sp, #12]
 8009868:	f000 000f 	and.w	r0, r0, #15
 800986c:	4098      	lsls	r0, r3
 800986e:	ea4b 0b00 	orr.w	fp, fp, r0
 8009872:	3304      	adds	r3, #4
 8009874:	e7ae      	b.n	80097d4 <__gethex+0x15c>
 8009876:	45b1      	cmp	r9, r6
 8009878:	d8ea      	bhi.n	8009850 <__gethex+0x1d8>
 800987a:	2201      	movs	r2, #1
 800987c:	4630      	mov	r0, r6
 800987e:	492a      	ldr	r1, [pc, #168]	@ (8009928 <__gethex+0x2b0>)
 8009880:	9303      	str	r3, [sp, #12]
 8009882:	f7ff fd84 	bl	800938e <strncmp>
 8009886:	9b03      	ldr	r3, [sp, #12]
 8009888:	2800      	cmp	r0, #0
 800988a:	d1e1      	bne.n	8009850 <__gethex+0x1d8>
 800988c:	e7a2      	b.n	80097d4 <__gethex+0x15c>
 800988e:	4620      	mov	r0, r4
 8009890:	1ea9      	subs	r1, r5, #2
 8009892:	f000 ff02 	bl	800a69a <__any_on>
 8009896:	2800      	cmp	r0, #0
 8009898:	d0c2      	beq.n	8009820 <__gethex+0x1a8>
 800989a:	f04f 0903 	mov.w	r9, #3
 800989e:	e7c1      	b.n	8009824 <__gethex+0x1ac>
 80098a0:	da09      	bge.n	80098b6 <__gethex+0x23e>
 80098a2:	1b75      	subs	r5, r6, r5
 80098a4:	4621      	mov	r1, r4
 80098a6:	462a      	mov	r2, r5
 80098a8:	9801      	ldr	r0, [sp, #4]
 80098aa:	f000 fcc7 	bl	800a23c <__lshift>
 80098ae:	4604      	mov	r4, r0
 80098b0:	1b7f      	subs	r7, r7, r5
 80098b2:	f100 0a14 	add.w	sl, r0, #20
 80098b6:	f04f 0900 	mov.w	r9, #0
 80098ba:	e7b8      	b.n	800982e <__gethex+0x1b6>
 80098bc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098c0:	42bd      	cmp	r5, r7
 80098c2:	dd6f      	ble.n	80099a4 <__gethex+0x32c>
 80098c4:	1bed      	subs	r5, r5, r7
 80098c6:	42ae      	cmp	r6, r5
 80098c8:	dc34      	bgt.n	8009934 <__gethex+0x2bc>
 80098ca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d022      	beq.n	8009918 <__gethex+0x2a0>
 80098d2:	2b03      	cmp	r3, #3
 80098d4:	d024      	beq.n	8009920 <__gethex+0x2a8>
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d115      	bne.n	8009906 <__gethex+0x28e>
 80098da:	42ae      	cmp	r6, r5
 80098dc:	d113      	bne.n	8009906 <__gethex+0x28e>
 80098de:	2e01      	cmp	r6, #1
 80098e0:	d10b      	bne.n	80098fa <__gethex+0x282>
 80098e2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80098e6:	9a02      	ldr	r2, [sp, #8]
 80098e8:	2562      	movs	r5, #98	@ 0x62
 80098ea:	6013      	str	r3, [r2, #0]
 80098ec:	2301      	movs	r3, #1
 80098ee:	6123      	str	r3, [r4, #16]
 80098f0:	f8ca 3000 	str.w	r3, [sl]
 80098f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098f6:	601c      	str	r4, [r3, #0]
 80098f8:	e73a      	b.n	8009770 <__gethex+0xf8>
 80098fa:	4620      	mov	r0, r4
 80098fc:	1e71      	subs	r1, r6, #1
 80098fe:	f000 fecc 	bl	800a69a <__any_on>
 8009902:	2800      	cmp	r0, #0
 8009904:	d1ed      	bne.n	80098e2 <__gethex+0x26a>
 8009906:	4621      	mov	r1, r4
 8009908:	9801      	ldr	r0, [sp, #4]
 800990a:	f000 fa87 	bl	8009e1c <_Bfree>
 800990e:	2300      	movs	r3, #0
 8009910:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009912:	2550      	movs	r5, #80	@ 0x50
 8009914:	6013      	str	r3, [r2, #0]
 8009916:	e72b      	b.n	8009770 <__gethex+0xf8>
 8009918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1f3      	bne.n	8009906 <__gethex+0x28e>
 800991e:	e7e0      	b.n	80098e2 <__gethex+0x26a>
 8009920:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1dd      	bne.n	80098e2 <__gethex+0x26a>
 8009926:	e7ee      	b.n	8009906 <__gethex+0x28e>
 8009928:	0800c5d8 	.word	0x0800c5d8
 800992c:	0800c5ec 	.word	0x0800c5ec
 8009930:	0800c5fd 	.word	0x0800c5fd
 8009934:	1e6f      	subs	r7, r5, #1
 8009936:	f1b9 0f00 	cmp.w	r9, #0
 800993a:	d130      	bne.n	800999e <__gethex+0x326>
 800993c:	b127      	cbz	r7, 8009948 <__gethex+0x2d0>
 800993e:	4639      	mov	r1, r7
 8009940:	4620      	mov	r0, r4
 8009942:	f000 feaa 	bl	800a69a <__any_on>
 8009946:	4681      	mov	r9, r0
 8009948:	2301      	movs	r3, #1
 800994a:	4629      	mov	r1, r5
 800994c:	1b76      	subs	r6, r6, r5
 800994e:	2502      	movs	r5, #2
 8009950:	117a      	asrs	r2, r7, #5
 8009952:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009956:	f007 071f 	and.w	r7, r7, #31
 800995a:	40bb      	lsls	r3, r7
 800995c:	4213      	tst	r3, r2
 800995e:	4620      	mov	r0, r4
 8009960:	bf18      	it	ne
 8009962:	f049 0902 	orrne.w	r9, r9, #2
 8009966:	f7ff fe1f 	bl	80095a8 <rshift>
 800996a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800996e:	f1b9 0f00 	cmp.w	r9, #0
 8009972:	d047      	beq.n	8009a04 <__gethex+0x38c>
 8009974:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009978:	2b02      	cmp	r3, #2
 800997a:	d015      	beq.n	80099a8 <__gethex+0x330>
 800997c:	2b03      	cmp	r3, #3
 800997e:	d017      	beq.n	80099b0 <__gethex+0x338>
 8009980:	2b01      	cmp	r3, #1
 8009982:	d109      	bne.n	8009998 <__gethex+0x320>
 8009984:	f019 0f02 	tst.w	r9, #2
 8009988:	d006      	beq.n	8009998 <__gethex+0x320>
 800998a:	f8da 3000 	ldr.w	r3, [sl]
 800998e:	ea49 0903 	orr.w	r9, r9, r3
 8009992:	f019 0f01 	tst.w	r9, #1
 8009996:	d10e      	bne.n	80099b6 <__gethex+0x33e>
 8009998:	f045 0510 	orr.w	r5, r5, #16
 800999c:	e032      	b.n	8009a04 <__gethex+0x38c>
 800999e:	f04f 0901 	mov.w	r9, #1
 80099a2:	e7d1      	b.n	8009948 <__gethex+0x2d0>
 80099a4:	2501      	movs	r5, #1
 80099a6:	e7e2      	b.n	800996e <__gethex+0x2f6>
 80099a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099aa:	f1c3 0301 	rsb	r3, r3, #1
 80099ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d0f0      	beq.n	8009998 <__gethex+0x320>
 80099b6:	f04f 0c00 	mov.w	ip, #0
 80099ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099be:	f104 0314 	add.w	r3, r4, #20
 80099c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80099c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80099ca:	4618      	mov	r0, r3
 80099cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80099d0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80099d4:	d01b      	beq.n	8009a0e <__gethex+0x396>
 80099d6:	3201      	adds	r2, #1
 80099d8:	6002      	str	r2, [r0, #0]
 80099da:	2d02      	cmp	r5, #2
 80099dc:	f104 0314 	add.w	r3, r4, #20
 80099e0:	d13c      	bne.n	8009a5c <__gethex+0x3e4>
 80099e2:	f8d8 2000 	ldr.w	r2, [r8]
 80099e6:	3a01      	subs	r2, #1
 80099e8:	42b2      	cmp	r2, r6
 80099ea:	d109      	bne.n	8009a00 <__gethex+0x388>
 80099ec:	2201      	movs	r2, #1
 80099ee:	1171      	asrs	r1, r6, #5
 80099f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80099f4:	f006 061f 	and.w	r6, r6, #31
 80099f8:	fa02 f606 	lsl.w	r6, r2, r6
 80099fc:	421e      	tst	r6, r3
 80099fe:	d13a      	bne.n	8009a76 <__gethex+0x3fe>
 8009a00:	f045 0520 	orr.w	r5, r5, #32
 8009a04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a06:	601c      	str	r4, [r3, #0]
 8009a08:	9b02      	ldr	r3, [sp, #8]
 8009a0a:	601f      	str	r7, [r3, #0]
 8009a0c:	e6b0      	b.n	8009770 <__gethex+0xf8>
 8009a0e:	4299      	cmp	r1, r3
 8009a10:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a14:	d8d9      	bhi.n	80099ca <__gethex+0x352>
 8009a16:	68a3      	ldr	r3, [r4, #8]
 8009a18:	459b      	cmp	fp, r3
 8009a1a:	db17      	blt.n	8009a4c <__gethex+0x3d4>
 8009a1c:	6861      	ldr	r1, [r4, #4]
 8009a1e:	9801      	ldr	r0, [sp, #4]
 8009a20:	3101      	adds	r1, #1
 8009a22:	f000 f9bb 	bl	8009d9c <_Balloc>
 8009a26:	4681      	mov	r9, r0
 8009a28:	b918      	cbnz	r0, 8009a32 <__gethex+0x3ba>
 8009a2a:	4602      	mov	r2, r0
 8009a2c:	2184      	movs	r1, #132	@ 0x84
 8009a2e:	4b19      	ldr	r3, [pc, #100]	@ (8009a94 <__gethex+0x41c>)
 8009a30:	e6c5      	b.n	80097be <__gethex+0x146>
 8009a32:	6922      	ldr	r2, [r4, #16]
 8009a34:	f104 010c 	add.w	r1, r4, #12
 8009a38:	3202      	adds	r2, #2
 8009a3a:	0092      	lsls	r2, r2, #2
 8009a3c:	300c      	adds	r0, #12
 8009a3e:	f7ff fd56 	bl	80094ee <memcpy>
 8009a42:	4621      	mov	r1, r4
 8009a44:	9801      	ldr	r0, [sp, #4]
 8009a46:	f000 f9e9 	bl	8009e1c <_Bfree>
 8009a4a:	464c      	mov	r4, r9
 8009a4c:	6923      	ldr	r3, [r4, #16]
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	6122      	str	r2, [r4, #16]
 8009a52:	2201      	movs	r2, #1
 8009a54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a58:	615a      	str	r2, [r3, #20]
 8009a5a:	e7be      	b.n	80099da <__gethex+0x362>
 8009a5c:	6922      	ldr	r2, [r4, #16]
 8009a5e:	455a      	cmp	r2, fp
 8009a60:	dd0b      	ble.n	8009a7a <__gethex+0x402>
 8009a62:	2101      	movs	r1, #1
 8009a64:	4620      	mov	r0, r4
 8009a66:	f7ff fd9f 	bl	80095a8 <rshift>
 8009a6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009a6e:	3701      	adds	r7, #1
 8009a70:	42bb      	cmp	r3, r7
 8009a72:	f6ff aee0 	blt.w	8009836 <__gethex+0x1be>
 8009a76:	2501      	movs	r5, #1
 8009a78:	e7c2      	b.n	8009a00 <__gethex+0x388>
 8009a7a:	f016 061f 	ands.w	r6, r6, #31
 8009a7e:	d0fa      	beq.n	8009a76 <__gethex+0x3fe>
 8009a80:	4453      	add	r3, sl
 8009a82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009a86:	f000 fa7b 	bl	8009f80 <__hi0bits>
 8009a8a:	f1c6 0620 	rsb	r6, r6, #32
 8009a8e:	42b0      	cmp	r0, r6
 8009a90:	dbe7      	blt.n	8009a62 <__gethex+0x3ea>
 8009a92:	e7f0      	b.n	8009a76 <__gethex+0x3fe>
 8009a94:	0800c5ec 	.word	0x0800c5ec

08009a98 <L_shift>:
 8009a98:	f1c2 0208 	rsb	r2, r2, #8
 8009a9c:	0092      	lsls	r2, r2, #2
 8009a9e:	b570      	push	{r4, r5, r6, lr}
 8009aa0:	f1c2 0620 	rsb	r6, r2, #32
 8009aa4:	6843      	ldr	r3, [r0, #4]
 8009aa6:	6804      	ldr	r4, [r0, #0]
 8009aa8:	fa03 f506 	lsl.w	r5, r3, r6
 8009aac:	432c      	orrs	r4, r5
 8009aae:	40d3      	lsrs	r3, r2
 8009ab0:	6004      	str	r4, [r0, #0]
 8009ab2:	f840 3f04 	str.w	r3, [r0, #4]!
 8009ab6:	4288      	cmp	r0, r1
 8009ab8:	d3f4      	bcc.n	8009aa4 <L_shift+0xc>
 8009aba:	bd70      	pop	{r4, r5, r6, pc}

08009abc <__match>:
 8009abc:	b530      	push	{r4, r5, lr}
 8009abe:	6803      	ldr	r3, [r0, #0]
 8009ac0:	3301      	adds	r3, #1
 8009ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ac6:	b914      	cbnz	r4, 8009ace <__match+0x12>
 8009ac8:	6003      	str	r3, [r0, #0]
 8009aca:	2001      	movs	r0, #1
 8009acc:	bd30      	pop	{r4, r5, pc}
 8009ace:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ad2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009ad6:	2d19      	cmp	r5, #25
 8009ad8:	bf98      	it	ls
 8009ada:	3220      	addls	r2, #32
 8009adc:	42a2      	cmp	r2, r4
 8009ade:	d0f0      	beq.n	8009ac2 <__match+0x6>
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e7f3      	b.n	8009acc <__match+0x10>

08009ae4 <__hexnan>:
 8009ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae8:	2500      	movs	r5, #0
 8009aea:	680b      	ldr	r3, [r1, #0]
 8009aec:	4682      	mov	sl, r0
 8009aee:	115e      	asrs	r6, r3, #5
 8009af0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009af4:	f013 031f 	ands.w	r3, r3, #31
 8009af8:	bf18      	it	ne
 8009afa:	3604      	addne	r6, #4
 8009afc:	1f37      	subs	r7, r6, #4
 8009afe:	4690      	mov	r8, r2
 8009b00:	46b9      	mov	r9, r7
 8009b02:	463c      	mov	r4, r7
 8009b04:	46ab      	mov	fp, r5
 8009b06:	b087      	sub	sp, #28
 8009b08:	6801      	ldr	r1, [r0, #0]
 8009b0a:	9301      	str	r3, [sp, #4]
 8009b0c:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b10:	9502      	str	r5, [sp, #8]
 8009b12:	784a      	ldrb	r2, [r1, #1]
 8009b14:	1c4b      	adds	r3, r1, #1
 8009b16:	9303      	str	r3, [sp, #12]
 8009b18:	b342      	cbz	r2, 8009b6c <__hexnan+0x88>
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	9105      	str	r1, [sp, #20]
 8009b1e:	9204      	str	r2, [sp, #16]
 8009b20:	f7ff fd95 	bl	800964e <__hexdig_fun>
 8009b24:	2800      	cmp	r0, #0
 8009b26:	d151      	bne.n	8009bcc <__hexnan+0xe8>
 8009b28:	9a04      	ldr	r2, [sp, #16]
 8009b2a:	9905      	ldr	r1, [sp, #20]
 8009b2c:	2a20      	cmp	r2, #32
 8009b2e:	d818      	bhi.n	8009b62 <__hexnan+0x7e>
 8009b30:	9b02      	ldr	r3, [sp, #8]
 8009b32:	459b      	cmp	fp, r3
 8009b34:	dd13      	ble.n	8009b5e <__hexnan+0x7a>
 8009b36:	454c      	cmp	r4, r9
 8009b38:	d206      	bcs.n	8009b48 <__hexnan+0x64>
 8009b3a:	2d07      	cmp	r5, #7
 8009b3c:	dc04      	bgt.n	8009b48 <__hexnan+0x64>
 8009b3e:	462a      	mov	r2, r5
 8009b40:	4649      	mov	r1, r9
 8009b42:	4620      	mov	r0, r4
 8009b44:	f7ff ffa8 	bl	8009a98 <L_shift>
 8009b48:	4544      	cmp	r4, r8
 8009b4a:	d952      	bls.n	8009bf2 <__hexnan+0x10e>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	f1a4 0904 	sub.w	r9, r4, #4
 8009b52:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b56:	461d      	mov	r5, r3
 8009b58:	464c      	mov	r4, r9
 8009b5a:	f8cd b008 	str.w	fp, [sp, #8]
 8009b5e:	9903      	ldr	r1, [sp, #12]
 8009b60:	e7d7      	b.n	8009b12 <__hexnan+0x2e>
 8009b62:	2a29      	cmp	r2, #41	@ 0x29
 8009b64:	d157      	bne.n	8009c16 <__hexnan+0x132>
 8009b66:	3102      	adds	r1, #2
 8009b68:	f8ca 1000 	str.w	r1, [sl]
 8009b6c:	f1bb 0f00 	cmp.w	fp, #0
 8009b70:	d051      	beq.n	8009c16 <__hexnan+0x132>
 8009b72:	454c      	cmp	r4, r9
 8009b74:	d206      	bcs.n	8009b84 <__hexnan+0xa0>
 8009b76:	2d07      	cmp	r5, #7
 8009b78:	dc04      	bgt.n	8009b84 <__hexnan+0xa0>
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	4620      	mov	r0, r4
 8009b80:	f7ff ff8a 	bl	8009a98 <L_shift>
 8009b84:	4544      	cmp	r4, r8
 8009b86:	d936      	bls.n	8009bf6 <__hexnan+0x112>
 8009b88:	4623      	mov	r3, r4
 8009b8a:	f1a8 0204 	sub.w	r2, r8, #4
 8009b8e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009b92:	429f      	cmp	r7, r3
 8009b94:	f842 1f04 	str.w	r1, [r2, #4]!
 8009b98:	d2f9      	bcs.n	8009b8e <__hexnan+0xaa>
 8009b9a:	1b3b      	subs	r3, r7, r4
 8009b9c:	f023 0303 	bic.w	r3, r3, #3
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	3401      	adds	r4, #1
 8009ba4:	3e03      	subs	r6, #3
 8009ba6:	42b4      	cmp	r4, r6
 8009ba8:	bf88      	it	hi
 8009baa:	2304      	movhi	r3, #4
 8009bac:	2200      	movs	r2, #0
 8009bae:	4443      	add	r3, r8
 8009bb0:	f843 2b04 	str.w	r2, [r3], #4
 8009bb4:	429f      	cmp	r7, r3
 8009bb6:	d2fb      	bcs.n	8009bb0 <__hexnan+0xcc>
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	b91b      	cbnz	r3, 8009bc4 <__hexnan+0xe0>
 8009bbc:	4547      	cmp	r7, r8
 8009bbe:	d128      	bne.n	8009c12 <__hexnan+0x12e>
 8009bc0:	2301      	movs	r3, #1
 8009bc2:	603b      	str	r3, [r7, #0]
 8009bc4:	2005      	movs	r0, #5
 8009bc6:	b007      	add	sp, #28
 8009bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bcc:	3501      	adds	r5, #1
 8009bce:	2d08      	cmp	r5, #8
 8009bd0:	f10b 0b01 	add.w	fp, fp, #1
 8009bd4:	dd06      	ble.n	8009be4 <__hexnan+0x100>
 8009bd6:	4544      	cmp	r4, r8
 8009bd8:	d9c1      	bls.n	8009b5e <__hexnan+0x7a>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2501      	movs	r5, #1
 8009bde:	f844 3c04 	str.w	r3, [r4, #-4]
 8009be2:	3c04      	subs	r4, #4
 8009be4:	6822      	ldr	r2, [r4, #0]
 8009be6:	f000 000f 	and.w	r0, r0, #15
 8009bea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009bee:	6020      	str	r0, [r4, #0]
 8009bf0:	e7b5      	b.n	8009b5e <__hexnan+0x7a>
 8009bf2:	2508      	movs	r5, #8
 8009bf4:	e7b3      	b.n	8009b5e <__hexnan+0x7a>
 8009bf6:	9b01      	ldr	r3, [sp, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d0dd      	beq.n	8009bb8 <__hexnan+0xd4>
 8009bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8009c00:	f1c3 0320 	rsb	r3, r3, #32
 8009c04:	40da      	lsrs	r2, r3
 8009c06:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c10:	e7d2      	b.n	8009bb8 <__hexnan+0xd4>
 8009c12:	3f04      	subs	r7, #4
 8009c14:	e7d0      	b.n	8009bb8 <__hexnan+0xd4>
 8009c16:	2004      	movs	r0, #4
 8009c18:	e7d5      	b.n	8009bc6 <__hexnan+0xe2>
	...

08009c1c <sbrk_aligned>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	4e0f      	ldr	r6, [pc, #60]	@ (8009c5c <sbrk_aligned+0x40>)
 8009c20:	460c      	mov	r4, r1
 8009c22:	6831      	ldr	r1, [r6, #0]
 8009c24:	4605      	mov	r5, r0
 8009c26:	b911      	cbnz	r1, 8009c2e <sbrk_aligned+0x12>
 8009c28:	f001 f90e 	bl	800ae48 <_sbrk_r>
 8009c2c:	6030      	str	r0, [r6, #0]
 8009c2e:	4621      	mov	r1, r4
 8009c30:	4628      	mov	r0, r5
 8009c32:	f001 f909 	bl	800ae48 <_sbrk_r>
 8009c36:	1c43      	adds	r3, r0, #1
 8009c38:	d103      	bne.n	8009c42 <sbrk_aligned+0x26>
 8009c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8009c3e:	4620      	mov	r0, r4
 8009c40:	bd70      	pop	{r4, r5, r6, pc}
 8009c42:	1cc4      	adds	r4, r0, #3
 8009c44:	f024 0403 	bic.w	r4, r4, #3
 8009c48:	42a0      	cmp	r0, r4
 8009c4a:	d0f8      	beq.n	8009c3e <sbrk_aligned+0x22>
 8009c4c:	1a21      	subs	r1, r4, r0
 8009c4e:	4628      	mov	r0, r5
 8009c50:	f001 f8fa 	bl	800ae48 <_sbrk_r>
 8009c54:	3001      	adds	r0, #1
 8009c56:	d1f2      	bne.n	8009c3e <sbrk_aligned+0x22>
 8009c58:	e7ef      	b.n	8009c3a <sbrk_aligned+0x1e>
 8009c5a:	bf00      	nop
 8009c5c:	20002118 	.word	0x20002118

08009c60 <_malloc_r>:
 8009c60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c64:	1ccd      	adds	r5, r1, #3
 8009c66:	f025 0503 	bic.w	r5, r5, #3
 8009c6a:	3508      	adds	r5, #8
 8009c6c:	2d0c      	cmp	r5, #12
 8009c6e:	bf38      	it	cc
 8009c70:	250c      	movcc	r5, #12
 8009c72:	2d00      	cmp	r5, #0
 8009c74:	4606      	mov	r6, r0
 8009c76:	db01      	blt.n	8009c7c <_malloc_r+0x1c>
 8009c78:	42a9      	cmp	r1, r5
 8009c7a:	d904      	bls.n	8009c86 <_malloc_r+0x26>
 8009c7c:	230c      	movs	r3, #12
 8009c7e:	6033      	str	r3, [r6, #0]
 8009c80:	2000      	movs	r0, #0
 8009c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d5c <_malloc_r+0xfc>
 8009c8a:	f000 f87b 	bl	8009d84 <__malloc_lock>
 8009c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c92:	461c      	mov	r4, r3
 8009c94:	bb44      	cbnz	r4, 8009ce8 <_malloc_r+0x88>
 8009c96:	4629      	mov	r1, r5
 8009c98:	4630      	mov	r0, r6
 8009c9a:	f7ff ffbf 	bl	8009c1c <sbrk_aligned>
 8009c9e:	1c43      	adds	r3, r0, #1
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	d158      	bne.n	8009d56 <_malloc_r+0xf6>
 8009ca4:	f8d8 4000 	ldr.w	r4, [r8]
 8009ca8:	4627      	mov	r7, r4
 8009caa:	2f00      	cmp	r7, #0
 8009cac:	d143      	bne.n	8009d36 <_malloc_r+0xd6>
 8009cae:	2c00      	cmp	r4, #0
 8009cb0:	d04b      	beq.n	8009d4a <_malloc_r+0xea>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	4639      	mov	r1, r7
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	eb04 0903 	add.w	r9, r4, r3
 8009cbc:	f001 f8c4 	bl	800ae48 <_sbrk_r>
 8009cc0:	4581      	cmp	r9, r0
 8009cc2:	d142      	bne.n	8009d4a <_malloc_r+0xea>
 8009cc4:	6821      	ldr	r1, [r4, #0]
 8009cc6:	4630      	mov	r0, r6
 8009cc8:	1a6d      	subs	r5, r5, r1
 8009cca:	4629      	mov	r1, r5
 8009ccc:	f7ff ffa6 	bl	8009c1c <sbrk_aligned>
 8009cd0:	3001      	adds	r0, #1
 8009cd2:	d03a      	beq.n	8009d4a <_malloc_r+0xea>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	442b      	add	r3, r5
 8009cd8:	6023      	str	r3, [r4, #0]
 8009cda:	f8d8 3000 	ldr.w	r3, [r8]
 8009cde:	685a      	ldr	r2, [r3, #4]
 8009ce0:	bb62      	cbnz	r2, 8009d3c <_malloc_r+0xdc>
 8009ce2:	f8c8 7000 	str.w	r7, [r8]
 8009ce6:	e00f      	b.n	8009d08 <_malloc_r+0xa8>
 8009ce8:	6822      	ldr	r2, [r4, #0]
 8009cea:	1b52      	subs	r2, r2, r5
 8009cec:	d420      	bmi.n	8009d30 <_malloc_r+0xd0>
 8009cee:	2a0b      	cmp	r2, #11
 8009cf0:	d917      	bls.n	8009d22 <_malloc_r+0xc2>
 8009cf2:	1961      	adds	r1, r4, r5
 8009cf4:	42a3      	cmp	r3, r4
 8009cf6:	6025      	str	r5, [r4, #0]
 8009cf8:	bf18      	it	ne
 8009cfa:	6059      	strne	r1, [r3, #4]
 8009cfc:	6863      	ldr	r3, [r4, #4]
 8009cfe:	bf08      	it	eq
 8009d00:	f8c8 1000 	streq.w	r1, [r8]
 8009d04:	5162      	str	r2, [r4, r5]
 8009d06:	604b      	str	r3, [r1, #4]
 8009d08:	4630      	mov	r0, r6
 8009d0a:	f000 f841 	bl	8009d90 <__malloc_unlock>
 8009d0e:	f104 000b 	add.w	r0, r4, #11
 8009d12:	1d23      	adds	r3, r4, #4
 8009d14:	f020 0007 	bic.w	r0, r0, #7
 8009d18:	1ac2      	subs	r2, r0, r3
 8009d1a:	bf1c      	itt	ne
 8009d1c:	1a1b      	subne	r3, r3, r0
 8009d1e:	50a3      	strne	r3, [r4, r2]
 8009d20:	e7af      	b.n	8009c82 <_malloc_r+0x22>
 8009d22:	6862      	ldr	r2, [r4, #4]
 8009d24:	42a3      	cmp	r3, r4
 8009d26:	bf0c      	ite	eq
 8009d28:	f8c8 2000 	streq.w	r2, [r8]
 8009d2c:	605a      	strne	r2, [r3, #4]
 8009d2e:	e7eb      	b.n	8009d08 <_malloc_r+0xa8>
 8009d30:	4623      	mov	r3, r4
 8009d32:	6864      	ldr	r4, [r4, #4]
 8009d34:	e7ae      	b.n	8009c94 <_malloc_r+0x34>
 8009d36:	463c      	mov	r4, r7
 8009d38:	687f      	ldr	r7, [r7, #4]
 8009d3a:	e7b6      	b.n	8009caa <_malloc_r+0x4a>
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	42a3      	cmp	r3, r4
 8009d42:	d1fb      	bne.n	8009d3c <_malloc_r+0xdc>
 8009d44:	2300      	movs	r3, #0
 8009d46:	6053      	str	r3, [r2, #4]
 8009d48:	e7de      	b.n	8009d08 <_malloc_r+0xa8>
 8009d4a:	230c      	movs	r3, #12
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	6033      	str	r3, [r6, #0]
 8009d50:	f000 f81e 	bl	8009d90 <__malloc_unlock>
 8009d54:	e794      	b.n	8009c80 <_malloc_r+0x20>
 8009d56:	6005      	str	r5, [r0, #0]
 8009d58:	e7d6      	b.n	8009d08 <_malloc_r+0xa8>
 8009d5a:	bf00      	nop
 8009d5c:	2000211c 	.word	0x2000211c

08009d60 <__ascii_mbtowc>:
 8009d60:	b082      	sub	sp, #8
 8009d62:	b901      	cbnz	r1, 8009d66 <__ascii_mbtowc+0x6>
 8009d64:	a901      	add	r1, sp, #4
 8009d66:	b142      	cbz	r2, 8009d7a <__ascii_mbtowc+0x1a>
 8009d68:	b14b      	cbz	r3, 8009d7e <__ascii_mbtowc+0x1e>
 8009d6a:	7813      	ldrb	r3, [r2, #0]
 8009d6c:	600b      	str	r3, [r1, #0]
 8009d6e:	7812      	ldrb	r2, [r2, #0]
 8009d70:	1e10      	subs	r0, r2, #0
 8009d72:	bf18      	it	ne
 8009d74:	2001      	movne	r0, #1
 8009d76:	b002      	add	sp, #8
 8009d78:	4770      	bx	lr
 8009d7a:	4610      	mov	r0, r2
 8009d7c:	e7fb      	b.n	8009d76 <__ascii_mbtowc+0x16>
 8009d7e:	f06f 0001 	mvn.w	r0, #1
 8009d82:	e7f8      	b.n	8009d76 <__ascii_mbtowc+0x16>

08009d84 <__malloc_lock>:
 8009d84:	4801      	ldr	r0, [pc, #4]	@ (8009d8c <__malloc_lock+0x8>)
 8009d86:	f7ff bbb0 	b.w	80094ea <__retarget_lock_acquire_recursive>
 8009d8a:	bf00      	nop
 8009d8c:	20002114 	.word	0x20002114

08009d90 <__malloc_unlock>:
 8009d90:	4801      	ldr	r0, [pc, #4]	@ (8009d98 <__malloc_unlock+0x8>)
 8009d92:	f7ff bbab 	b.w	80094ec <__retarget_lock_release_recursive>
 8009d96:	bf00      	nop
 8009d98:	20002114 	.word	0x20002114

08009d9c <_Balloc>:
 8009d9c:	b570      	push	{r4, r5, r6, lr}
 8009d9e:	69c6      	ldr	r6, [r0, #28]
 8009da0:	4604      	mov	r4, r0
 8009da2:	460d      	mov	r5, r1
 8009da4:	b976      	cbnz	r6, 8009dc4 <_Balloc+0x28>
 8009da6:	2010      	movs	r0, #16
 8009da8:	f001 f89e 	bl	800aee8 <malloc>
 8009dac:	4602      	mov	r2, r0
 8009dae:	61e0      	str	r0, [r4, #28]
 8009db0:	b920      	cbnz	r0, 8009dbc <_Balloc+0x20>
 8009db2:	216b      	movs	r1, #107	@ 0x6b
 8009db4:	4b17      	ldr	r3, [pc, #92]	@ (8009e14 <_Balloc+0x78>)
 8009db6:	4818      	ldr	r0, [pc, #96]	@ (8009e18 <_Balloc+0x7c>)
 8009db8:	f001 f864 	bl	800ae84 <__assert_func>
 8009dbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dc0:	6006      	str	r6, [r0, #0]
 8009dc2:	60c6      	str	r6, [r0, #12]
 8009dc4:	69e6      	ldr	r6, [r4, #28]
 8009dc6:	68f3      	ldr	r3, [r6, #12]
 8009dc8:	b183      	cbz	r3, 8009dec <_Balloc+0x50>
 8009dca:	69e3      	ldr	r3, [r4, #28]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009dd2:	b9b8      	cbnz	r0, 8009e04 <_Balloc+0x68>
 8009dd4:	2101      	movs	r1, #1
 8009dd6:	fa01 f605 	lsl.w	r6, r1, r5
 8009dda:	1d72      	adds	r2, r6, #5
 8009ddc:	4620      	mov	r0, r4
 8009dde:	0092      	lsls	r2, r2, #2
 8009de0:	f001 f86e 	bl	800aec0 <_calloc_r>
 8009de4:	b160      	cbz	r0, 8009e00 <_Balloc+0x64>
 8009de6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009dea:	e00e      	b.n	8009e0a <_Balloc+0x6e>
 8009dec:	2221      	movs	r2, #33	@ 0x21
 8009dee:	2104      	movs	r1, #4
 8009df0:	4620      	mov	r0, r4
 8009df2:	f001 f865 	bl	800aec0 <_calloc_r>
 8009df6:	69e3      	ldr	r3, [r4, #28]
 8009df8:	60f0      	str	r0, [r6, #12]
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d1e4      	bne.n	8009dca <_Balloc+0x2e>
 8009e00:	2000      	movs	r0, #0
 8009e02:	bd70      	pop	{r4, r5, r6, pc}
 8009e04:	6802      	ldr	r2, [r0, #0]
 8009e06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e10:	e7f7      	b.n	8009e02 <_Balloc+0x66>
 8009e12:	bf00      	nop
 8009e14:	0800c65d 	.word	0x0800c65d
 8009e18:	0800c674 	.word	0x0800c674

08009e1c <_Bfree>:
 8009e1c:	b570      	push	{r4, r5, r6, lr}
 8009e1e:	69c6      	ldr	r6, [r0, #28]
 8009e20:	4605      	mov	r5, r0
 8009e22:	460c      	mov	r4, r1
 8009e24:	b976      	cbnz	r6, 8009e44 <_Bfree+0x28>
 8009e26:	2010      	movs	r0, #16
 8009e28:	f001 f85e 	bl	800aee8 <malloc>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	61e8      	str	r0, [r5, #28]
 8009e30:	b920      	cbnz	r0, 8009e3c <_Bfree+0x20>
 8009e32:	218f      	movs	r1, #143	@ 0x8f
 8009e34:	4b08      	ldr	r3, [pc, #32]	@ (8009e58 <_Bfree+0x3c>)
 8009e36:	4809      	ldr	r0, [pc, #36]	@ (8009e5c <_Bfree+0x40>)
 8009e38:	f001 f824 	bl	800ae84 <__assert_func>
 8009e3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e40:	6006      	str	r6, [r0, #0]
 8009e42:	60c6      	str	r6, [r0, #12]
 8009e44:	b13c      	cbz	r4, 8009e56 <_Bfree+0x3a>
 8009e46:	69eb      	ldr	r3, [r5, #28]
 8009e48:	6862      	ldr	r2, [r4, #4]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e50:	6021      	str	r1, [r4, #0]
 8009e52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e56:	bd70      	pop	{r4, r5, r6, pc}
 8009e58:	0800c65d 	.word	0x0800c65d
 8009e5c:	0800c674 	.word	0x0800c674

08009e60 <__multadd>:
 8009e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e64:	4607      	mov	r7, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	461e      	mov	r6, r3
 8009e6a:	2000      	movs	r0, #0
 8009e6c:	690d      	ldr	r5, [r1, #16]
 8009e6e:	f101 0c14 	add.w	ip, r1, #20
 8009e72:	f8dc 3000 	ldr.w	r3, [ip]
 8009e76:	3001      	adds	r0, #1
 8009e78:	b299      	uxth	r1, r3
 8009e7a:	fb02 6101 	mla	r1, r2, r1, r6
 8009e7e:	0c1e      	lsrs	r6, r3, #16
 8009e80:	0c0b      	lsrs	r3, r1, #16
 8009e82:	fb02 3306 	mla	r3, r2, r6, r3
 8009e86:	b289      	uxth	r1, r1
 8009e88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e8c:	4285      	cmp	r5, r0
 8009e8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e92:	f84c 1b04 	str.w	r1, [ip], #4
 8009e96:	dcec      	bgt.n	8009e72 <__multadd+0x12>
 8009e98:	b30e      	cbz	r6, 8009ede <__multadd+0x7e>
 8009e9a:	68a3      	ldr	r3, [r4, #8]
 8009e9c:	42ab      	cmp	r3, r5
 8009e9e:	dc19      	bgt.n	8009ed4 <__multadd+0x74>
 8009ea0:	6861      	ldr	r1, [r4, #4]
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	3101      	adds	r1, #1
 8009ea6:	f7ff ff79 	bl	8009d9c <_Balloc>
 8009eaa:	4680      	mov	r8, r0
 8009eac:	b928      	cbnz	r0, 8009eba <__multadd+0x5a>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	21ba      	movs	r1, #186	@ 0xba
 8009eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee4 <__multadd+0x84>)
 8009eb4:	480c      	ldr	r0, [pc, #48]	@ (8009ee8 <__multadd+0x88>)
 8009eb6:	f000 ffe5 	bl	800ae84 <__assert_func>
 8009eba:	6922      	ldr	r2, [r4, #16]
 8009ebc:	f104 010c 	add.w	r1, r4, #12
 8009ec0:	3202      	adds	r2, #2
 8009ec2:	0092      	lsls	r2, r2, #2
 8009ec4:	300c      	adds	r0, #12
 8009ec6:	f7ff fb12 	bl	80094ee <memcpy>
 8009eca:	4621      	mov	r1, r4
 8009ecc:	4638      	mov	r0, r7
 8009ece:	f7ff ffa5 	bl	8009e1c <_Bfree>
 8009ed2:	4644      	mov	r4, r8
 8009ed4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009ed8:	3501      	adds	r5, #1
 8009eda:	615e      	str	r6, [r3, #20]
 8009edc:	6125      	str	r5, [r4, #16]
 8009ede:	4620      	mov	r0, r4
 8009ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee4:	0800c5ec 	.word	0x0800c5ec
 8009ee8:	0800c674 	.word	0x0800c674

08009eec <__s2b>:
 8009eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ef0:	4615      	mov	r5, r2
 8009ef2:	2209      	movs	r2, #9
 8009ef4:	461f      	mov	r7, r3
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	460c      	mov	r4, r1
 8009efa:	fb93 f3f2 	sdiv	r3, r3, r2
 8009efe:	4606      	mov	r6, r0
 8009f00:	2201      	movs	r2, #1
 8009f02:	2100      	movs	r1, #0
 8009f04:	429a      	cmp	r2, r3
 8009f06:	db09      	blt.n	8009f1c <__s2b+0x30>
 8009f08:	4630      	mov	r0, r6
 8009f0a:	f7ff ff47 	bl	8009d9c <_Balloc>
 8009f0e:	b940      	cbnz	r0, 8009f22 <__s2b+0x36>
 8009f10:	4602      	mov	r2, r0
 8009f12:	21d3      	movs	r1, #211	@ 0xd3
 8009f14:	4b18      	ldr	r3, [pc, #96]	@ (8009f78 <__s2b+0x8c>)
 8009f16:	4819      	ldr	r0, [pc, #100]	@ (8009f7c <__s2b+0x90>)
 8009f18:	f000 ffb4 	bl	800ae84 <__assert_func>
 8009f1c:	0052      	lsls	r2, r2, #1
 8009f1e:	3101      	adds	r1, #1
 8009f20:	e7f0      	b.n	8009f04 <__s2b+0x18>
 8009f22:	9b08      	ldr	r3, [sp, #32]
 8009f24:	2d09      	cmp	r5, #9
 8009f26:	6143      	str	r3, [r0, #20]
 8009f28:	f04f 0301 	mov.w	r3, #1
 8009f2c:	6103      	str	r3, [r0, #16]
 8009f2e:	dd16      	ble.n	8009f5e <__s2b+0x72>
 8009f30:	f104 0909 	add.w	r9, r4, #9
 8009f34:	46c8      	mov	r8, r9
 8009f36:	442c      	add	r4, r5
 8009f38:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f3c:	4601      	mov	r1, r0
 8009f3e:	220a      	movs	r2, #10
 8009f40:	4630      	mov	r0, r6
 8009f42:	3b30      	subs	r3, #48	@ 0x30
 8009f44:	f7ff ff8c 	bl	8009e60 <__multadd>
 8009f48:	45a0      	cmp	r8, r4
 8009f4a:	d1f5      	bne.n	8009f38 <__s2b+0x4c>
 8009f4c:	f1a5 0408 	sub.w	r4, r5, #8
 8009f50:	444c      	add	r4, r9
 8009f52:	1b2d      	subs	r5, r5, r4
 8009f54:	1963      	adds	r3, r4, r5
 8009f56:	42bb      	cmp	r3, r7
 8009f58:	db04      	blt.n	8009f64 <__s2b+0x78>
 8009f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f5e:	2509      	movs	r5, #9
 8009f60:	340a      	adds	r4, #10
 8009f62:	e7f6      	b.n	8009f52 <__s2b+0x66>
 8009f64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f68:	4601      	mov	r1, r0
 8009f6a:	220a      	movs	r2, #10
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	3b30      	subs	r3, #48	@ 0x30
 8009f70:	f7ff ff76 	bl	8009e60 <__multadd>
 8009f74:	e7ee      	b.n	8009f54 <__s2b+0x68>
 8009f76:	bf00      	nop
 8009f78:	0800c5ec 	.word	0x0800c5ec
 8009f7c:	0800c674 	.word	0x0800c674

08009f80 <__hi0bits>:
 8009f80:	4603      	mov	r3, r0
 8009f82:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f86:	bf3a      	itte	cc
 8009f88:	0403      	lslcc	r3, r0, #16
 8009f8a:	2010      	movcc	r0, #16
 8009f8c:	2000      	movcs	r0, #0
 8009f8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f92:	bf3c      	itt	cc
 8009f94:	021b      	lslcc	r3, r3, #8
 8009f96:	3008      	addcc	r0, #8
 8009f98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f9c:	bf3c      	itt	cc
 8009f9e:	011b      	lslcc	r3, r3, #4
 8009fa0:	3004      	addcc	r0, #4
 8009fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fa6:	bf3c      	itt	cc
 8009fa8:	009b      	lslcc	r3, r3, #2
 8009faa:	3002      	addcc	r0, #2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	db05      	blt.n	8009fbc <__hi0bits+0x3c>
 8009fb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009fb4:	f100 0001 	add.w	r0, r0, #1
 8009fb8:	bf08      	it	eq
 8009fba:	2020      	moveq	r0, #32
 8009fbc:	4770      	bx	lr

08009fbe <__lo0bits>:
 8009fbe:	6803      	ldr	r3, [r0, #0]
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	f013 0007 	ands.w	r0, r3, #7
 8009fc6:	d00b      	beq.n	8009fe0 <__lo0bits+0x22>
 8009fc8:	07d9      	lsls	r1, r3, #31
 8009fca:	d421      	bmi.n	800a010 <__lo0bits+0x52>
 8009fcc:	0798      	lsls	r0, r3, #30
 8009fce:	bf49      	itett	mi
 8009fd0:	085b      	lsrmi	r3, r3, #1
 8009fd2:	089b      	lsrpl	r3, r3, #2
 8009fd4:	2001      	movmi	r0, #1
 8009fd6:	6013      	strmi	r3, [r2, #0]
 8009fd8:	bf5c      	itt	pl
 8009fda:	2002      	movpl	r0, #2
 8009fdc:	6013      	strpl	r3, [r2, #0]
 8009fde:	4770      	bx	lr
 8009fe0:	b299      	uxth	r1, r3
 8009fe2:	b909      	cbnz	r1, 8009fe8 <__lo0bits+0x2a>
 8009fe4:	2010      	movs	r0, #16
 8009fe6:	0c1b      	lsrs	r3, r3, #16
 8009fe8:	b2d9      	uxtb	r1, r3
 8009fea:	b909      	cbnz	r1, 8009ff0 <__lo0bits+0x32>
 8009fec:	3008      	adds	r0, #8
 8009fee:	0a1b      	lsrs	r3, r3, #8
 8009ff0:	0719      	lsls	r1, r3, #28
 8009ff2:	bf04      	itt	eq
 8009ff4:	091b      	lsreq	r3, r3, #4
 8009ff6:	3004      	addeq	r0, #4
 8009ff8:	0799      	lsls	r1, r3, #30
 8009ffa:	bf04      	itt	eq
 8009ffc:	089b      	lsreq	r3, r3, #2
 8009ffe:	3002      	addeq	r0, #2
 800a000:	07d9      	lsls	r1, r3, #31
 800a002:	d403      	bmi.n	800a00c <__lo0bits+0x4e>
 800a004:	085b      	lsrs	r3, r3, #1
 800a006:	f100 0001 	add.w	r0, r0, #1
 800a00a:	d003      	beq.n	800a014 <__lo0bits+0x56>
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	4770      	bx	lr
 800a010:	2000      	movs	r0, #0
 800a012:	4770      	bx	lr
 800a014:	2020      	movs	r0, #32
 800a016:	4770      	bx	lr

0800a018 <__i2b>:
 800a018:	b510      	push	{r4, lr}
 800a01a:	460c      	mov	r4, r1
 800a01c:	2101      	movs	r1, #1
 800a01e:	f7ff febd 	bl	8009d9c <_Balloc>
 800a022:	4602      	mov	r2, r0
 800a024:	b928      	cbnz	r0, 800a032 <__i2b+0x1a>
 800a026:	f240 1145 	movw	r1, #325	@ 0x145
 800a02a:	4b04      	ldr	r3, [pc, #16]	@ (800a03c <__i2b+0x24>)
 800a02c:	4804      	ldr	r0, [pc, #16]	@ (800a040 <__i2b+0x28>)
 800a02e:	f000 ff29 	bl	800ae84 <__assert_func>
 800a032:	2301      	movs	r3, #1
 800a034:	6144      	str	r4, [r0, #20]
 800a036:	6103      	str	r3, [r0, #16]
 800a038:	bd10      	pop	{r4, pc}
 800a03a:	bf00      	nop
 800a03c:	0800c5ec 	.word	0x0800c5ec
 800a040:	0800c674 	.word	0x0800c674

0800a044 <__multiply>:
 800a044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	4617      	mov	r7, r2
 800a04a:	690a      	ldr	r2, [r1, #16]
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	4689      	mov	r9, r1
 800a050:	429a      	cmp	r2, r3
 800a052:	bfa2      	ittt	ge
 800a054:	463b      	movge	r3, r7
 800a056:	460f      	movge	r7, r1
 800a058:	4699      	movge	r9, r3
 800a05a:	693d      	ldr	r5, [r7, #16]
 800a05c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	6879      	ldr	r1, [r7, #4]
 800a064:	eb05 060a 	add.w	r6, r5, sl
 800a068:	42b3      	cmp	r3, r6
 800a06a:	b085      	sub	sp, #20
 800a06c:	bfb8      	it	lt
 800a06e:	3101      	addlt	r1, #1
 800a070:	f7ff fe94 	bl	8009d9c <_Balloc>
 800a074:	b930      	cbnz	r0, 800a084 <__multiply+0x40>
 800a076:	4602      	mov	r2, r0
 800a078:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a07c:	4b40      	ldr	r3, [pc, #256]	@ (800a180 <__multiply+0x13c>)
 800a07e:	4841      	ldr	r0, [pc, #260]	@ (800a184 <__multiply+0x140>)
 800a080:	f000 ff00 	bl	800ae84 <__assert_func>
 800a084:	f100 0414 	add.w	r4, r0, #20
 800a088:	4623      	mov	r3, r4
 800a08a:	2200      	movs	r2, #0
 800a08c:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a090:	4573      	cmp	r3, lr
 800a092:	d320      	bcc.n	800a0d6 <__multiply+0x92>
 800a094:	f107 0814 	add.w	r8, r7, #20
 800a098:	f109 0114 	add.w	r1, r9, #20
 800a09c:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a0a0:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a0a4:	9302      	str	r3, [sp, #8]
 800a0a6:	1beb      	subs	r3, r5, r7
 800a0a8:	3b15      	subs	r3, #21
 800a0aa:	f023 0303 	bic.w	r3, r3, #3
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	3715      	adds	r7, #21
 800a0b2:	42bd      	cmp	r5, r7
 800a0b4:	bf38      	it	cc
 800a0b6:	2304      	movcc	r3, #4
 800a0b8:	9301      	str	r3, [sp, #4]
 800a0ba:	9b02      	ldr	r3, [sp, #8]
 800a0bc:	9103      	str	r1, [sp, #12]
 800a0be:	428b      	cmp	r3, r1
 800a0c0:	d80c      	bhi.n	800a0dc <__multiply+0x98>
 800a0c2:	2e00      	cmp	r6, #0
 800a0c4:	dd03      	ble.n	800a0ce <__multiply+0x8a>
 800a0c6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d055      	beq.n	800a17a <__multiply+0x136>
 800a0ce:	6106      	str	r6, [r0, #16]
 800a0d0:	b005      	add	sp, #20
 800a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d6:	f843 2b04 	str.w	r2, [r3], #4
 800a0da:	e7d9      	b.n	800a090 <__multiply+0x4c>
 800a0dc:	f8b1 a000 	ldrh.w	sl, [r1]
 800a0e0:	f1ba 0f00 	cmp.w	sl, #0
 800a0e4:	d01f      	beq.n	800a126 <__multiply+0xe2>
 800a0e6:	46c4      	mov	ip, r8
 800a0e8:	46a1      	mov	r9, r4
 800a0ea:	2700      	movs	r7, #0
 800a0ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0f0:	f8d9 3000 	ldr.w	r3, [r9]
 800a0f4:	fa1f fb82 	uxth.w	fp, r2
 800a0f8:	b29b      	uxth	r3, r3
 800a0fa:	fb0a 330b 	mla	r3, sl, fp, r3
 800a0fe:	443b      	add	r3, r7
 800a100:	f8d9 7000 	ldr.w	r7, [r9]
 800a104:	0c12      	lsrs	r2, r2, #16
 800a106:	0c3f      	lsrs	r7, r7, #16
 800a108:	fb0a 7202 	mla	r2, sl, r2, r7
 800a10c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a110:	b29b      	uxth	r3, r3
 800a112:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a116:	4565      	cmp	r5, ip
 800a118:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a11c:	f849 3b04 	str.w	r3, [r9], #4
 800a120:	d8e4      	bhi.n	800a0ec <__multiply+0xa8>
 800a122:	9b01      	ldr	r3, [sp, #4]
 800a124:	50e7      	str	r7, [r4, r3]
 800a126:	9b03      	ldr	r3, [sp, #12]
 800a128:	3104      	adds	r1, #4
 800a12a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a12e:	f1b9 0f00 	cmp.w	r9, #0
 800a132:	d020      	beq.n	800a176 <__multiply+0x132>
 800a134:	4647      	mov	r7, r8
 800a136:	46a4      	mov	ip, r4
 800a138:	f04f 0a00 	mov.w	sl, #0
 800a13c:	6823      	ldr	r3, [r4, #0]
 800a13e:	f8b7 b000 	ldrh.w	fp, [r7]
 800a142:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a146:	b29b      	uxth	r3, r3
 800a148:	fb09 220b 	mla	r2, r9, fp, r2
 800a14c:	4452      	add	r2, sl
 800a14e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a152:	f84c 3b04 	str.w	r3, [ip], #4
 800a156:	f857 3b04 	ldr.w	r3, [r7], #4
 800a15a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a15e:	f8bc 3000 	ldrh.w	r3, [ip]
 800a162:	42bd      	cmp	r5, r7
 800a164:	fb09 330a 	mla	r3, r9, sl, r3
 800a168:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a16c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a170:	d8e5      	bhi.n	800a13e <__multiply+0xfa>
 800a172:	9a01      	ldr	r2, [sp, #4]
 800a174:	50a3      	str	r3, [r4, r2]
 800a176:	3404      	adds	r4, #4
 800a178:	e79f      	b.n	800a0ba <__multiply+0x76>
 800a17a:	3e01      	subs	r6, #1
 800a17c:	e7a1      	b.n	800a0c2 <__multiply+0x7e>
 800a17e:	bf00      	nop
 800a180:	0800c5ec 	.word	0x0800c5ec
 800a184:	0800c674 	.word	0x0800c674

0800a188 <__pow5mult>:
 800a188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a18c:	4615      	mov	r5, r2
 800a18e:	f012 0203 	ands.w	r2, r2, #3
 800a192:	4607      	mov	r7, r0
 800a194:	460e      	mov	r6, r1
 800a196:	d007      	beq.n	800a1a8 <__pow5mult+0x20>
 800a198:	4c25      	ldr	r4, [pc, #148]	@ (800a230 <__pow5mult+0xa8>)
 800a19a:	3a01      	subs	r2, #1
 800a19c:	2300      	movs	r3, #0
 800a19e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1a2:	f7ff fe5d 	bl	8009e60 <__multadd>
 800a1a6:	4606      	mov	r6, r0
 800a1a8:	10ad      	asrs	r5, r5, #2
 800a1aa:	d03d      	beq.n	800a228 <__pow5mult+0xa0>
 800a1ac:	69fc      	ldr	r4, [r7, #28]
 800a1ae:	b97c      	cbnz	r4, 800a1d0 <__pow5mult+0x48>
 800a1b0:	2010      	movs	r0, #16
 800a1b2:	f000 fe99 	bl	800aee8 <malloc>
 800a1b6:	4602      	mov	r2, r0
 800a1b8:	61f8      	str	r0, [r7, #28]
 800a1ba:	b928      	cbnz	r0, 800a1c8 <__pow5mult+0x40>
 800a1bc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a1c0:	4b1c      	ldr	r3, [pc, #112]	@ (800a234 <__pow5mult+0xac>)
 800a1c2:	481d      	ldr	r0, [pc, #116]	@ (800a238 <__pow5mult+0xb0>)
 800a1c4:	f000 fe5e 	bl	800ae84 <__assert_func>
 800a1c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a1cc:	6004      	str	r4, [r0, #0]
 800a1ce:	60c4      	str	r4, [r0, #12]
 800a1d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a1d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a1d8:	b94c      	cbnz	r4, 800a1ee <__pow5mult+0x66>
 800a1da:	f240 2171 	movw	r1, #625	@ 0x271
 800a1de:	4638      	mov	r0, r7
 800a1e0:	f7ff ff1a 	bl	800a018 <__i2b>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	4604      	mov	r4, r0
 800a1e8:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1ec:	6003      	str	r3, [r0, #0]
 800a1ee:	f04f 0900 	mov.w	r9, #0
 800a1f2:	07eb      	lsls	r3, r5, #31
 800a1f4:	d50a      	bpl.n	800a20c <__pow5mult+0x84>
 800a1f6:	4631      	mov	r1, r6
 800a1f8:	4622      	mov	r2, r4
 800a1fa:	4638      	mov	r0, r7
 800a1fc:	f7ff ff22 	bl	800a044 <__multiply>
 800a200:	4680      	mov	r8, r0
 800a202:	4631      	mov	r1, r6
 800a204:	4638      	mov	r0, r7
 800a206:	f7ff fe09 	bl	8009e1c <_Bfree>
 800a20a:	4646      	mov	r6, r8
 800a20c:	106d      	asrs	r5, r5, #1
 800a20e:	d00b      	beq.n	800a228 <__pow5mult+0xa0>
 800a210:	6820      	ldr	r0, [r4, #0]
 800a212:	b938      	cbnz	r0, 800a224 <__pow5mult+0x9c>
 800a214:	4622      	mov	r2, r4
 800a216:	4621      	mov	r1, r4
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff ff13 	bl	800a044 <__multiply>
 800a21e:	6020      	str	r0, [r4, #0]
 800a220:	f8c0 9000 	str.w	r9, [r0]
 800a224:	4604      	mov	r4, r0
 800a226:	e7e4      	b.n	800a1f2 <__pow5mult+0x6a>
 800a228:	4630      	mov	r0, r6
 800a22a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a22e:	bf00      	nop
 800a230:	0800c914 	.word	0x0800c914
 800a234:	0800c65d 	.word	0x0800c65d
 800a238:	0800c674 	.word	0x0800c674

0800a23c <__lshift>:
 800a23c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a240:	460c      	mov	r4, r1
 800a242:	4607      	mov	r7, r0
 800a244:	4691      	mov	r9, r2
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	6849      	ldr	r1, [r1, #4]
 800a24a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a24e:	68a3      	ldr	r3, [r4, #8]
 800a250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a254:	f108 0601 	add.w	r6, r8, #1
 800a258:	42b3      	cmp	r3, r6
 800a25a:	db0b      	blt.n	800a274 <__lshift+0x38>
 800a25c:	4638      	mov	r0, r7
 800a25e:	f7ff fd9d 	bl	8009d9c <_Balloc>
 800a262:	4605      	mov	r5, r0
 800a264:	b948      	cbnz	r0, 800a27a <__lshift+0x3e>
 800a266:	4602      	mov	r2, r0
 800a268:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a26c:	4b27      	ldr	r3, [pc, #156]	@ (800a30c <__lshift+0xd0>)
 800a26e:	4828      	ldr	r0, [pc, #160]	@ (800a310 <__lshift+0xd4>)
 800a270:	f000 fe08 	bl	800ae84 <__assert_func>
 800a274:	3101      	adds	r1, #1
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	e7ee      	b.n	800a258 <__lshift+0x1c>
 800a27a:	2300      	movs	r3, #0
 800a27c:	f100 0114 	add.w	r1, r0, #20
 800a280:	f100 0210 	add.w	r2, r0, #16
 800a284:	4618      	mov	r0, r3
 800a286:	4553      	cmp	r3, sl
 800a288:	db33      	blt.n	800a2f2 <__lshift+0xb6>
 800a28a:	6920      	ldr	r0, [r4, #16]
 800a28c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a290:	f104 0314 	add.w	r3, r4, #20
 800a294:	f019 091f 	ands.w	r9, r9, #31
 800a298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a29c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2a0:	d02b      	beq.n	800a2fa <__lshift+0xbe>
 800a2a2:	468a      	mov	sl, r1
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f1c9 0e20 	rsb	lr, r9, #32
 800a2aa:	6818      	ldr	r0, [r3, #0]
 800a2ac:	fa00 f009 	lsl.w	r0, r0, r9
 800a2b0:	4310      	orrs	r0, r2
 800a2b2:	f84a 0b04 	str.w	r0, [sl], #4
 800a2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ba:	459c      	cmp	ip, r3
 800a2bc:	fa22 f20e 	lsr.w	r2, r2, lr
 800a2c0:	d8f3      	bhi.n	800a2aa <__lshift+0x6e>
 800a2c2:	ebac 0304 	sub.w	r3, ip, r4
 800a2c6:	3b15      	subs	r3, #21
 800a2c8:	f023 0303 	bic.w	r3, r3, #3
 800a2cc:	3304      	adds	r3, #4
 800a2ce:	f104 0015 	add.w	r0, r4, #21
 800a2d2:	4560      	cmp	r0, ip
 800a2d4:	bf88      	it	hi
 800a2d6:	2304      	movhi	r3, #4
 800a2d8:	50ca      	str	r2, [r1, r3]
 800a2da:	b10a      	cbz	r2, 800a2e0 <__lshift+0xa4>
 800a2dc:	f108 0602 	add.w	r6, r8, #2
 800a2e0:	3e01      	subs	r6, #1
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	4621      	mov	r1, r4
 800a2e6:	612e      	str	r6, [r5, #16]
 800a2e8:	f7ff fd98 	bl	8009e1c <_Bfree>
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2f6:	3301      	adds	r3, #1
 800a2f8:	e7c5      	b.n	800a286 <__lshift+0x4a>
 800a2fa:	3904      	subs	r1, #4
 800a2fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800a300:	459c      	cmp	ip, r3
 800a302:	f841 2f04 	str.w	r2, [r1, #4]!
 800a306:	d8f9      	bhi.n	800a2fc <__lshift+0xc0>
 800a308:	e7ea      	b.n	800a2e0 <__lshift+0xa4>
 800a30a:	bf00      	nop
 800a30c:	0800c5ec 	.word	0x0800c5ec
 800a310:	0800c674 	.word	0x0800c674

0800a314 <__mcmp>:
 800a314:	4603      	mov	r3, r0
 800a316:	690a      	ldr	r2, [r1, #16]
 800a318:	6900      	ldr	r0, [r0, #16]
 800a31a:	b530      	push	{r4, r5, lr}
 800a31c:	1a80      	subs	r0, r0, r2
 800a31e:	d10e      	bne.n	800a33e <__mcmp+0x2a>
 800a320:	3314      	adds	r3, #20
 800a322:	3114      	adds	r1, #20
 800a324:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a328:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a32c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a330:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a334:	4295      	cmp	r5, r2
 800a336:	d003      	beq.n	800a340 <__mcmp+0x2c>
 800a338:	d205      	bcs.n	800a346 <__mcmp+0x32>
 800a33a:	f04f 30ff 	mov.w	r0, #4294967295
 800a33e:	bd30      	pop	{r4, r5, pc}
 800a340:	42a3      	cmp	r3, r4
 800a342:	d3f3      	bcc.n	800a32c <__mcmp+0x18>
 800a344:	e7fb      	b.n	800a33e <__mcmp+0x2a>
 800a346:	2001      	movs	r0, #1
 800a348:	e7f9      	b.n	800a33e <__mcmp+0x2a>
	...

0800a34c <__mdiff>:
 800a34c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a350:	4689      	mov	r9, r1
 800a352:	4606      	mov	r6, r0
 800a354:	4611      	mov	r1, r2
 800a356:	4648      	mov	r0, r9
 800a358:	4614      	mov	r4, r2
 800a35a:	f7ff ffdb 	bl	800a314 <__mcmp>
 800a35e:	1e05      	subs	r5, r0, #0
 800a360:	d112      	bne.n	800a388 <__mdiff+0x3c>
 800a362:	4629      	mov	r1, r5
 800a364:	4630      	mov	r0, r6
 800a366:	f7ff fd19 	bl	8009d9c <_Balloc>
 800a36a:	4602      	mov	r2, r0
 800a36c:	b928      	cbnz	r0, 800a37a <__mdiff+0x2e>
 800a36e:	f240 2137 	movw	r1, #567	@ 0x237
 800a372:	4b3e      	ldr	r3, [pc, #248]	@ (800a46c <__mdiff+0x120>)
 800a374:	483e      	ldr	r0, [pc, #248]	@ (800a470 <__mdiff+0x124>)
 800a376:	f000 fd85 	bl	800ae84 <__assert_func>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a380:	4610      	mov	r0, r2
 800a382:	b003      	add	sp, #12
 800a384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a388:	bfbc      	itt	lt
 800a38a:	464b      	movlt	r3, r9
 800a38c:	46a1      	movlt	r9, r4
 800a38e:	4630      	mov	r0, r6
 800a390:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a394:	bfba      	itte	lt
 800a396:	461c      	movlt	r4, r3
 800a398:	2501      	movlt	r5, #1
 800a39a:	2500      	movge	r5, #0
 800a39c:	f7ff fcfe 	bl	8009d9c <_Balloc>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	b918      	cbnz	r0, 800a3ac <__mdiff+0x60>
 800a3a4:	f240 2145 	movw	r1, #581	@ 0x245
 800a3a8:	4b30      	ldr	r3, [pc, #192]	@ (800a46c <__mdiff+0x120>)
 800a3aa:	e7e3      	b.n	800a374 <__mdiff+0x28>
 800a3ac:	f100 0b14 	add.w	fp, r0, #20
 800a3b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a3b4:	f109 0310 	add.w	r3, r9, #16
 800a3b8:	60c5      	str	r5, [r0, #12]
 800a3ba:	f04f 0c00 	mov.w	ip, #0
 800a3be:	f109 0514 	add.w	r5, r9, #20
 800a3c2:	46d9      	mov	r9, fp
 800a3c4:	6926      	ldr	r6, [r4, #16]
 800a3c6:	f104 0e14 	add.w	lr, r4, #20
 800a3ca:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a3ce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	9b01      	ldr	r3, [sp, #4]
 800a3d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a3da:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a3de:	b281      	uxth	r1, r0
 800a3e0:	9301      	str	r3, [sp, #4]
 800a3e2:	fa1f f38a 	uxth.w	r3, sl
 800a3e6:	1a5b      	subs	r3, r3, r1
 800a3e8:	0c00      	lsrs	r0, r0, #16
 800a3ea:	4463      	add	r3, ip
 800a3ec:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a3f0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a3f4:	b29b      	uxth	r3, r3
 800a3f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a3fa:	4576      	cmp	r6, lr
 800a3fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a400:	f849 3b04 	str.w	r3, [r9], #4
 800a404:	d8e6      	bhi.n	800a3d4 <__mdiff+0x88>
 800a406:	1b33      	subs	r3, r6, r4
 800a408:	3b15      	subs	r3, #21
 800a40a:	f023 0303 	bic.w	r3, r3, #3
 800a40e:	3415      	adds	r4, #21
 800a410:	3304      	adds	r3, #4
 800a412:	42a6      	cmp	r6, r4
 800a414:	bf38      	it	cc
 800a416:	2304      	movcc	r3, #4
 800a418:	441d      	add	r5, r3
 800a41a:	445b      	add	r3, fp
 800a41c:	461e      	mov	r6, r3
 800a41e:	462c      	mov	r4, r5
 800a420:	4544      	cmp	r4, r8
 800a422:	d30e      	bcc.n	800a442 <__mdiff+0xf6>
 800a424:	f108 0103 	add.w	r1, r8, #3
 800a428:	1b49      	subs	r1, r1, r5
 800a42a:	f021 0103 	bic.w	r1, r1, #3
 800a42e:	3d03      	subs	r5, #3
 800a430:	45a8      	cmp	r8, r5
 800a432:	bf38      	it	cc
 800a434:	2100      	movcc	r1, #0
 800a436:	440b      	add	r3, r1
 800a438:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a43c:	b199      	cbz	r1, 800a466 <__mdiff+0x11a>
 800a43e:	6117      	str	r7, [r2, #16]
 800a440:	e79e      	b.n	800a380 <__mdiff+0x34>
 800a442:	46e6      	mov	lr, ip
 800a444:	f854 1b04 	ldr.w	r1, [r4], #4
 800a448:	fa1f fc81 	uxth.w	ip, r1
 800a44c:	44f4      	add	ip, lr
 800a44e:	0c08      	lsrs	r0, r1, #16
 800a450:	4471      	add	r1, lr
 800a452:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a456:	b289      	uxth	r1, r1
 800a458:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a45c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a460:	f846 1b04 	str.w	r1, [r6], #4
 800a464:	e7dc      	b.n	800a420 <__mdiff+0xd4>
 800a466:	3f01      	subs	r7, #1
 800a468:	e7e6      	b.n	800a438 <__mdiff+0xec>
 800a46a:	bf00      	nop
 800a46c:	0800c5ec 	.word	0x0800c5ec
 800a470:	0800c674 	.word	0x0800c674

0800a474 <__ulp>:
 800a474:	4b0e      	ldr	r3, [pc, #56]	@ (800a4b0 <__ulp+0x3c>)
 800a476:	400b      	ands	r3, r1
 800a478:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	dc08      	bgt.n	800a492 <__ulp+0x1e>
 800a480:	425b      	negs	r3, r3
 800a482:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a486:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a48a:	da04      	bge.n	800a496 <__ulp+0x22>
 800a48c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a490:	4113      	asrs	r3, r2
 800a492:	2200      	movs	r2, #0
 800a494:	e008      	b.n	800a4a8 <__ulp+0x34>
 800a496:	f1a2 0314 	sub.w	r3, r2, #20
 800a49a:	2b1e      	cmp	r3, #30
 800a49c:	bfd6      	itet	le
 800a49e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a4a2:	2201      	movgt	r2, #1
 800a4a4:	40da      	lsrle	r2, r3
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	4610      	mov	r0, r2
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	7ff00000 	.word	0x7ff00000

0800a4b4 <__b2d>:
 800a4b4:	6902      	ldr	r2, [r0, #16]
 800a4b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4b8:	f100 0614 	add.w	r6, r0, #20
 800a4bc:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a4c0:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a4c4:	4f1e      	ldr	r7, [pc, #120]	@ (800a540 <__b2d+0x8c>)
 800a4c6:	4620      	mov	r0, r4
 800a4c8:	f7ff fd5a 	bl	8009f80 <__hi0bits>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	f1c0 0020 	rsb	r0, r0, #32
 800a4d2:	2b0a      	cmp	r3, #10
 800a4d4:	f1a2 0504 	sub.w	r5, r2, #4
 800a4d8:	6008      	str	r0, [r1, #0]
 800a4da:	dc12      	bgt.n	800a502 <__b2d+0x4e>
 800a4dc:	42ae      	cmp	r6, r5
 800a4de:	bf2c      	ite	cs
 800a4e0:	2200      	movcs	r2, #0
 800a4e2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a4e6:	f1c3 0c0b 	rsb	ip, r3, #11
 800a4ea:	3315      	adds	r3, #21
 800a4ec:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a4f0:	fa04 f303 	lsl.w	r3, r4, r3
 800a4f4:	fa22 f20c 	lsr.w	r2, r2, ip
 800a4f8:	ea4e 0107 	orr.w	r1, lr, r7
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a502:	42ae      	cmp	r6, r5
 800a504:	bf36      	itet	cc
 800a506:	f1a2 0508 	subcc.w	r5, r2, #8
 800a50a:	2200      	movcs	r2, #0
 800a50c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a510:	3b0b      	subs	r3, #11
 800a512:	d012      	beq.n	800a53a <__b2d+0x86>
 800a514:	f1c3 0720 	rsb	r7, r3, #32
 800a518:	fa22 f107 	lsr.w	r1, r2, r7
 800a51c:	409c      	lsls	r4, r3
 800a51e:	430c      	orrs	r4, r1
 800a520:	42b5      	cmp	r5, r6
 800a522:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a526:	bf94      	ite	ls
 800a528:	2400      	movls	r4, #0
 800a52a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a52e:	409a      	lsls	r2, r3
 800a530:	40fc      	lsrs	r4, r7
 800a532:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a536:	4322      	orrs	r2, r4
 800a538:	e7e1      	b.n	800a4fe <__b2d+0x4a>
 800a53a:	ea44 0107 	orr.w	r1, r4, r7
 800a53e:	e7de      	b.n	800a4fe <__b2d+0x4a>
 800a540:	3ff00000 	.word	0x3ff00000

0800a544 <__d2b>:
 800a544:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a548:	2101      	movs	r1, #1
 800a54a:	4690      	mov	r8, r2
 800a54c:	4699      	mov	r9, r3
 800a54e:	9e08      	ldr	r6, [sp, #32]
 800a550:	f7ff fc24 	bl	8009d9c <_Balloc>
 800a554:	4604      	mov	r4, r0
 800a556:	b930      	cbnz	r0, 800a566 <__d2b+0x22>
 800a558:	4602      	mov	r2, r0
 800a55a:	f240 310f 	movw	r1, #783	@ 0x30f
 800a55e:	4b23      	ldr	r3, [pc, #140]	@ (800a5ec <__d2b+0xa8>)
 800a560:	4823      	ldr	r0, [pc, #140]	@ (800a5f0 <__d2b+0xac>)
 800a562:	f000 fc8f 	bl	800ae84 <__assert_func>
 800a566:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a56a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a56e:	b10d      	cbz	r5, 800a574 <__d2b+0x30>
 800a570:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a574:	9301      	str	r3, [sp, #4]
 800a576:	f1b8 0300 	subs.w	r3, r8, #0
 800a57a:	d024      	beq.n	800a5c6 <__d2b+0x82>
 800a57c:	4668      	mov	r0, sp
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	f7ff fd1d 	bl	8009fbe <__lo0bits>
 800a584:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a588:	b1d8      	cbz	r0, 800a5c2 <__d2b+0x7e>
 800a58a:	f1c0 0320 	rsb	r3, r0, #32
 800a58e:	fa02 f303 	lsl.w	r3, r2, r3
 800a592:	430b      	orrs	r3, r1
 800a594:	40c2      	lsrs	r2, r0
 800a596:	6163      	str	r3, [r4, #20]
 800a598:	9201      	str	r2, [sp, #4]
 800a59a:	9b01      	ldr	r3, [sp, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	bf0c      	ite	eq
 800a5a0:	2201      	moveq	r2, #1
 800a5a2:	2202      	movne	r2, #2
 800a5a4:	61a3      	str	r3, [r4, #24]
 800a5a6:	6122      	str	r2, [r4, #16]
 800a5a8:	b1ad      	cbz	r5, 800a5d6 <__d2b+0x92>
 800a5aa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a5ae:	4405      	add	r5, r0
 800a5b0:	6035      	str	r5, [r6, #0]
 800a5b2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5b8:	6018      	str	r0, [r3, #0]
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	b002      	add	sp, #8
 800a5be:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a5c2:	6161      	str	r1, [r4, #20]
 800a5c4:	e7e9      	b.n	800a59a <__d2b+0x56>
 800a5c6:	a801      	add	r0, sp, #4
 800a5c8:	f7ff fcf9 	bl	8009fbe <__lo0bits>
 800a5cc:	9b01      	ldr	r3, [sp, #4]
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	6163      	str	r3, [r4, #20]
 800a5d2:	3020      	adds	r0, #32
 800a5d4:	e7e7      	b.n	800a5a6 <__d2b+0x62>
 800a5d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5de:	6030      	str	r0, [r6, #0]
 800a5e0:	6918      	ldr	r0, [r3, #16]
 800a5e2:	f7ff fccd 	bl	8009f80 <__hi0bits>
 800a5e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5ea:	e7e4      	b.n	800a5b6 <__d2b+0x72>
 800a5ec:	0800c5ec 	.word	0x0800c5ec
 800a5f0:	0800c674 	.word	0x0800c674

0800a5f4 <__ratio>:
 800a5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5f8:	b085      	sub	sp, #20
 800a5fa:	e9cd 1000 	strd	r1, r0, [sp]
 800a5fe:	a902      	add	r1, sp, #8
 800a600:	f7ff ff58 	bl	800a4b4 <__b2d>
 800a604:	468b      	mov	fp, r1
 800a606:	4606      	mov	r6, r0
 800a608:	460f      	mov	r7, r1
 800a60a:	9800      	ldr	r0, [sp, #0]
 800a60c:	a903      	add	r1, sp, #12
 800a60e:	f7ff ff51 	bl	800a4b4 <__b2d>
 800a612:	460d      	mov	r5, r1
 800a614:	9b01      	ldr	r3, [sp, #4]
 800a616:	4689      	mov	r9, r1
 800a618:	6919      	ldr	r1, [r3, #16]
 800a61a:	9b00      	ldr	r3, [sp, #0]
 800a61c:	4604      	mov	r4, r0
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	4630      	mov	r0, r6
 800a622:	1ac9      	subs	r1, r1, r3
 800a624:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a628:	1a9b      	subs	r3, r3, r2
 800a62a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a62e:	2b00      	cmp	r3, #0
 800a630:	bfcd      	iteet	gt
 800a632:	463a      	movgt	r2, r7
 800a634:	462a      	movle	r2, r5
 800a636:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a63a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a63e:	bfd8      	it	le
 800a640:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a644:	464b      	mov	r3, r9
 800a646:	4622      	mov	r2, r4
 800a648:	4659      	mov	r1, fp
 800a64a:	f7f6 f879 	bl	8000740 <__aeabi_ddiv>
 800a64e:	b005      	add	sp, #20
 800a650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a654 <__copybits>:
 800a654:	3901      	subs	r1, #1
 800a656:	b570      	push	{r4, r5, r6, lr}
 800a658:	1149      	asrs	r1, r1, #5
 800a65a:	6914      	ldr	r4, [r2, #16]
 800a65c:	3101      	adds	r1, #1
 800a65e:	f102 0314 	add.w	r3, r2, #20
 800a662:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a666:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a66a:	1f05      	subs	r5, r0, #4
 800a66c:	42a3      	cmp	r3, r4
 800a66e:	d30c      	bcc.n	800a68a <__copybits+0x36>
 800a670:	1aa3      	subs	r3, r4, r2
 800a672:	3b11      	subs	r3, #17
 800a674:	f023 0303 	bic.w	r3, r3, #3
 800a678:	3211      	adds	r2, #17
 800a67a:	42a2      	cmp	r2, r4
 800a67c:	bf88      	it	hi
 800a67e:	2300      	movhi	r3, #0
 800a680:	4418      	add	r0, r3
 800a682:	2300      	movs	r3, #0
 800a684:	4288      	cmp	r0, r1
 800a686:	d305      	bcc.n	800a694 <__copybits+0x40>
 800a688:	bd70      	pop	{r4, r5, r6, pc}
 800a68a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a68e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a692:	e7eb      	b.n	800a66c <__copybits+0x18>
 800a694:	f840 3b04 	str.w	r3, [r0], #4
 800a698:	e7f4      	b.n	800a684 <__copybits+0x30>

0800a69a <__any_on>:
 800a69a:	f100 0214 	add.w	r2, r0, #20
 800a69e:	6900      	ldr	r0, [r0, #16]
 800a6a0:	114b      	asrs	r3, r1, #5
 800a6a2:	4298      	cmp	r0, r3
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	db11      	blt.n	800a6cc <__any_on+0x32>
 800a6a8:	dd0a      	ble.n	800a6c0 <__any_on+0x26>
 800a6aa:	f011 011f 	ands.w	r1, r1, #31
 800a6ae:	d007      	beq.n	800a6c0 <__any_on+0x26>
 800a6b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a6b4:	fa24 f001 	lsr.w	r0, r4, r1
 800a6b8:	fa00 f101 	lsl.w	r1, r0, r1
 800a6bc:	428c      	cmp	r4, r1
 800a6be:	d10b      	bne.n	800a6d8 <__any_on+0x3e>
 800a6c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d803      	bhi.n	800a6d0 <__any_on+0x36>
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	bd10      	pop	{r4, pc}
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	e7f7      	b.n	800a6c0 <__any_on+0x26>
 800a6d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6d4:	2900      	cmp	r1, #0
 800a6d6:	d0f5      	beq.n	800a6c4 <__any_on+0x2a>
 800a6d8:	2001      	movs	r0, #1
 800a6da:	e7f6      	b.n	800a6ca <__any_on+0x30>

0800a6dc <__ascii_wctomb>:
 800a6dc:	4603      	mov	r3, r0
 800a6de:	4608      	mov	r0, r1
 800a6e0:	b141      	cbz	r1, 800a6f4 <__ascii_wctomb+0x18>
 800a6e2:	2aff      	cmp	r2, #255	@ 0xff
 800a6e4:	d904      	bls.n	800a6f0 <__ascii_wctomb+0x14>
 800a6e6:	228a      	movs	r2, #138	@ 0x8a
 800a6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	4770      	bx	lr
 800a6f0:	2001      	movs	r0, #1
 800a6f2:	700a      	strb	r2, [r1, #0]
 800a6f4:	4770      	bx	lr

0800a6f6 <__ssputs_r>:
 800a6f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6fa:	461f      	mov	r7, r3
 800a6fc:	688e      	ldr	r6, [r1, #8]
 800a6fe:	4682      	mov	sl, r0
 800a700:	42be      	cmp	r6, r7
 800a702:	460c      	mov	r4, r1
 800a704:	4690      	mov	r8, r2
 800a706:	680b      	ldr	r3, [r1, #0]
 800a708:	d82d      	bhi.n	800a766 <__ssputs_r+0x70>
 800a70a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a70e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a712:	d026      	beq.n	800a762 <__ssputs_r+0x6c>
 800a714:	6965      	ldr	r5, [r4, #20]
 800a716:	6909      	ldr	r1, [r1, #16]
 800a718:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a71c:	eba3 0901 	sub.w	r9, r3, r1
 800a720:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a724:	1c7b      	adds	r3, r7, #1
 800a726:	444b      	add	r3, r9
 800a728:	106d      	asrs	r5, r5, #1
 800a72a:	429d      	cmp	r5, r3
 800a72c:	bf38      	it	cc
 800a72e:	461d      	movcc	r5, r3
 800a730:	0553      	lsls	r3, r2, #21
 800a732:	d527      	bpl.n	800a784 <__ssputs_r+0x8e>
 800a734:	4629      	mov	r1, r5
 800a736:	f7ff fa93 	bl	8009c60 <_malloc_r>
 800a73a:	4606      	mov	r6, r0
 800a73c:	b360      	cbz	r0, 800a798 <__ssputs_r+0xa2>
 800a73e:	464a      	mov	r2, r9
 800a740:	6921      	ldr	r1, [r4, #16]
 800a742:	f7fe fed4 	bl	80094ee <memcpy>
 800a746:	89a3      	ldrh	r3, [r4, #12]
 800a748:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a74c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a750:	81a3      	strh	r3, [r4, #12]
 800a752:	6126      	str	r6, [r4, #16]
 800a754:	444e      	add	r6, r9
 800a756:	6026      	str	r6, [r4, #0]
 800a758:	463e      	mov	r6, r7
 800a75a:	6165      	str	r5, [r4, #20]
 800a75c:	eba5 0509 	sub.w	r5, r5, r9
 800a760:	60a5      	str	r5, [r4, #8]
 800a762:	42be      	cmp	r6, r7
 800a764:	d900      	bls.n	800a768 <__ssputs_r+0x72>
 800a766:	463e      	mov	r6, r7
 800a768:	4632      	mov	r2, r6
 800a76a:	4641      	mov	r1, r8
 800a76c:	6820      	ldr	r0, [r4, #0]
 800a76e:	f000 fb51 	bl	800ae14 <memmove>
 800a772:	2000      	movs	r0, #0
 800a774:	68a3      	ldr	r3, [r4, #8]
 800a776:	1b9b      	subs	r3, r3, r6
 800a778:	60a3      	str	r3, [r4, #8]
 800a77a:	6823      	ldr	r3, [r4, #0]
 800a77c:	4433      	add	r3, r6
 800a77e:	6023      	str	r3, [r4, #0]
 800a780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a784:	462a      	mov	r2, r5
 800a786:	f000 fbb7 	bl	800aef8 <_realloc_r>
 800a78a:	4606      	mov	r6, r0
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d1e0      	bne.n	800a752 <__ssputs_r+0x5c>
 800a790:	4650      	mov	r0, sl
 800a792:	6921      	ldr	r1, [r4, #16]
 800a794:	f7fe fec0 	bl	8009518 <_free_r>
 800a798:	230c      	movs	r3, #12
 800a79a:	f8ca 3000 	str.w	r3, [sl]
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7a8:	81a3      	strh	r3, [r4, #12]
 800a7aa:	e7e9      	b.n	800a780 <__ssputs_r+0x8a>

0800a7ac <_svfiprintf_r>:
 800a7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b0:	4698      	mov	r8, r3
 800a7b2:	898b      	ldrh	r3, [r1, #12]
 800a7b4:	4607      	mov	r7, r0
 800a7b6:	061b      	lsls	r3, r3, #24
 800a7b8:	460d      	mov	r5, r1
 800a7ba:	4614      	mov	r4, r2
 800a7bc:	b09d      	sub	sp, #116	@ 0x74
 800a7be:	d510      	bpl.n	800a7e2 <_svfiprintf_r+0x36>
 800a7c0:	690b      	ldr	r3, [r1, #16]
 800a7c2:	b973      	cbnz	r3, 800a7e2 <_svfiprintf_r+0x36>
 800a7c4:	2140      	movs	r1, #64	@ 0x40
 800a7c6:	f7ff fa4b 	bl	8009c60 <_malloc_r>
 800a7ca:	6028      	str	r0, [r5, #0]
 800a7cc:	6128      	str	r0, [r5, #16]
 800a7ce:	b930      	cbnz	r0, 800a7de <_svfiprintf_r+0x32>
 800a7d0:	230c      	movs	r3, #12
 800a7d2:	603b      	str	r3, [r7, #0]
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d8:	b01d      	add	sp, #116	@ 0x74
 800a7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7de:	2340      	movs	r3, #64	@ 0x40
 800a7e0:	616b      	str	r3, [r5, #20]
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7e6:	2320      	movs	r3, #32
 800a7e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7ec:	2330      	movs	r3, #48	@ 0x30
 800a7ee:	f04f 0901 	mov.w	r9, #1
 800a7f2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7f6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a990 <_svfiprintf_r+0x1e4>
 800a7fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7fe:	4623      	mov	r3, r4
 800a800:	469a      	mov	sl, r3
 800a802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a806:	b10a      	cbz	r2, 800a80c <_svfiprintf_r+0x60>
 800a808:	2a25      	cmp	r2, #37	@ 0x25
 800a80a:	d1f9      	bne.n	800a800 <_svfiprintf_r+0x54>
 800a80c:	ebba 0b04 	subs.w	fp, sl, r4
 800a810:	d00b      	beq.n	800a82a <_svfiprintf_r+0x7e>
 800a812:	465b      	mov	r3, fp
 800a814:	4622      	mov	r2, r4
 800a816:	4629      	mov	r1, r5
 800a818:	4638      	mov	r0, r7
 800a81a:	f7ff ff6c 	bl	800a6f6 <__ssputs_r>
 800a81e:	3001      	adds	r0, #1
 800a820:	f000 80a7 	beq.w	800a972 <_svfiprintf_r+0x1c6>
 800a824:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a826:	445a      	add	r2, fp
 800a828:	9209      	str	r2, [sp, #36]	@ 0x24
 800a82a:	f89a 3000 	ldrb.w	r3, [sl]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	f000 809f 	beq.w	800a972 <_svfiprintf_r+0x1c6>
 800a834:	2300      	movs	r3, #0
 800a836:	f04f 32ff 	mov.w	r2, #4294967295
 800a83a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a83e:	f10a 0a01 	add.w	sl, sl, #1
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	9307      	str	r3, [sp, #28]
 800a846:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a84a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a84c:	4654      	mov	r4, sl
 800a84e:	2205      	movs	r2, #5
 800a850:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a854:	484e      	ldr	r0, [pc, #312]	@ (800a990 <_svfiprintf_r+0x1e4>)
 800a856:	f000 fb07 	bl	800ae68 <memchr>
 800a85a:	9a04      	ldr	r2, [sp, #16]
 800a85c:	b9d8      	cbnz	r0, 800a896 <_svfiprintf_r+0xea>
 800a85e:	06d0      	lsls	r0, r2, #27
 800a860:	bf44      	itt	mi
 800a862:	2320      	movmi	r3, #32
 800a864:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a868:	0711      	lsls	r1, r2, #28
 800a86a:	bf44      	itt	mi
 800a86c:	232b      	movmi	r3, #43	@ 0x2b
 800a86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a872:	f89a 3000 	ldrb.w	r3, [sl]
 800a876:	2b2a      	cmp	r3, #42	@ 0x2a
 800a878:	d015      	beq.n	800a8a6 <_svfiprintf_r+0xfa>
 800a87a:	4654      	mov	r4, sl
 800a87c:	2000      	movs	r0, #0
 800a87e:	f04f 0c0a 	mov.w	ip, #10
 800a882:	9a07      	ldr	r2, [sp, #28]
 800a884:	4621      	mov	r1, r4
 800a886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a88a:	3b30      	subs	r3, #48	@ 0x30
 800a88c:	2b09      	cmp	r3, #9
 800a88e:	d94b      	bls.n	800a928 <_svfiprintf_r+0x17c>
 800a890:	b1b0      	cbz	r0, 800a8c0 <_svfiprintf_r+0x114>
 800a892:	9207      	str	r2, [sp, #28]
 800a894:	e014      	b.n	800a8c0 <_svfiprintf_r+0x114>
 800a896:	eba0 0308 	sub.w	r3, r0, r8
 800a89a:	fa09 f303 	lsl.w	r3, r9, r3
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	46a2      	mov	sl, r4
 800a8a2:	9304      	str	r3, [sp, #16]
 800a8a4:	e7d2      	b.n	800a84c <_svfiprintf_r+0xa0>
 800a8a6:	9b03      	ldr	r3, [sp, #12]
 800a8a8:	1d19      	adds	r1, r3, #4
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	9103      	str	r1, [sp, #12]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	bfbb      	ittet	lt
 800a8b2:	425b      	neglt	r3, r3
 800a8b4:	f042 0202 	orrlt.w	r2, r2, #2
 800a8b8:	9307      	strge	r3, [sp, #28]
 800a8ba:	9307      	strlt	r3, [sp, #28]
 800a8bc:	bfb8      	it	lt
 800a8be:	9204      	strlt	r2, [sp, #16]
 800a8c0:	7823      	ldrb	r3, [r4, #0]
 800a8c2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a8c4:	d10a      	bne.n	800a8dc <_svfiprintf_r+0x130>
 800a8c6:	7863      	ldrb	r3, [r4, #1]
 800a8c8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ca:	d132      	bne.n	800a932 <_svfiprintf_r+0x186>
 800a8cc:	9b03      	ldr	r3, [sp, #12]
 800a8ce:	3402      	adds	r4, #2
 800a8d0:	1d1a      	adds	r2, r3, #4
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	9203      	str	r2, [sp, #12]
 800a8d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a8da:	9305      	str	r3, [sp, #20]
 800a8dc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a994 <_svfiprintf_r+0x1e8>
 800a8e0:	2203      	movs	r2, #3
 800a8e2:	4650      	mov	r0, sl
 800a8e4:	7821      	ldrb	r1, [r4, #0]
 800a8e6:	f000 fabf 	bl	800ae68 <memchr>
 800a8ea:	b138      	cbz	r0, 800a8fc <_svfiprintf_r+0x150>
 800a8ec:	2240      	movs	r2, #64	@ 0x40
 800a8ee:	9b04      	ldr	r3, [sp, #16]
 800a8f0:	eba0 000a 	sub.w	r0, r0, sl
 800a8f4:	4082      	lsls	r2, r0
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	3401      	adds	r4, #1
 800a8fa:	9304      	str	r3, [sp, #16]
 800a8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a900:	2206      	movs	r2, #6
 800a902:	4825      	ldr	r0, [pc, #148]	@ (800a998 <_svfiprintf_r+0x1ec>)
 800a904:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a908:	f000 faae 	bl	800ae68 <memchr>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d036      	beq.n	800a97e <_svfiprintf_r+0x1d2>
 800a910:	4b22      	ldr	r3, [pc, #136]	@ (800a99c <_svfiprintf_r+0x1f0>)
 800a912:	bb1b      	cbnz	r3, 800a95c <_svfiprintf_r+0x1b0>
 800a914:	9b03      	ldr	r3, [sp, #12]
 800a916:	3307      	adds	r3, #7
 800a918:	f023 0307 	bic.w	r3, r3, #7
 800a91c:	3308      	adds	r3, #8
 800a91e:	9303      	str	r3, [sp, #12]
 800a920:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a922:	4433      	add	r3, r6
 800a924:	9309      	str	r3, [sp, #36]	@ 0x24
 800a926:	e76a      	b.n	800a7fe <_svfiprintf_r+0x52>
 800a928:	460c      	mov	r4, r1
 800a92a:	2001      	movs	r0, #1
 800a92c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a930:	e7a8      	b.n	800a884 <_svfiprintf_r+0xd8>
 800a932:	2300      	movs	r3, #0
 800a934:	f04f 0c0a 	mov.w	ip, #10
 800a938:	4619      	mov	r1, r3
 800a93a:	3401      	adds	r4, #1
 800a93c:	9305      	str	r3, [sp, #20]
 800a93e:	4620      	mov	r0, r4
 800a940:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a944:	3a30      	subs	r2, #48	@ 0x30
 800a946:	2a09      	cmp	r2, #9
 800a948:	d903      	bls.n	800a952 <_svfiprintf_r+0x1a6>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d0c6      	beq.n	800a8dc <_svfiprintf_r+0x130>
 800a94e:	9105      	str	r1, [sp, #20]
 800a950:	e7c4      	b.n	800a8dc <_svfiprintf_r+0x130>
 800a952:	4604      	mov	r4, r0
 800a954:	2301      	movs	r3, #1
 800a956:	fb0c 2101 	mla	r1, ip, r1, r2
 800a95a:	e7f0      	b.n	800a93e <_svfiprintf_r+0x192>
 800a95c:	ab03      	add	r3, sp, #12
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	462a      	mov	r2, r5
 800a962:	4638      	mov	r0, r7
 800a964:	4b0e      	ldr	r3, [pc, #56]	@ (800a9a0 <_svfiprintf_r+0x1f4>)
 800a966:	a904      	add	r1, sp, #16
 800a968:	f3af 8000 	nop.w
 800a96c:	1c42      	adds	r2, r0, #1
 800a96e:	4606      	mov	r6, r0
 800a970:	d1d6      	bne.n	800a920 <_svfiprintf_r+0x174>
 800a972:	89ab      	ldrh	r3, [r5, #12]
 800a974:	065b      	lsls	r3, r3, #25
 800a976:	f53f af2d 	bmi.w	800a7d4 <_svfiprintf_r+0x28>
 800a97a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a97c:	e72c      	b.n	800a7d8 <_svfiprintf_r+0x2c>
 800a97e:	ab03      	add	r3, sp, #12
 800a980:	9300      	str	r3, [sp, #0]
 800a982:	462a      	mov	r2, r5
 800a984:	4638      	mov	r0, r7
 800a986:	4b06      	ldr	r3, [pc, #24]	@ (800a9a0 <_svfiprintf_r+0x1f4>)
 800a988:	a904      	add	r1, sp, #16
 800a98a:	f000 f87d 	bl	800aa88 <_printf_i>
 800a98e:	e7ed      	b.n	800a96c <_svfiprintf_r+0x1c0>
 800a990:	0800c6cd 	.word	0x0800c6cd
 800a994:	0800c6d3 	.word	0x0800c6d3
 800a998:	0800c6d7 	.word	0x0800c6d7
 800a99c:	00000000 	.word	0x00000000
 800a9a0:	0800a6f7 	.word	0x0800a6f7

0800a9a4 <_printf_common>:
 800a9a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a8:	4616      	mov	r6, r2
 800a9aa:	4698      	mov	r8, r3
 800a9ac:	688a      	ldr	r2, [r1, #8]
 800a9ae:	690b      	ldr	r3, [r1, #16]
 800a9b0:	4607      	mov	r7, r0
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	bfb8      	it	lt
 800a9b6:	4613      	movlt	r3, r2
 800a9b8:	6033      	str	r3, [r6, #0]
 800a9ba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a9be:	460c      	mov	r4, r1
 800a9c0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a9c4:	b10a      	cbz	r2, 800a9ca <_printf_common+0x26>
 800a9c6:	3301      	adds	r3, #1
 800a9c8:	6033      	str	r3, [r6, #0]
 800a9ca:	6823      	ldr	r3, [r4, #0]
 800a9cc:	0699      	lsls	r1, r3, #26
 800a9ce:	bf42      	ittt	mi
 800a9d0:	6833      	ldrmi	r3, [r6, #0]
 800a9d2:	3302      	addmi	r3, #2
 800a9d4:	6033      	strmi	r3, [r6, #0]
 800a9d6:	6825      	ldr	r5, [r4, #0]
 800a9d8:	f015 0506 	ands.w	r5, r5, #6
 800a9dc:	d106      	bne.n	800a9ec <_printf_common+0x48>
 800a9de:	f104 0a19 	add.w	sl, r4, #25
 800a9e2:	68e3      	ldr	r3, [r4, #12]
 800a9e4:	6832      	ldr	r2, [r6, #0]
 800a9e6:	1a9b      	subs	r3, r3, r2
 800a9e8:	42ab      	cmp	r3, r5
 800a9ea:	dc2b      	bgt.n	800aa44 <_printf_common+0xa0>
 800a9ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a9f0:	6822      	ldr	r2, [r4, #0]
 800a9f2:	3b00      	subs	r3, #0
 800a9f4:	bf18      	it	ne
 800a9f6:	2301      	movne	r3, #1
 800a9f8:	0692      	lsls	r2, r2, #26
 800a9fa:	d430      	bmi.n	800aa5e <_printf_common+0xba>
 800a9fc:	4641      	mov	r1, r8
 800a9fe:	4638      	mov	r0, r7
 800aa00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800aa04:	47c8      	blx	r9
 800aa06:	3001      	adds	r0, #1
 800aa08:	d023      	beq.n	800aa52 <_printf_common+0xae>
 800aa0a:	6823      	ldr	r3, [r4, #0]
 800aa0c:	6922      	ldr	r2, [r4, #16]
 800aa0e:	f003 0306 	and.w	r3, r3, #6
 800aa12:	2b04      	cmp	r3, #4
 800aa14:	bf14      	ite	ne
 800aa16:	2500      	movne	r5, #0
 800aa18:	6833      	ldreq	r3, [r6, #0]
 800aa1a:	f04f 0600 	mov.w	r6, #0
 800aa1e:	bf08      	it	eq
 800aa20:	68e5      	ldreq	r5, [r4, #12]
 800aa22:	f104 041a 	add.w	r4, r4, #26
 800aa26:	bf08      	it	eq
 800aa28:	1aed      	subeq	r5, r5, r3
 800aa2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800aa2e:	bf08      	it	eq
 800aa30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa34:	4293      	cmp	r3, r2
 800aa36:	bfc4      	itt	gt
 800aa38:	1a9b      	subgt	r3, r3, r2
 800aa3a:	18ed      	addgt	r5, r5, r3
 800aa3c:	42b5      	cmp	r5, r6
 800aa3e:	d11a      	bne.n	800aa76 <_printf_common+0xd2>
 800aa40:	2000      	movs	r0, #0
 800aa42:	e008      	b.n	800aa56 <_printf_common+0xb2>
 800aa44:	2301      	movs	r3, #1
 800aa46:	4652      	mov	r2, sl
 800aa48:	4641      	mov	r1, r8
 800aa4a:	4638      	mov	r0, r7
 800aa4c:	47c8      	blx	r9
 800aa4e:	3001      	adds	r0, #1
 800aa50:	d103      	bne.n	800aa5a <_printf_common+0xb6>
 800aa52:	f04f 30ff 	mov.w	r0, #4294967295
 800aa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5a:	3501      	adds	r5, #1
 800aa5c:	e7c1      	b.n	800a9e2 <_printf_common+0x3e>
 800aa5e:	2030      	movs	r0, #48	@ 0x30
 800aa60:	18e1      	adds	r1, r4, r3
 800aa62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800aa6c:	4422      	add	r2, r4
 800aa6e:	3302      	adds	r3, #2
 800aa70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800aa74:	e7c2      	b.n	800a9fc <_printf_common+0x58>
 800aa76:	2301      	movs	r3, #1
 800aa78:	4622      	mov	r2, r4
 800aa7a:	4641      	mov	r1, r8
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	47c8      	blx	r9
 800aa80:	3001      	adds	r0, #1
 800aa82:	d0e6      	beq.n	800aa52 <_printf_common+0xae>
 800aa84:	3601      	adds	r6, #1
 800aa86:	e7d9      	b.n	800aa3c <_printf_common+0x98>

0800aa88 <_printf_i>:
 800aa88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa8c:	7e0f      	ldrb	r7, [r1, #24]
 800aa8e:	4691      	mov	r9, r2
 800aa90:	2f78      	cmp	r7, #120	@ 0x78
 800aa92:	4680      	mov	r8, r0
 800aa94:	460c      	mov	r4, r1
 800aa96:	469a      	mov	sl, r3
 800aa98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800aa9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800aa9e:	d807      	bhi.n	800aab0 <_printf_i+0x28>
 800aaa0:	2f62      	cmp	r7, #98	@ 0x62
 800aaa2:	d80a      	bhi.n	800aaba <_printf_i+0x32>
 800aaa4:	2f00      	cmp	r7, #0
 800aaa6:	f000 80d1 	beq.w	800ac4c <_printf_i+0x1c4>
 800aaaa:	2f58      	cmp	r7, #88	@ 0x58
 800aaac:	f000 80b8 	beq.w	800ac20 <_printf_i+0x198>
 800aab0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800aab4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800aab8:	e03a      	b.n	800ab30 <_printf_i+0xa8>
 800aaba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800aabe:	2b15      	cmp	r3, #21
 800aac0:	d8f6      	bhi.n	800aab0 <_printf_i+0x28>
 800aac2:	a101      	add	r1, pc, #4	@ (adr r1, 800aac8 <_printf_i+0x40>)
 800aac4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aac8:	0800ab21 	.word	0x0800ab21
 800aacc:	0800ab35 	.word	0x0800ab35
 800aad0:	0800aab1 	.word	0x0800aab1
 800aad4:	0800aab1 	.word	0x0800aab1
 800aad8:	0800aab1 	.word	0x0800aab1
 800aadc:	0800aab1 	.word	0x0800aab1
 800aae0:	0800ab35 	.word	0x0800ab35
 800aae4:	0800aab1 	.word	0x0800aab1
 800aae8:	0800aab1 	.word	0x0800aab1
 800aaec:	0800aab1 	.word	0x0800aab1
 800aaf0:	0800aab1 	.word	0x0800aab1
 800aaf4:	0800ac33 	.word	0x0800ac33
 800aaf8:	0800ab5f 	.word	0x0800ab5f
 800aafc:	0800abed 	.word	0x0800abed
 800ab00:	0800aab1 	.word	0x0800aab1
 800ab04:	0800aab1 	.word	0x0800aab1
 800ab08:	0800ac55 	.word	0x0800ac55
 800ab0c:	0800aab1 	.word	0x0800aab1
 800ab10:	0800ab5f 	.word	0x0800ab5f
 800ab14:	0800aab1 	.word	0x0800aab1
 800ab18:	0800aab1 	.word	0x0800aab1
 800ab1c:	0800abf5 	.word	0x0800abf5
 800ab20:	6833      	ldr	r3, [r6, #0]
 800ab22:	1d1a      	adds	r2, r3, #4
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6032      	str	r2, [r6, #0]
 800ab28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ab2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ab30:	2301      	movs	r3, #1
 800ab32:	e09c      	b.n	800ac6e <_printf_i+0x1e6>
 800ab34:	6833      	ldr	r3, [r6, #0]
 800ab36:	6820      	ldr	r0, [r4, #0]
 800ab38:	1d19      	adds	r1, r3, #4
 800ab3a:	6031      	str	r1, [r6, #0]
 800ab3c:	0606      	lsls	r6, r0, #24
 800ab3e:	d501      	bpl.n	800ab44 <_printf_i+0xbc>
 800ab40:	681d      	ldr	r5, [r3, #0]
 800ab42:	e003      	b.n	800ab4c <_printf_i+0xc4>
 800ab44:	0645      	lsls	r5, r0, #25
 800ab46:	d5fb      	bpl.n	800ab40 <_printf_i+0xb8>
 800ab48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ab4c:	2d00      	cmp	r5, #0
 800ab4e:	da03      	bge.n	800ab58 <_printf_i+0xd0>
 800ab50:	232d      	movs	r3, #45	@ 0x2d
 800ab52:	426d      	negs	r5, r5
 800ab54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab58:	230a      	movs	r3, #10
 800ab5a:	4858      	ldr	r0, [pc, #352]	@ (800acbc <_printf_i+0x234>)
 800ab5c:	e011      	b.n	800ab82 <_printf_i+0xfa>
 800ab5e:	6821      	ldr	r1, [r4, #0]
 800ab60:	6833      	ldr	r3, [r6, #0]
 800ab62:	0608      	lsls	r0, r1, #24
 800ab64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ab68:	d402      	bmi.n	800ab70 <_printf_i+0xe8>
 800ab6a:	0649      	lsls	r1, r1, #25
 800ab6c:	bf48      	it	mi
 800ab6e:	b2ad      	uxthmi	r5, r5
 800ab70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ab72:	6033      	str	r3, [r6, #0]
 800ab74:	bf14      	ite	ne
 800ab76:	230a      	movne	r3, #10
 800ab78:	2308      	moveq	r3, #8
 800ab7a:	4850      	ldr	r0, [pc, #320]	@ (800acbc <_printf_i+0x234>)
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ab82:	6866      	ldr	r6, [r4, #4]
 800ab84:	2e00      	cmp	r6, #0
 800ab86:	60a6      	str	r6, [r4, #8]
 800ab88:	db05      	blt.n	800ab96 <_printf_i+0x10e>
 800ab8a:	6821      	ldr	r1, [r4, #0]
 800ab8c:	432e      	orrs	r6, r5
 800ab8e:	f021 0104 	bic.w	r1, r1, #4
 800ab92:	6021      	str	r1, [r4, #0]
 800ab94:	d04b      	beq.n	800ac2e <_printf_i+0x1a6>
 800ab96:	4616      	mov	r6, r2
 800ab98:	fbb5 f1f3 	udiv	r1, r5, r3
 800ab9c:	fb03 5711 	mls	r7, r3, r1, r5
 800aba0:	5dc7      	ldrb	r7, [r0, r7]
 800aba2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aba6:	462f      	mov	r7, r5
 800aba8:	42bb      	cmp	r3, r7
 800abaa:	460d      	mov	r5, r1
 800abac:	d9f4      	bls.n	800ab98 <_printf_i+0x110>
 800abae:	2b08      	cmp	r3, #8
 800abb0:	d10b      	bne.n	800abca <_printf_i+0x142>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	07df      	lsls	r7, r3, #31
 800abb6:	d508      	bpl.n	800abca <_printf_i+0x142>
 800abb8:	6923      	ldr	r3, [r4, #16]
 800abba:	6861      	ldr	r1, [r4, #4]
 800abbc:	4299      	cmp	r1, r3
 800abbe:	bfde      	ittt	le
 800abc0:	2330      	movle	r3, #48	@ 0x30
 800abc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800abc6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800abca:	1b92      	subs	r2, r2, r6
 800abcc:	6122      	str	r2, [r4, #16]
 800abce:	464b      	mov	r3, r9
 800abd0:	4621      	mov	r1, r4
 800abd2:	4640      	mov	r0, r8
 800abd4:	f8cd a000 	str.w	sl, [sp]
 800abd8:	aa03      	add	r2, sp, #12
 800abda:	f7ff fee3 	bl	800a9a4 <_printf_common>
 800abde:	3001      	adds	r0, #1
 800abe0:	d14a      	bne.n	800ac78 <_printf_i+0x1f0>
 800abe2:	f04f 30ff 	mov.w	r0, #4294967295
 800abe6:	b004      	add	sp, #16
 800abe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	f043 0320 	orr.w	r3, r3, #32
 800abf2:	6023      	str	r3, [r4, #0]
 800abf4:	2778      	movs	r7, #120	@ 0x78
 800abf6:	4832      	ldr	r0, [pc, #200]	@ (800acc0 <_printf_i+0x238>)
 800abf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	6831      	ldr	r1, [r6, #0]
 800ac00:	061f      	lsls	r7, r3, #24
 800ac02:	f851 5b04 	ldr.w	r5, [r1], #4
 800ac06:	d402      	bmi.n	800ac0e <_printf_i+0x186>
 800ac08:	065f      	lsls	r7, r3, #25
 800ac0a:	bf48      	it	mi
 800ac0c:	b2ad      	uxthmi	r5, r5
 800ac0e:	6031      	str	r1, [r6, #0]
 800ac10:	07d9      	lsls	r1, r3, #31
 800ac12:	bf44      	itt	mi
 800ac14:	f043 0320 	orrmi.w	r3, r3, #32
 800ac18:	6023      	strmi	r3, [r4, #0]
 800ac1a:	b11d      	cbz	r5, 800ac24 <_printf_i+0x19c>
 800ac1c:	2310      	movs	r3, #16
 800ac1e:	e7ad      	b.n	800ab7c <_printf_i+0xf4>
 800ac20:	4826      	ldr	r0, [pc, #152]	@ (800acbc <_printf_i+0x234>)
 800ac22:	e7e9      	b.n	800abf8 <_printf_i+0x170>
 800ac24:	6823      	ldr	r3, [r4, #0]
 800ac26:	f023 0320 	bic.w	r3, r3, #32
 800ac2a:	6023      	str	r3, [r4, #0]
 800ac2c:	e7f6      	b.n	800ac1c <_printf_i+0x194>
 800ac2e:	4616      	mov	r6, r2
 800ac30:	e7bd      	b.n	800abae <_printf_i+0x126>
 800ac32:	6833      	ldr	r3, [r6, #0]
 800ac34:	6825      	ldr	r5, [r4, #0]
 800ac36:	1d18      	adds	r0, r3, #4
 800ac38:	6961      	ldr	r1, [r4, #20]
 800ac3a:	6030      	str	r0, [r6, #0]
 800ac3c:	062e      	lsls	r6, r5, #24
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	d501      	bpl.n	800ac46 <_printf_i+0x1be>
 800ac42:	6019      	str	r1, [r3, #0]
 800ac44:	e002      	b.n	800ac4c <_printf_i+0x1c4>
 800ac46:	0668      	lsls	r0, r5, #25
 800ac48:	d5fb      	bpl.n	800ac42 <_printf_i+0x1ba>
 800ac4a:	8019      	strh	r1, [r3, #0]
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4616      	mov	r6, r2
 800ac50:	6123      	str	r3, [r4, #16]
 800ac52:	e7bc      	b.n	800abce <_printf_i+0x146>
 800ac54:	6833      	ldr	r3, [r6, #0]
 800ac56:	2100      	movs	r1, #0
 800ac58:	1d1a      	adds	r2, r3, #4
 800ac5a:	6032      	str	r2, [r6, #0]
 800ac5c:	681e      	ldr	r6, [r3, #0]
 800ac5e:	6862      	ldr	r2, [r4, #4]
 800ac60:	4630      	mov	r0, r6
 800ac62:	f000 f901 	bl	800ae68 <memchr>
 800ac66:	b108      	cbz	r0, 800ac6c <_printf_i+0x1e4>
 800ac68:	1b80      	subs	r0, r0, r6
 800ac6a:	6060      	str	r0, [r4, #4]
 800ac6c:	6863      	ldr	r3, [r4, #4]
 800ac6e:	6123      	str	r3, [r4, #16]
 800ac70:	2300      	movs	r3, #0
 800ac72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ac76:	e7aa      	b.n	800abce <_printf_i+0x146>
 800ac78:	4632      	mov	r2, r6
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	4640      	mov	r0, r8
 800ac7e:	6923      	ldr	r3, [r4, #16]
 800ac80:	47d0      	blx	sl
 800ac82:	3001      	adds	r0, #1
 800ac84:	d0ad      	beq.n	800abe2 <_printf_i+0x15a>
 800ac86:	6823      	ldr	r3, [r4, #0]
 800ac88:	079b      	lsls	r3, r3, #30
 800ac8a:	d413      	bmi.n	800acb4 <_printf_i+0x22c>
 800ac8c:	68e0      	ldr	r0, [r4, #12]
 800ac8e:	9b03      	ldr	r3, [sp, #12]
 800ac90:	4298      	cmp	r0, r3
 800ac92:	bfb8      	it	lt
 800ac94:	4618      	movlt	r0, r3
 800ac96:	e7a6      	b.n	800abe6 <_printf_i+0x15e>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	4632      	mov	r2, r6
 800ac9c:	4649      	mov	r1, r9
 800ac9e:	4640      	mov	r0, r8
 800aca0:	47d0      	blx	sl
 800aca2:	3001      	adds	r0, #1
 800aca4:	d09d      	beq.n	800abe2 <_printf_i+0x15a>
 800aca6:	3501      	adds	r5, #1
 800aca8:	68e3      	ldr	r3, [r4, #12]
 800acaa:	9903      	ldr	r1, [sp, #12]
 800acac:	1a5b      	subs	r3, r3, r1
 800acae:	42ab      	cmp	r3, r5
 800acb0:	dcf2      	bgt.n	800ac98 <_printf_i+0x210>
 800acb2:	e7eb      	b.n	800ac8c <_printf_i+0x204>
 800acb4:	2500      	movs	r5, #0
 800acb6:	f104 0619 	add.w	r6, r4, #25
 800acba:	e7f5      	b.n	800aca8 <_printf_i+0x220>
 800acbc:	0800c6de 	.word	0x0800c6de
 800acc0:	0800c6ef 	.word	0x0800c6ef

0800acc4 <__sflush_r>:
 800acc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	0716      	lsls	r6, r2, #28
 800accc:	4605      	mov	r5, r0
 800acce:	460c      	mov	r4, r1
 800acd0:	d454      	bmi.n	800ad7c <__sflush_r+0xb8>
 800acd2:	684b      	ldr	r3, [r1, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	dc02      	bgt.n	800acde <__sflush_r+0x1a>
 800acd8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800acda:	2b00      	cmp	r3, #0
 800acdc:	dd48      	ble.n	800ad70 <__sflush_r+0xac>
 800acde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ace0:	2e00      	cmp	r6, #0
 800ace2:	d045      	beq.n	800ad70 <__sflush_r+0xac>
 800ace4:	2300      	movs	r3, #0
 800ace6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800acea:	682f      	ldr	r7, [r5, #0]
 800acec:	6a21      	ldr	r1, [r4, #32]
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	d030      	beq.n	800ad54 <__sflush_r+0x90>
 800acf2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800acf4:	89a3      	ldrh	r3, [r4, #12]
 800acf6:	0759      	lsls	r1, r3, #29
 800acf8:	d505      	bpl.n	800ad06 <__sflush_r+0x42>
 800acfa:	6863      	ldr	r3, [r4, #4]
 800acfc:	1ad2      	subs	r2, r2, r3
 800acfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad00:	b10b      	cbz	r3, 800ad06 <__sflush_r+0x42>
 800ad02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad04:	1ad2      	subs	r2, r2, r3
 800ad06:	2300      	movs	r3, #0
 800ad08:	4628      	mov	r0, r5
 800ad0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad0c:	6a21      	ldr	r1, [r4, #32]
 800ad0e:	47b0      	blx	r6
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	89a3      	ldrh	r3, [r4, #12]
 800ad14:	d106      	bne.n	800ad24 <__sflush_r+0x60>
 800ad16:	6829      	ldr	r1, [r5, #0]
 800ad18:	291d      	cmp	r1, #29
 800ad1a:	d82b      	bhi.n	800ad74 <__sflush_r+0xb0>
 800ad1c:	4a28      	ldr	r2, [pc, #160]	@ (800adc0 <__sflush_r+0xfc>)
 800ad1e:	40ca      	lsrs	r2, r1
 800ad20:	07d6      	lsls	r6, r2, #31
 800ad22:	d527      	bpl.n	800ad74 <__sflush_r+0xb0>
 800ad24:	2200      	movs	r2, #0
 800ad26:	6062      	str	r2, [r4, #4]
 800ad28:	6922      	ldr	r2, [r4, #16]
 800ad2a:	04d9      	lsls	r1, r3, #19
 800ad2c:	6022      	str	r2, [r4, #0]
 800ad2e:	d504      	bpl.n	800ad3a <__sflush_r+0x76>
 800ad30:	1c42      	adds	r2, r0, #1
 800ad32:	d101      	bne.n	800ad38 <__sflush_r+0x74>
 800ad34:	682b      	ldr	r3, [r5, #0]
 800ad36:	b903      	cbnz	r3, 800ad3a <__sflush_r+0x76>
 800ad38:	6560      	str	r0, [r4, #84]	@ 0x54
 800ad3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad3c:	602f      	str	r7, [r5, #0]
 800ad3e:	b1b9      	cbz	r1, 800ad70 <__sflush_r+0xac>
 800ad40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad44:	4299      	cmp	r1, r3
 800ad46:	d002      	beq.n	800ad4e <__sflush_r+0x8a>
 800ad48:	4628      	mov	r0, r5
 800ad4a:	f7fe fbe5 	bl	8009518 <_free_r>
 800ad4e:	2300      	movs	r3, #0
 800ad50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad52:	e00d      	b.n	800ad70 <__sflush_r+0xac>
 800ad54:	2301      	movs	r3, #1
 800ad56:	4628      	mov	r0, r5
 800ad58:	47b0      	blx	r6
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	1c50      	adds	r0, r2, #1
 800ad5e:	d1c9      	bne.n	800acf4 <__sflush_r+0x30>
 800ad60:	682b      	ldr	r3, [r5, #0]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0c6      	beq.n	800acf4 <__sflush_r+0x30>
 800ad66:	2b1d      	cmp	r3, #29
 800ad68:	d001      	beq.n	800ad6e <__sflush_r+0xaa>
 800ad6a:	2b16      	cmp	r3, #22
 800ad6c:	d11d      	bne.n	800adaa <__sflush_r+0xe6>
 800ad6e:	602f      	str	r7, [r5, #0]
 800ad70:	2000      	movs	r0, #0
 800ad72:	e021      	b.n	800adb8 <__sflush_r+0xf4>
 800ad74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad78:	b21b      	sxth	r3, r3
 800ad7a:	e01a      	b.n	800adb2 <__sflush_r+0xee>
 800ad7c:	690f      	ldr	r7, [r1, #16]
 800ad7e:	2f00      	cmp	r7, #0
 800ad80:	d0f6      	beq.n	800ad70 <__sflush_r+0xac>
 800ad82:	0793      	lsls	r3, r2, #30
 800ad84:	bf18      	it	ne
 800ad86:	2300      	movne	r3, #0
 800ad88:	680e      	ldr	r6, [r1, #0]
 800ad8a:	bf08      	it	eq
 800ad8c:	694b      	ldreq	r3, [r1, #20]
 800ad8e:	1bf6      	subs	r6, r6, r7
 800ad90:	600f      	str	r7, [r1, #0]
 800ad92:	608b      	str	r3, [r1, #8]
 800ad94:	2e00      	cmp	r6, #0
 800ad96:	ddeb      	ble.n	800ad70 <__sflush_r+0xac>
 800ad98:	4633      	mov	r3, r6
 800ad9a:	463a      	mov	r2, r7
 800ad9c:	4628      	mov	r0, r5
 800ad9e:	6a21      	ldr	r1, [r4, #32]
 800ada0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800ada4:	47e0      	blx	ip
 800ada6:	2800      	cmp	r0, #0
 800ada8:	dc07      	bgt.n	800adba <__sflush_r+0xf6>
 800adaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800adb2:	f04f 30ff 	mov.w	r0, #4294967295
 800adb6:	81a3      	strh	r3, [r4, #12]
 800adb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adba:	4407      	add	r7, r0
 800adbc:	1a36      	subs	r6, r6, r0
 800adbe:	e7e9      	b.n	800ad94 <__sflush_r+0xd0>
 800adc0:	20400001 	.word	0x20400001

0800adc4 <_fflush_r>:
 800adc4:	b538      	push	{r3, r4, r5, lr}
 800adc6:	690b      	ldr	r3, [r1, #16]
 800adc8:	4605      	mov	r5, r0
 800adca:	460c      	mov	r4, r1
 800adcc:	b913      	cbnz	r3, 800add4 <_fflush_r+0x10>
 800adce:	2500      	movs	r5, #0
 800add0:	4628      	mov	r0, r5
 800add2:	bd38      	pop	{r3, r4, r5, pc}
 800add4:	b118      	cbz	r0, 800adde <_fflush_r+0x1a>
 800add6:	6a03      	ldr	r3, [r0, #32]
 800add8:	b90b      	cbnz	r3, 800adde <_fflush_r+0x1a>
 800adda:	f7fe fa21 	bl	8009220 <__sinit>
 800adde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d0f3      	beq.n	800adce <_fflush_r+0xa>
 800ade6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ade8:	07d0      	lsls	r0, r2, #31
 800adea:	d404      	bmi.n	800adf6 <_fflush_r+0x32>
 800adec:	0599      	lsls	r1, r3, #22
 800adee:	d402      	bmi.n	800adf6 <_fflush_r+0x32>
 800adf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800adf2:	f7fe fb7a 	bl	80094ea <__retarget_lock_acquire_recursive>
 800adf6:	4628      	mov	r0, r5
 800adf8:	4621      	mov	r1, r4
 800adfa:	f7ff ff63 	bl	800acc4 <__sflush_r>
 800adfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae00:	4605      	mov	r5, r0
 800ae02:	07da      	lsls	r2, r3, #31
 800ae04:	d4e4      	bmi.n	800add0 <_fflush_r+0xc>
 800ae06:	89a3      	ldrh	r3, [r4, #12]
 800ae08:	059b      	lsls	r3, r3, #22
 800ae0a:	d4e1      	bmi.n	800add0 <_fflush_r+0xc>
 800ae0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae0e:	f7fe fb6d 	bl	80094ec <__retarget_lock_release_recursive>
 800ae12:	e7dd      	b.n	800add0 <_fflush_r+0xc>

0800ae14 <memmove>:
 800ae14:	4288      	cmp	r0, r1
 800ae16:	b510      	push	{r4, lr}
 800ae18:	eb01 0402 	add.w	r4, r1, r2
 800ae1c:	d902      	bls.n	800ae24 <memmove+0x10>
 800ae1e:	4284      	cmp	r4, r0
 800ae20:	4623      	mov	r3, r4
 800ae22:	d807      	bhi.n	800ae34 <memmove+0x20>
 800ae24:	1e43      	subs	r3, r0, #1
 800ae26:	42a1      	cmp	r1, r4
 800ae28:	d008      	beq.n	800ae3c <memmove+0x28>
 800ae2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ae32:	e7f8      	b.n	800ae26 <memmove+0x12>
 800ae34:	4601      	mov	r1, r0
 800ae36:	4402      	add	r2, r0
 800ae38:	428a      	cmp	r2, r1
 800ae3a:	d100      	bne.n	800ae3e <memmove+0x2a>
 800ae3c:	bd10      	pop	{r4, pc}
 800ae3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ae42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ae46:	e7f7      	b.n	800ae38 <memmove+0x24>

0800ae48 <_sbrk_r>:
 800ae48:	b538      	push	{r3, r4, r5, lr}
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	4d05      	ldr	r5, [pc, #20]	@ (800ae64 <_sbrk_r+0x1c>)
 800ae4e:	4604      	mov	r4, r0
 800ae50:	4608      	mov	r0, r1
 800ae52:	602b      	str	r3, [r5, #0]
 800ae54:	f7f7 f9ec 	bl	8002230 <_sbrk>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d102      	bne.n	800ae62 <_sbrk_r+0x1a>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	b103      	cbz	r3, 800ae62 <_sbrk_r+0x1a>
 800ae60:	6023      	str	r3, [r4, #0]
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
 800ae64:	20002110 	.word	0x20002110

0800ae68 <memchr>:
 800ae68:	4603      	mov	r3, r0
 800ae6a:	b510      	push	{r4, lr}
 800ae6c:	b2c9      	uxtb	r1, r1
 800ae6e:	4402      	add	r2, r0
 800ae70:	4293      	cmp	r3, r2
 800ae72:	4618      	mov	r0, r3
 800ae74:	d101      	bne.n	800ae7a <memchr+0x12>
 800ae76:	2000      	movs	r0, #0
 800ae78:	e003      	b.n	800ae82 <memchr+0x1a>
 800ae7a:	7804      	ldrb	r4, [r0, #0]
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	428c      	cmp	r4, r1
 800ae80:	d1f6      	bne.n	800ae70 <memchr+0x8>
 800ae82:	bd10      	pop	{r4, pc}

0800ae84 <__assert_func>:
 800ae84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae86:	4614      	mov	r4, r2
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <__assert_func+0x2c>)
 800ae8c:	4605      	mov	r5, r0
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	68d8      	ldr	r0, [r3, #12]
 800ae92:	b14c      	cbz	r4, 800aea8 <__assert_func+0x24>
 800ae94:	4b07      	ldr	r3, [pc, #28]	@ (800aeb4 <__assert_func+0x30>)
 800ae96:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae9a:	9100      	str	r1, [sp, #0]
 800ae9c:	462b      	mov	r3, r5
 800ae9e:	4906      	ldr	r1, [pc, #24]	@ (800aeb8 <__assert_func+0x34>)
 800aea0:	f000 f858 	bl	800af54 <fiprintf>
 800aea4:	f000 f868 	bl	800af78 <abort>
 800aea8:	4b04      	ldr	r3, [pc, #16]	@ (800aebc <__assert_func+0x38>)
 800aeaa:	461c      	mov	r4, r3
 800aeac:	e7f3      	b.n	800ae96 <__assert_func+0x12>
 800aeae:	bf00      	nop
 800aeb0:	200002f4 	.word	0x200002f4
 800aeb4:	0800c700 	.word	0x0800c700
 800aeb8:	0800c70d 	.word	0x0800c70d
 800aebc:	0800c5a0 	.word	0x0800c5a0

0800aec0 <_calloc_r>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	fba1 5402 	umull	r5, r4, r1, r2
 800aec6:	b934      	cbnz	r4, 800aed6 <_calloc_r+0x16>
 800aec8:	4629      	mov	r1, r5
 800aeca:	f7fe fec9 	bl	8009c60 <_malloc_r>
 800aece:	4606      	mov	r6, r0
 800aed0:	b928      	cbnz	r0, 800aede <_calloc_r+0x1e>
 800aed2:	4630      	mov	r0, r6
 800aed4:	bd70      	pop	{r4, r5, r6, pc}
 800aed6:	220c      	movs	r2, #12
 800aed8:	2600      	movs	r6, #0
 800aeda:	6002      	str	r2, [r0, #0]
 800aedc:	e7f9      	b.n	800aed2 <_calloc_r+0x12>
 800aede:	462a      	mov	r2, r5
 800aee0:	4621      	mov	r1, r4
 800aee2:	f7fe fa4c 	bl	800937e <memset>
 800aee6:	e7f4      	b.n	800aed2 <_calloc_r+0x12>

0800aee8 <malloc>:
 800aee8:	4b02      	ldr	r3, [pc, #8]	@ (800aef4 <malloc+0xc>)
 800aeea:	4601      	mov	r1, r0
 800aeec:	6818      	ldr	r0, [r3, #0]
 800aeee:	f7fe beb7 	b.w	8009c60 <_malloc_r>
 800aef2:	bf00      	nop
 800aef4:	200002f4 	.word	0x200002f4

0800aef8 <_realloc_r>:
 800aef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aefc:	4607      	mov	r7, r0
 800aefe:	4614      	mov	r4, r2
 800af00:	460d      	mov	r5, r1
 800af02:	b921      	cbnz	r1, 800af0e <_realloc_r+0x16>
 800af04:	4611      	mov	r1, r2
 800af06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af0a:	f7fe bea9 	b.w	8009c60 <_malloc_r>
 800af0e:	b92a      	cbnz	r2, 800af1c <_realloc_r+0x24>
 800af10:	f7fe fb02 	bl	8009518 <_free_r>
 800af14:	4625      	mov	r5, r4
 800af16:	4628      	mov	r0, r5
 800af18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af1c:	f000 f833 	bl	800af86 <_malloc_usable_size_r>
 800af20:	4284      	cmp	r4, r0
 800af22:	4606      	mov	r6, r0
 800af24:	d802      	bhi.n	800af2c <_realloc_r+0x34>
 800af26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af2a:	d8f4      	bhi.n	800af16 <_realloc_r+0x1e>
 800af2c:	4621      	mov	r1, r4
 800af2e:	4638      	mov	r0, r7
 800af30:	f7fe fe96 	bl	8009c60 <_malloc_r>
 800af34:	4680      	mov	r8, r0
 800af36:	b908      	cbnz	r0, 800af3c <_realloc_r+0x44>
 800af38:	4645      	mov	r5, r8
 800af3a:	e7ec      	b.n	800af16 <_realloc_r+0x1e>
 800af3c:	42b4      	cmp	r4, r6
 800af3e:	4622      	mov	r2, r4
 800af40:	4629      	mov	r1, r5
 800af42:	bf28      	it	cs
 800af44:	4632      	movcs	r2, r6
 800af46:	f7fe fad2 	bl	80094ee <memcpy>
 800af4a:	4629      	mov	r1, r5
 800af4c:	4638      	mov	r0, r7
 800af4e:	f7fe fae3 	bl	8009518 <_free_r>
 800af52:	e7f1      	b.n	800af38 <_realloc_r+0x40>

0800af54 <fiprintf>:
 800af54:	b40e      	push	{r1, r2, r3}
 800af56:	b503      	push	{r0, r1, lr}
 800af58:	4601      	mov	r1, r0
 800af5a:	ab03      	add	r3, sp, #12
 800af5c:	4805      	ldr	r0, [pc, #20]	@ (800af74 <fiprintf+0x20>)
 800af5e:	f853 2b04 	ldr.w	r2, [r3], #4
 800af62:	6800      	ldr	r0, [r0, #0]
 800af64:	9301      	str	r3, [sp, #4]
 800af66:	f000 f83d 	bl	800afe4 <_vfiprintf_r>
 800af6a:	b002      	add	sp, #8
 800af6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800af70:	b003      	add	sp, #12
 800af72:	4770      	bx	lr
 800af74:	200002f4 	.word	0x200002f4

0800af78 <abort>:
 800af78:	2006      	movs	r0, #6
 800af7a:	b508      	push	{r3, lr}
 800af7c:	f000 fa06 	bl	800b38c <raise>
 800af80:	2001      	movs	r0, #1
 800af82:	f7f7 f927 	bl	80021d4 <_exit>

0800af86 <_malloc_usable_size_r>:
 800af86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af8a:	1f18      	subs	r0, r3, #4
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	bfbc      	itt	lt
 800af90:	580b      	ldrlt	r3, [r1, r0]
 800af92:	18c0      	addlt	r0, r0, r3
 800af94:	4770      	bx	lr

0800af96 <__sfputc_r>:
 800af96:	6893      	ldr	r3, [r2, #8]
 800af98:	b410      	push	{r4}
 800af9a:	3b01      	subs	r3, #1
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	6093      	str	r3, [r2, #8]
 800afa0:	da07      	bge.n	800afb2 <__sfputc_r+0x1c>
 800afa2:	6994      	ldr	r4, [r2, #24]
 800afa4:	42a3      	cmp	r3, r4
 800afa6:	db01      	blt.n	800afac <__sfputc_r+0x16>
 800afa8:	290a      	cmp	r1, #10
 800afaa:	d102      	bne.n	800afb2 <__sfputc_r+0x1c>
 800afac:	bc10      	pop	{r4}
 800afae:	f000 b931 	b.w	800b214 <__swbuf_r>
 800afb2:	6813      	ldr	r3, [r2, #0]
 800afb4:	1c58      	adds	r0, r3, #1
 800afb6:	6010      	str	r0, [r2, #0]
 800afb8:	7019      	strb	r1, [r3, #0]
 800afba:	4608      	mov	r0, r1
 800afbc:	bc10      	pop	{r4}
 800afbe:	4770      	bx	lr

0800afc0 <__sfputs_r>:
 800afc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afc2:	4606      	mov	r6, r0
 800afc4:	460f      	mov	r7, r1
 800afc6:	4614      	mov	r4, r2
 800afc8:	18d5      	adds	r5, r2, r3
 800afca:	42ac      	cmp	r4, r5
 800afcc:	d101      	bne.n	800afd2 <__sfputs_r+0x12>
 800afce:	2000      	movs	r0, #0
 800afd0:	e007      	b.n	800afe2 <__sfputs_r+0x22>
 800afd2:	463a      	mov	r2, r7
 800afd4:	4630      	mov	r0, r6
 800afd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afda:	f7ff ffdc 	bl	800af96 <__sfputc_r>
 800afde:	1c43      	adds	r3, r0, #1
 800afe0:	d1f3      	bne.n	800afca <__sfputs_r+0xa>
 800afe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800afe4 <_vfiprintf_r>:
 800afe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe8:	460d      	mov	r5, r1
 800afea:	4614      	mov	r4, r2
 800afec:	4698      	mov	r8, r3
 800afee:	4606      	mov	r6, r0
 800aff0:	b09d      	sub	sp, #116	@ 0x74
 800aff2:	b118      	cbz	r0, 800affc <_vfiprintf_r+0x18>
 800aff4:	6a03      	ldr	r3, [r0, #32]
 800aff6:	b90b      	cbnz	r3, 800affc <_vfiprintf_r+0x18>
 800aff8:	f7fe f912 	bl	8009220 <__sinit>
 800affc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800affe:	07d9      	lsls	r1, r3, #31
 800b000:	d405      	bmi.n	800b00e <_vfiprintf_r+0x2a>
 800b002:	89ab      	ldrh	r3, [r5, #12]
 800b004:	059a      	lsls	r2, r3, #22
 800b006:	d402      	bmi.n	800b00e <_vfiprintf_r+0x2a>
 800b008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b00a:	f7fe fa6e 	bl	80094ea <__retarget_lock_acquire_recursive>
 800b00e:	89ab      	ldrh	r3, [r5, #12]
 800b010:	071b      	lsls	r3, r3, #28
 800b012:	d501      	bpl.n	800b018 <_vfiprintf_r+0x34>
 800b014:	692b      	ldr	r3, [r5, #16]
 800b016:	b99b      	cbnz	r3, 800b040 <_vfiprintf_r+0x5c>
 800b018:	4629      	mov	r1, r5
 800b01a:	4630      	mov	r0, r6
 800b01c:	f000 f938 	bl	800b290 <__swsetup_r>
 800b020:	b170      	cbz	r0, 800b040 <_vfiprintf_r+0x5c>
 800b022:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b024:	07dc      	lsls	r4, r3, #31
 800b026:	d504      	bpl.n	800b032 <_vfiprintf_r+0x4e>
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	b01d      	add	sp, #116	@ 0x74
 800b02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b032:	89ab      	ldrh	r3, [r5, #12]
 800b034:	0598      	lsls	r0, r3, #22
 800b036:	d4f7      	bmi.n	800b028 <_vfiprintf_r+0x44>
 800b038:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b03a:	f7fe fa57 	bl	80094ec <__retarget_lock_release_recursive>
 800b03e:	e7f3      	b.n	800b028 <_vfiprintf_r+0x44>
 800b040:	2300      	movs	r3, #0
 800b042:	9309      	str	r3, [sp, #36]	@ 0x24
 800b044:	2320      	movs	r3, #32
 800b046:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b04a:	2330      	movs	r3, #48	@ 0x30
 800b04c:	f04f 0901 	mov.w	r9, #1
 800b050:	f8cd 800c 	str.w	r8, [sp, #12]
 800b054:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b200 <_vfiprintf_r+0x21c>
 800b058:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b05c:	4623      	mov	r3, r4
 800b05e:	469a      	mov	sl, r3
 800b060:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b064:	b10a      	cbz	r2, 800b06a <_vfiprintf_r+0x86>
 800b066:	2a25      	cmp	r2, #37	@ 0x25
 800b068:	d1f9      	bne.n	800b05e <_vfiprintf_r+0x7a>
 800b06a:	ebba 0b04 	subs.w	fp, sl, r4
 800b06e:	d00b      	beq.n	800b088 <_vfiprintf_r+0xa4>
 800b070:	465b      	mov	r3, fp
 800b072:	4622      	mov	r2, r4
 800b074:	4629      	mov	r1, r5
 800b076:	4630      	mov	r0, r6
 800b078:	f7ff ffa2 	bl	800afc0 <__sfputs_r>
 800b07c:	3001      	adds	r0, #1
 800b07e:	f000 80a7 	beq.w	800b1d0 <_vfiprintf_r+0x1ec>
 800b082:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b084:	445a      	add	r2, fp
 800b086:	9209      	str	r2, [sp, #36]	@ 0x24
 800b088:	f89a 3000 	ldrb.w	r3, [sl]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f000 809f 	beq.w	800b1d0 <_vfiprintf_r+0x1ec>
 800b092:	2300      	movs	r3, #0
 800b094:	f04f 32ff 	mov.w	r2, #4294967295
 800b098:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b09c:	f10a 0a01 	add.w	sl, sl, #1
 800b0a0:	9304      	str	r3, [sp, #16]
 800b0a2:	9307      	str	r3, [sp, #28]
 800b0a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0aa:	4654      	mov	r4, sl
 800b0ac:	2205      	movs	r2, #5
 800b0ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0b2:	4853      	ldr	r0, [pc, #332]	@ (800b200 <_vfiprintf_r+0x21c>)
 800b0b4:	f7ff fed8 	bl	800ae68 <memchr>
 800b0b8:	9a04      	ldr	r2, [sp, #16]
 800b0ba:	b9d8      	cbnz	r0, 800b0f4 <_vfiprintf_r+0x110>
 800b0bc:	06d1      	lsls	r1, r2, #27
 800b0be:	bf44      	itt	mi
 800b0c0:	2320      	movmi	r3, #32
 800b0c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0c6:	0713      	lsls	r3, r2, #28
 800b0c8:	bf44      	itt	mi
 800b0ca:	232b      	movmi	r3, #43	@ 0x2b
 800b0cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0d6:	d015      	beq.n	800b104 <_vfiprintf_r+0x120>
 800b0d8:	4654      	mov	r4, sl
 800b0da:	2000      	movs	r0, #0
 800b0dc:	f04f 0c0a 	mov.w	ip, #10
 800b0e0:	9a07      	ldr	r2, [sp, #28]
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0e8:	3b30      	subs	r3, #48	@ 0x30
 800b0ea:	2b09      	cmp	r3, #9
 800b0ec:	d94b      	bls.n	800b186 <_vfiprintf_r+0x1a2>
 800b0ee:	b1b0      	cbz	r0, 800b11e <_vfiprintf_r+0x13a>
 800b0f0:	9207      	str	r2, [sp, #28]
 800b0f2:	e014      	b.n	800b11e <_vfiprintf_r+0x13a>
 800b0f4:	eba0 0308 	sub.w	r3, r0, r8
 800b0f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	46a2      	mov	sl, r4
 800b100:	9304      	str	r3, [sp, #16]
 800b102:	e7d2      	b.n	800b0aa <_vfiprintf_r+0xc6>
 800b104:	9b03      	ldr	r3, [sp, #12]
 800b106:	1d19      	adds	r1, r3, #4
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	9103      	str	r1, [sp, #12]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	bfbb      	ittet	lt
 800b110:	425b      	neglt	r3, r3
 800b112:	f042 0202 	orrlt.w	r2, r2, #2
 800b116:	9307      	strge	r3, [sp, #28]
 800b118:	9307      	strlt	r3, [sp, #28]
 800b11a:	bfb8      	it	lt
 800b11c:	9204      	strlt	r2, [sp, #16]
 800b11e:	7823      	ldrb	r3, [r4, #0]
 800b120:	2b2e      	cmp	r3, #46	@ 0x2e
 800b122:	d10a      	bne.n	800b13a <_vfiprintf_r+0x156>
 800b124:	7863      	ldrb	r3, [r4, #1]
 800b126:	2b2a      	cmp	r3, #42	@ 0x2a
 800b128:	d132      	bne.n	800b190 <_vfiprintf_r+0x1ac>
 800b12a:	9b03      	ldr	r3, [sp, #12]
 800b12c:	3402      	adds	r4, #2
 800b12e:	1d1a      	adds	r2, r3, #4
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	9203      	str	r2, [sp, #12]
 800b134:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b138:	9305      	str	r3, [sp, #20]
 800b13a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b204 <_vfiprintf_r+0x220>
 800b13e:	2203      	movs	r2, #3
 800b140:	4650      	mov	r0, sl
 800b142:	7821      	ldrb	r1, [r4, #0]
 800b144:	f7ff fe90 	bl	800ae68 <memchr>
 800b148:	b138      	cbz	r0, 800b15a <_vfiprintf_r+0x176>
 800b14a:	2240      	movs	r2, #64	@ 0x40
 800b14c:	9b04      	ldr	r3, [sp, #16]
 800b14e:	eba0 000a 	sub.w	r0, r0, sl
 800b152:	4082      	lsls	r2, r0
 800b154:	4313      	orrs	r3, r2
 800b156:	3401      	adds	r4, #1
 800b158:	9304      	str	r3, [sp, #16]
 800b15a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b15e:	2206      	movs	r2, #6
 800b160:	4829      	ldr	r0, [pc, #164]	@ (800b208 <_vfiprintf_r+0x224>)
 800b162:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b166:	f7ff fe7f 	bl	800ae68 <memchr>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d03f      	beq.n	800b1ee <_vfiprintf_r+0x20a>
 800b16e:	4b27      	ldr	r3, [pc, #156]	@ (800b20c <_vfiprintf_r+0x228>)
 800b170:	bb1b      	cbnz	r3, 800b1ba <_vfiprintf_r+0x1d6>
 800b172:	9b03      	ldr	r3, [sp, #12]
 800b174:	3307      	adds	r3, #7
 800b176:	f023 0307 	bic.w	r3, r3, #7
 800b17a:	3308      	adds	r3, #8
 800b17c:	9303      	str	r3, [sp, #12]
 800b17e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b180:	443b      	add	r3, r7
 800b182:	9309      	str	r3, [sp, #36]	@ 0x24
 800b184:	e76a      	b.n	800b05c <_vfiprintf_r+0x78>
 800b186:	460c      	mov	r4, r1
 800b188:	2001      	movs	r0, #1
 800b18a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b18e:	e7a8      	b.n	800b0e2 <_vfiprintf_r+0xfe>
 800b190:	2300      	movs	r3, #0
 800b192:	f04f 0c0a 	mov.w	ip, #10
 800b196:	4619      	mov	r1, r3
 800b198:	3401      	adds	r4, #1
 800b19a:	9305      	str	r3, [sp, #20]
 800b19c:	4620      	mov	r0, r4
 800b19e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1a2:	3a30      	subs	r2, #48	@ 0x30
 800b1a4:	2a09      	cmp	r2, #9
 800b1a6:	d903      	bls.n	800b1b0 <_vfiprintf_r+0x1cc>
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d0c6      	beq.n	800b13a <_vfiprintf_r+0x156>
 800b1ac:	9105      	str	r1, [sp, #20]
 800b1ae:	e7c4      	b.n	800b13a <_vfiprintf_r+0x156>
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1b8:	e7f0      	b.n	800b19c <_vfiprintf_r+0x1b8>
 800b1ba:	ab03      	add	r3, sp, #12
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	462a      	mov	r2, r5
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	4b13      	ldr	r3, [pc, #76]	@ (800b210 <_vfiprintf_r+0x22c>)
 800b1c4:	a904      	add	r1, sp, #16
 800b1c6:	f3af 8000 	nop.w
 800b1ca:	4607      	mov	r7, r0
 800b1cc:	1c78      	adds	r0, r7, #1
 800b1ce:	d1d6      	bne.n	800b17e <_vfiprintf_r+0x19a>
 800b1d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1d2:	07d9      	lsls	r1, r3, #31
 800b1d4:	d405      	bmi.n	800b1e2 <_vfiprintf_r+0x1fe>
 800b1d6:	89ab      	ldrh	r3, [r5, #12]
 800b1d8:	059a      	lsls	r2, r3, #22
 800b1da:	d402      	bmi.n	800b1e2 <_vfiprintf_r+0x1fe>
 800b1dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1de:	f7fe f985 	bl	80094ec <__retarget_lock_release_recursive>
 800b1e2:	89ab      	ldrh	r3, [r5, #12]
 800b1e4:	065b      	lsls	r3, r3, #25
 800b1e6:	f53f af1f 	bmi.w	800b028 <_vfiprintf_r+0x44>
 800b1ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1ec:	e71e      	b.n	800b02c <_vfiprintf_r+0x48>
 800b1ee:	ab03      	add	r3, sp, #12
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	462a      	mov	r2, r5
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	4b06      	ldr	r3, [pc, #24]	@ (800b210 <_vfiprintf_r+0x22c>)
 800b1f8:	a904      	add	r1, sp, #16
 800b1fa:	f7ff fc45 	bl	800aa88 <_printf_i>
 800b1fe:	e7e4      	b.n	800b1ca <_vfiprintf_r+0x1e6>
 800b200:	0800c6cd 	.word	0x0800c6cd
 800b204:	0800c6d3 	.word	0x0800c6d3
 800b208:	0800c6d7 	.word	0x0800c6d7
 800b20c:	00000000 	.word	0x00000000
 800b210:	0800afc1 	.word	0x0800afc1

0800b214 <__swbuf_r>:
 800b214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b216:	460e      	mov	r6, r1
 800b218:	4614      	mov	r4, r2
 800b21a:	4605      	mov	r5, r0
 800b21c:	b118      	cbz	r0, 800b226 <__swbuf_r+0x12>
 800b21e:	6a03      	ldr	r3, [r0, #32]
 800b220:	b90b      	cbnz	r3, 800b226 <__swbuf_r+0x12>
 800b222:	f7fd fffd 	bl	8009220 <__sinit>
 800b226:	69a3      	ldr	r3, [r4, #24]
 800b228:	60a3      	str	r3, [r4, #8]
 800b22a:	89a3      	ldrh	r3, [r4, #12]
 800b22c:	071a      	lsls	r2, r3, #28
 800b22e:	d501      	bpl.n	800b234 <__swbuf_r+0x20>
 800b230:	6923      	ldr	r3, [r4, #16]
 800b232:	b943      	cbnz	r3, 800b246 <__swbuf_r+0x32>
 800b234:	4621      	mov	r1, r4
 800b236:	4628      	mov	r0, r5
 800b238:	f000 f82a 	bl	800b290 <__swsetup_r>
 800b23c:	b118      	cbz	r0, 800b246 <__swbuf_r+0x32>
 800b23e:	f04f 37ff 	mov.w	r7, #4294967295
 800b242:	4638      	mov	r0, r7
 800b244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	6922      	ldr	r2, [r4, #16]
 800b24a:	b2f6      	uxtb	r6, r6
 800b24c:	1a98      	subs	r0, r3, r2
 800b24e:	6963      	ldr	r3, [r4, #20]
 800b250:	4637      	mov	r7, r6
 800b252:	4283      	cmp	r3, r0
 800b254:	dc05      	bgt.n	800b262 <__swbuf_r+0x4e>
 800b256:	4621      	mov	r1, r4
 800b258:	4628      	mov	r0, r5
 800b25a:	f7ff fdb3 	bl	800adc4 <_fflush_r>
 800b25e:	2800      	cmp	r0, #0
 800b260:	d1ed      	bne.n	800b23e <__swbuf_r+0x2a>
 800b262:	68a3      	ldr	r3, [r4, #8]
 800b264:	3b01      	subs	r3, #1
 800b266:	60a3      	str	r3, [r4, #8]
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	6022      	str	r2, [r4, #0]
 800b26e:	701e      	strb	r6, [r3, #0]
 800b270:	6962      	ldr	r2, [r4, #20]
 800b272:	1c43      	adds	r3, r0, #1
 800b274:	429a      	cmp	r2, r3
 800b276:	d004      	beq.n	800b282 <__swbuf_r+0x6e>
 800b278:	89a3      	ldrh	r3, [r4, #12]
 800b27a:	07db      	lsls	r3, r3, #31
 800b27c:	d5e1      	bpl.n	800b242 <__swbuf_r+0x2e>
 800b27e:	2e0a      	cmp	r6, #10
 800b280:	d1df      	bne.n	800b242 <__swbuf_r+0x2e>
 800b282:	4621      	mov	r1, r4
 800b284:	4628      	mov	r0, r5
 800b286:	f7ff fd9d 	bl	800adc4 <_fflush_r>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	d0d9      	beq.n	800b242 <__swbuf_r+0x2e>
 800b28e:	e7d6      	b.n	800b23e <__swbuf_r+0x2a>

0800b290 <__swsetup_r>:
 800b290:	b538      	push	{r3, r4, r5, lr}
 800b292:	4b29      	ldr	r3, [pc, #164]	@ (800b338 <__swsetup_r+0xa8>)
 800b294:	4605      	mov	r5, r0
 800b296:	6818      	ldr	r0, [r3, #0]
 800b298:	460c      	mov	r4, r1
 800b29a:	b118      	cbz	r0, 800b2a4 <__swsetup_r+0x14>
 800b29c:	6a03      	ldr	r3, [r0, #32]
 800b29e:	b90b      	cbnz	r3, 800b2a4 <__swsetup_r+0x14>
 800b2a0:	f7fd ffbe 	bl	8009220 <__sinit>
 800b2a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a8:	0719      	lsls	r1, r3, #28
 800b2aa:	d422      	bmi.n	800b2f2 <__swsetup_r+0x62>
 800b2ac:	06da      	lsls	r2, r3, #27
 800b2ae:	d407      	bmi.n	800b2c0 <__swsetup_r+0x30>
 800b2b0:	2209      	movs	r2, #9
 800b2b2:	602a      	str	r2, [r5, #0]
 800b2b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	e033      	b.n	800b328 <__swsetup_r+0x98>
 800b2c0:	0758      	lsls	r0, r3, #29
 800b2c2:	d512      	bpl.n	800b2ea <__swsetup_r+0x5a>
 800b2c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2c6:	b141      	cbz	r1, 800b2da <__swsetup_r+0x4a>
 800b2c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2cc:	4299      	cmp	r1, r3
 800b2ce:	d002      	beq.n	800b2d6 <__swsetup_r+0x46>
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	f7fe f921 	bl	8009518 <_free_r>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2da:	89a3      	ldrh	r3, [r4, #12]
 800b2dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b2e0:	81a3      	strh	r3, [r4, #12]
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	6063      	str	r3, [r4, #4]
 800b2e6:	6923      	ldr	r3, [r4, #16]
 800b2e8:	6023      	str	r3, [r4, #0]
 800b2ea:	89a3      	ldrh	r3, [r4, #12]
 800b2ec:	f043 0308 	orr.w	r3, r3, #8
 800b2f0:	81a3      	strh	r3, [r4, #12]
 800b2f2:	6923      	ldr	r3, [r4, #16]
 800b2f4:	b94b      	cbnz	r3, 800b30a <__swsetup_r+0x7a>
 800b2f6:	89a3      	ldrh	r3, [r4, #12]
 800b2f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b2fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b300:	d003      	beq.n	800b30a <__swsetup_r+0x7a>
 800b302:	4621      	mov	r1, r4
 800b304:	4628      	mov	r0, r5
 800b306:	f000 f882 	bl	800b40e <__smakebuf_r>
 800b30a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b30e:	f013 0201 	ands.w	r2, r3, #1
 800b312:	d00a      	beq.n	800b32a <__swsetup_r+0x9a>
 800b314:	2200      	movs	r2, #0
 800b316:	60a2      	str	r2, [r4, #8]
 800b318:	6962      	ldr	r2, [r4, #20]
 800b31a:	4252      	negs	r2, r2
 800b31c:	61a2      	str	r2, [r4, #24]
 800b31e:	6922      	ldr	r2, [r4, #16]
 800b320:	b942      	cbnz	r2, 800b334 <__swsetup_r+0xa4>
 800b322:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b326:	d1c5      	bne.n	800b2b4 <__swsetup_r+0x24>
 800b328:	bd38      	pop	{r3, r4, r5, pc}
 800b32a:	0799      	lsls	r1, r3, #30
 800b32c:	bf58      	it	pl
 800b32e:	6962      	ldrpl	r2, [r4, #20]
 800b330:	60a2      	str	r2, [r4, #8]
 800b332:	e7f4      	b.n	800b31e <__swsetup_r+0x8e>
 800b334:	2000      	movs	r0, #0
 800b336:	e7f7      	b.n	800b328 <__swsetup_r+0x98>
 800b338:	200002f4 	.word	0x200002f4

0800b33c <_raise_r>:
 800b33c:	291f      	cmp	r1, #31
 800b33e:	b538      	push	{r3, r4, r5, lr}
 800b340:	4605      	mov	r5, r0
 800b342:	460c      	mov	r4, r1
 800b344:	d904      	bls.n	800b350 <_raise_r+0x14>
 800b346:	2316      	movs	r3, #22
 800b348:	6003      	str	r3, [r0, #0]
 800b34a:	f04f 30ff 	mov.w	r0, #4294967295
 800b34e:	bd38      	pop	{r3, r4, r5, pc}
 800b350:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b352:	b112      	cbz	r2, 800b35a <_raise_r+0x1e>
 800b354:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b358:	b94b      	cbnz	r3, 800b36e <_raise_r+0x32>
 800b35a:	4628      	mov	r0, r5
 800b35c:	f000 f830 	bl	800b3c0 <_getpid_r>
 800b360:	4622      	mov	r2, r4
 800b362:	4601      	mov	r1, r0
 800b364:	4628      	mov	r0, r5
 800b366:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b36a:	f000 b817 	b.w	800b39c <_kill_r>
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d00a      	beq.n	800b388 <_raise_r+0x4c>
 800b372:	1c59      	adds	r1, r3, #1
 800b374:	d103      	bne.n	800b37e <_raise_r+0x42>
 800b376:	2316      	movs	r3, #22
 800b378:	6003      	str	r3, [r0, #0]
 800b37a:	2001      	movs	r0, #1
 800b37c:	e7e7      	b.n	800b34e <_raise_r+0x12>
 800b37e:	2100      	movs	r1, #0
 800b380:	4620      	mov	r0, r4
 800b382:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b386:	4798      	blx	r3
 800b388:	2000      	movs	r0, #0
 800b38a:	e7e0      	b.n	800b34e <_raise_r+0x12>

0800b38c <raise>:
 800b38c:	4b02      	ldr	r3, [pc, #8]	@ (800b398 <raise+0xc>)
 800b38e:	4601      	mov	r1, r0
 800b390:	6818      	ldr	r0, [r3, #0]
 800b392:	f7ff bfd3 	b.w	800b33c <_raise_r>
 800b396:	bf00      	nop
 800b398:	200002f4 	.word	0x200002f4

0800b39c <_kill_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	2300      	movs	r3, #0
 800b3a0:	4d06      	ldr	r5, [pc, #24]	@ (800b3bc <_kill_r+0x20>)
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	4611      	mov	r1, r2
 800b3a8:	602b      	str	r3, [r5, #0]
 800b3aa:	f7f6 ff0b 	bl	80021c4 <_kill>
 800b3ae:	1c43      	adds	r3, r0, #1
 800b3b0:	d102      	bne.n	800b3b8 <_kill_r+0x1c>
 800b3b2:	682b      	ldr	r3, [r5, #0]
 800b3b4:	b103      	cbz	r3, 800b3b8 <_kill_r+0x1c>
 800b3b6:	6023      	str	r3, [r4, #0]
 800b3b8:	bd38      	pop	{r3, r4, r5, pc}
 800b3ba:	bf00      	nop
 800b3bc:	20002110 	.word	0x20002110

0800b3c0 <_getpid_r>:
 800b3c0:	f7f6 befe 	b.w	80021c0 <_getpid>

0800b3c4 <__swhatbuf_r>:
 800b3c4:	b570      	push	{r4, r5, r6, lr}
 800b3c6:	460c      	mov	r4, r1
 800b3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3cc:	4615      	mov	r5, r2
 800b3ce:	2900      	cmp	r1, #0
 800b3d0:	461e      	mov	r6, r3
 800b3d2:	b096      	sub	sp, #88	@ 0x58
 800b3d4:	da0c      	bge.n	800b3f0 <__swhatbuf_r+0x2c>
 800b3d6:	89a3      	ldrh	r3, [r4, #12]
 800b3d8:	2100      	movs	r1, #0
 800b3da:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b3de:	bf14      	ite	ne
 800b3e0:	2340      	movne	r3, #64	@ 0x40
 800b3e2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b3e6:	2000      	movs	r0, #0
 800b3e8:	6031      	str	r1, [r6, #0]
 800b3ea:	602b      	str	r3, [r5, #0]
 800b3ec:	b016      	add	sp, #88	@ 0x58
 800b3ee:	bd70      	pop	{r4, r5, r6, pc}
 800b3f0:	466a      	mov	r2, sp
 800b3f2:	f000 f849 	bl	800b488 <_fstat_r>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	dbed      	blt.n	800b3d6 <__swhatbuf_r+0x12>
 800b3fa:	9901      	ldr	r1, [sp, #4]
 800b3fc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b400:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b404:	4259      	negs	r1, r3
 800b406:	4159      	adcs	r1, r3
 800b408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b40c:	e7eb      	b.n	800b3e6 <__swhatbuf_r+0x22>

0800b40e <__smakebuf_r>:
 800b40e:	898b      	ldrh	r3, [r1, #12]
 800b410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b412:	079d      	lsls	r5, r3, #30
 800b414:	4606      	mov	r6, r0
 800b416:	460c      	mov	r4, r1
 800b418:	d507      	bpl.n	800b42a <__smakebuf_r+0x1c>
 800b41a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b41e:	6023      	str	r3, [r4, #0]
 800b420:	6123      	str	r3, [r4, #16]
 800b422:	2301      	movs	r3, #1
 800b424:	6163      	str	r3, [r4, #20]
 800b426:	b003      	add	sp, #12
 800b428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b42a:	466a      	mov	r2, sp
 800b42c:	ab01      	add	r3, sp, #4
 800b42e:	f7ff ffc9 	bl	800b3c4 <__swhatbuf_r>
 800b432:	9f00      	ldr	r7, [sp, #0]
 800b434:	4605      	mov	r5, r0
 800b436:	4639      	mov	r1, r7
 800b438:	4630      	mov	r0, r6
 800b43a:	f7fe fc11 	bl	8009c60 <_malloc_r>
 800b43e:	b948      	cbnz	r0, 800b454 <__smakebuf_r+0x46>
 800b440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b444:	059a      	lsls	r2, r3, #22
 800b446:	d4ee      	bmi.n	800b426 <__smakebuf_r+0x18>
 800b448:	f023 0303 	bic.w	r3, r3, #3
 800b44c:	f043 0302 	orr.w	r3, r3, #2
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	e7e2      	b.n	800b41a <__smakebuf_r+0xc>
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b45a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b45e:	81a3      	strh	r3, [r4, #12]
 800b460:	9b01      	ldr	r3, [sp, #4]
 800b462:	6020      	str	r0, [r4, #0]
 800b464:	b15b      	cbz	r3, 800b47e <__smakebuf_r+0x70>
 800b466:	4630      	mov	r0, r6
 800b468:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b46c:	f000 f81e 	bl	800b4ac <_isatty_r>
 800b470:	b128      	cbz	r0, 800b47e <__smakebuf_r+0x70>
 800b472:	89a3      	ldrh	r3, [r4, #12]
 800b474:	f023 0303 	bic.w	r3, r3, #3
 800b478:	f043 0301 	orr.w	r3, r3, #1
 800b47c:	81a3      	strh	r3, [r4, #12]
 800b47e:	89a3      	ldrh	r3, [r4, #12]
 800b480:	431d      	orrs	r5, r3
 800b482:	81a5      	strh	r5, [r4, #12]
 800b484:	e7cf      	b.n	800b426 <__smakebuf_r+0x18>
	...

0800b488 <_fstat_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	2300      	movs	r3, #0
 800b48c:	4d06      	ldr	r5, [pc, #24]	@ (800b4a8 <_fstat_r+0x20>)
 800b48e:	4604      	mov	r4, r0
 800b490:	4608      	mov	r0, r1
 800b492:	4611      	mov	r1, r2
 800b494:	602b      	str	r3, [r5, #0]
 800b496:	f7f6 fec2 	bl	800221e <_fstat>
 800b49a:	1c43      	adds	r3, r0, #1
 800b49c:	d102      	bne.n	800b4a4 <_fstat_r+0x1c>
 800b49e:	682b      	ldr	r3, [r5, #0]
 800b4a0:	b103      	cbz	r3, 800b4a4 <_fstat_r+0x1c>
 800b4a2:	6023      	str	r3, [r4, #0]
 800b4a4:	bd38      	pop	{r3, r4, r5, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20002110 	.word	0x20002110

0800b4ac <_isatty_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	4d05      	ldr	r5, [pc, #20]	@ (800b4c8 <_isatty_r+0x1c>)
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	602b      	str	r3, [r5, #0]
 800b4b8:	f7f6 feb6 	bl	8002228 <_isatty>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d102      	bne.n	800b4c6 <_isatty_r+0x1a>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	b103      	cbz	r3, 800b4c6 <_isatty_r+0x1a>
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	20002110 	.word	0x20002110

0800b4cc <atan2f>:
 800b4cc:	f000 b9f2 	b.w	800b8b4 <__ieee754_atan2f>

0800b4d0 <sqrtf>:
 800b4d0:	b538      	push	{r3, r4, r5, lr}
 800b4d2:	4605      	mov	r5, r0
 800b4d4:	f000 f888 	bl	800b5e8 <__ieee754_sqrtf>
 800b4d8:	4629      	mov	r1, r5
 800b4da:	4604      	mov	r4, r0
 800b4dc:	4628      	mov	r0, r5
 800b4de:	f7f5 fde3 	bl	80010a8 <__aeabi_fcmpun>
 800b4e2:	b968      	cbnz	r0, 800b500 <sqrtf+0x30>
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	4628      	mov	r0, r5
 800b4e8:	f7f5 fdb6 	bl	8001058 <__aeabi_fcmplt>
 800b4ec:	b140      	cbz	r0, 800b500 <sqrtf+0x30>
 800b4ee:	f7fd ffd1 	bl	8009494 <__errno>
 800b4f2:	2321      	movs	r3, #33	@ 0x21
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	6003      	str	r3, [r0, #0]
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	f7f5 fcc3 	bl	8000e84 <__aeabi_fdiv>
 800b4fe:	4604      	mov	r4, r0
 800b500:	4620      	mov	r0, r4
 800b502:	bd38      	pop	{r3, r4, r5, pc}

0800b504 <cosf>:
 800b504:	b507      	push	{r0, r1, r2, lr}
 800b506:	4a1a      	ldr	r2, [pc, #104]	@ (800b570 <cosf+0x6c>)
 800b508:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b50c:	4293      	cmp	r3, r2
 800b50e:	4601      	mov	r1, r0
 800b510:	d805      	bhi.n	800b51e <cosf+0x1a>
 800b512:	2100      	movs	r1, #0
 800b514:	b003      	add	sp, #12
 800b516:	f85d eb04 	ldr.w	lr, [sp], #4
 800b51a:	f000 b8d5 	b.w	800b6c8 <__kernel_cosf>
 800b51e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b522:	d304      	bcc.n	800b52e <cosf+0x2a>
 800b524:	f7f5 faf0 	bl	8000b08 <__aeabi_fsub>
 800b528:	b003      	add	sp, #12
 800b52a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b52e:	4669      	mov	r1, sp
 800b530:	f000 fa48 	bl	800b9c4 <__ieee754_rem_pio2f>
 800b534:	f000 0203 	and.w	r2, r0, #3
 800b538:	2a01      	cmp	r2, #1
 800b53a:	d007      	beq.n	800b54c <cosf+0x48>
 800b53c:	2a02      	cmp	r2, #2
 800b53e:	d00c      	beq.n	800b55a <cosf+0x56>
 800b540:	b982      	cbnz	r2, 800b564 <cosf+0x60>
 800b542:	9901      	ldr	r1, [sp, #4]
 800b544:	9800      	ldr	r0, [sp, #0]
 800b546:	f000 f8bf 	bl	800b6c8 <__kernel_cosf>
 800b54a:	e7ed      	b.n	800b528 <cosf+0x24>
 800b54c:	9901      	ldr	r1, [sp, #4]
 800b54e:	9800      	ldr	r0, [sp, #0]
 800b550:	f000 f93a 	bl	800b7c8 <__kernel_sinf>
 800b554:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800b558:	e7e6      	b.n	800b528 <cosf+0x24>
 800b55a:	9901      	ldr	r1, [sp, #4]
 800b55c:	9800      	ldr	r0, [sp, #0]
 800b55e:	f000 f8b3 	bl	800b6c8 <__kernel_cosf>
 800b562:	e7f7      	b.n	800b554 <cosf+0x50>
 800b564:	2201      	movs	r2, #1
 800b566:	9901      	ldr	r1, [sp, #4]
 800b568:	9800      	ldr	r0, [sp, #0]
 800b56a:	f000 f92d 	bl	800b7c8 <__kernel_sinf>
 800b56e:	e7db      	b.n	800b528 <cosf+0x24>
 800b570:	3f490fd8 	.word	0x3f490fd8

0800b574 <sinf>:
 800b574:	b507      	push	{r0, r1, r2, lr}
 800b576:	4a1b      	ldr	r2, [pc, #108]	@ (800b5e4 <sinf+0x70>)
 800b578:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b57c:	4293      	cmp	r3, r2
 800b57e:	4601      	mov	r1, r0
 800b580:	d806      	bhi.n	800b590 <sinf+0x1c>
 800b582:	2200      	movs	r2, #0
 800b584:	2100      	movs	r1, #0
 800b586:	b003      	add	sp, #12
 800b588:	f85d eb04 	ldr.w	lr, [sp], #4
 800b58c:	f000 b91c 	b.w	800b7c8 <__kernel_sinf>
 800b590:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b594:	d304      	bcc.n	800b5a0 <sinf+0x2c>
 800b596:	f7f5 fab7 	bl	8000b08 <__aeabi_fsub>
 800b59a:	b003      	add	sp, #12
 800b59c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b5a0:	4669      	mov	r1, sp
 800b5a2:	f000 fa0f 	bl	800b9c4 <__ieee754_rem_pio2f>
 800b5a6:	f000 0003 	and.w	r0, r0, #3
 800b5aa:	2801      	cmp	r0, #1
 800b5ac:	d008      	beq.n	800b5c0 <sinf+0x4c>
 800b5ae:	2802      	cmp	r0, #2
 800b5b0:	d00b      	beq.n	800b5ca <sinf+0x56>
 800b5b2:	b990      	cbnz	r0, 800b5da <sinf+0x66>
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	9901      	ldr	r1, [sp, #4]
 800b5b8:	9800      	ldr	r0, [sp, #0]
 800b5ba:	f000 f905 	bl	800b7c8 <__kernel_sinf>
 800b5be:	e7ec      	b.n	800b59a <sinf+0x26>
 800b5c0:	9901      	ldr	r1, [sp, #4]
 800b5c2:	9800      	ldr	r0, [sp, #0]
 800b5c4:	f000 f880 	bl	800b6c8 <__kernel_cosf>
 800b5c8:	e7e7      	b.n	800b59a <sinf+0x26>
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	9901      	ldr	r1, [sp, #4]
 800b5ce:	9800      	ldr	r0, [sp, #0]
 800b5d0:	f000 f8fa 	bl	800b7c8 <__kernel_sinf>
 800b5d4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800b5d8:	e7df      	b.n	800b59a <sinf+0x26>
 800b5da:	9901      	ldr	r1, [sp, #4]
 800b5dc:	9800      	ldr	r0, [sp, #0]
 800b5de:	f000 f873 	bl	800b6c8 <__kernel_cosf>
 800b5e2:	e7f7      	b.n	800b5d4 <sinf+0x60>
 800b5e4:	3f490fd8 	.word	0x3f490fd8

0800b5e8 <__ieee754_sqrtf>:
 800b5e8:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800b5ec:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	4604      	mov	r4, r0
 800b5f8:	d30a      	bcc.n	800b610 <__ieee754_sqrtf+0x28>
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	f7f5 fb8e 	bl	8000d1c <__aeabi_fmul>
 800b600:	4601      	mov	r1, r0
 800b602:	4620      	mov	r0, r4
 800b604:	f7f5 fa82 	bl	8000b0c <__addsf3>
 800b608:	4604      	mov	r4, r0
 800b60a:	4620      	mov	r0, r4
 800b60c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b610:	2a00      	cmp	r2, #0
 800b612:	d0fa      	beq.n	800b60a <__ieee754_sqrtf+0x22>
 800b614:	2800      	cmp	r0, #0
 800b616:	da06      	bge.n	800b626 <__ieee754_sqrtf+0x3e>
 800b618:	4601      	mov	r1, r0
 800b61a:	f7f5 fa75 	bl	8000b08 <__aeabi_fsub>
 800b61e:	4601      	mov	r1, r0
 800b620:	f7f5 fc30 	bl	8000e84 <__aeabi_fdiv>
 800b624:	e7f0      	b.n	800b608 <__ieee754_sqrtf+0x20>
 800b626:	f010 41ff 	ands.w	r1, r0, #2139095040	@ 0x7f800000
 800b62a:	d03c      	beq.n	800b6a6 <__ieee754_sqrtf+0xbe>
 800b62c:	15c2      	asrs	r2, r0, #23
 800b62e:	2400      	movs	r4, #0
 800b630:	2019      	movs	r0, #25
 800b632:	4626      	mov	r6, r4
 800b634:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800b638:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b63c:	f1a2 057f 	sub.w	r5, r2, #127	@ 0x7f
 800b640:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b644:	07d2      	lsls	r2, r2, #31
 800b646:	bf58      	it	pl
 800b648:	005b      	lslpl	r3, r3, #1
 800b64a:	106d      	asrs	r5, r5, #1
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	1872      	adds	r2, r6, r1
 800b650:	429a      	cmp	r2, r3
 800b652:	bfcf      	iteee	gt
 800b654:	461a      	movgt	r2, r3
 800b656:	1856      	addle	r6, r2, r1
 800b658:	1864      	addle	r4, r4, r1
 800b65a:	1a9a      	suble	r2, r3, r2
 800b65c:	3801      	subs	r0, #1
 800b65e:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800b662:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b666:	d1f2      	bne.n	800b64e <__ieee754_sqrtf+0x66>
 800b668:	b1ba      	cbz	r2, 800b69a <__ieee754_sqrtf+0xb2>
 800b66a:	4e15      	ldr	r6, [pc, #84]	@ (800b6c0 <__ieee754_sqrtf+0xd8>)
 800b66c:	4f15      	ldr	r7, [pc, #84]	@ (800b6c4 <__ieee754_sqrtf+0xdc>)
 800b66e:	6830      	ldr	r0, [r6, #0]
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	f7f5 fa49 	bl	8000b08 <__aeabi_fsub>
 800b676:	f8d6 8000 	ldr.w	r8, [r6]
 800b67a:	4601      	mov	r1, r0
 800b67c:	4640      	mov	r0, r8
 800b67e:	f7f5 fcf5 	bl	800106c <__aeabi_fcmple>
 800b682:	b150      	cbz	r0, 800b69a <__ieee754_sqrtf+0xb2>
 800b684:	6830      	ldr	r0, [r6, #0]
 800b686:	6839      	ldr	r1, [r7, #0]
 800b688:	f7f5 fa40 	bl	8000b0c <__addsf3>
 800b68c:	6836      	ldr	r6, [r6, #0]
 800b68e:	4601      	mov	r1, r0
 800b690:	4630      	mov	r0, r6
 800b692:	f7f5 fce1 	bl	8001058 <__aeabi_fcmplt>
 800b696:	b170      	cbz	r0, 800b6b6 <__ieee754_sqrtf+0xce>
 800b698:	3402      	adds	r4, #2
 800b69a:	1064      	asrs	r4, r4, #1
 800b69c:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800b6a0:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800b6a4:	e7b1      	b.n	800b60a <__ieee754_sqrtf+0x22>
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	0218      	lsls	r0, r3, #8
 800b6aa:	460a      	mov	r2, r1
 800b6ac:	f101 0101 	add.w	r1, r1, #1
 800b6b0:	d5f9      	bpl.n	800b6a6 <__ieee754_sqrtf+0xbe>
 800b6b2:	4252      	negs	r2, r2
 800b6b4:	e7bb      	b.n	800b62e <__ieee754_sqrtf+0x46>
 800b6b6:	3401      	adds	r4, #1
 800b6b8:	f024 0401 	bic.w	r4, r4, #1
 800b6bc:	e7ed      	b.n	800b69a <__ieee754_sqrtf+0xb2>
 800b6be:	bf00      	nop
 800b6c0:	0800ca14 	.word	0x0800ca14
 800b6c4:	0800ca10 	.word	0x0800ca10

0800b6c8 <__kernel_cosf>:
 800b6c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6cc:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800b6d0:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	4688      	mov	r8, r1
 800b6d8:	d203      	bcs.n	800b6e2 <__kernel_cosf+0x1a>
 800b6da:	f7f5 fcfb 	bl	80010d4 <__aeabi_f2iz>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d05c      	beq.n	800b79c <__kernel_cosf+0xd4>
 800b6e2:	4631      	mov	r1, r6
 800b6e4:	4630      	mov	r0, r6
 800b6e6:	f7f5 fb19 	bl	8000d1c <__aeabi_fmul>
 800b6ea:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	f7f5 fb14 	bl	8000d1c <__aeabi_fmul>
 800b6f4:	492b      	ldr	r1, [pc, #172]	@ (800b7a4 <__kernel_cosf+0xdc>)
 800b6f6:	4607      	mov	r7, r0
 800b6f8:	4620      	mov	r0, r4
 800b6fa:	f7f5 fb0f 	bl	8000d1c <__aeabi_fmul>
 800b6fe:	492a      	ldr	r1, [pc, #168]	@ (800b7a8 <__kernel_cosf+0xe0>)
 800b700:	f7f5 fa04 	bl	8000b0c <__addsf3>
 800b704:	4621      	mov	r1, r4
 800b706:	f7f5 fb09 	bl	8000d1c <__aeabi_fmul>
 800b70a:	4928      	ldr	r1, [pc, #160]	@ (800b7ac <__kernel_cosf+0xe4>)
 800b70c:	f7f5 f9fc 	bl	8000b08 <__aeabi_fsub>
 800b710:	4621      	mov	r1, r4
 800b712:	f7f5 fb03 	bl	8000d1c <__aeabi_fmul>
 800b716:	4926      	ldr	r1, [pc, #152]	@ (800b7b0 <__kernel_cosf+0xe8>)
 800b718:	f7f5 f9f8 	bl	8000b0c <__addsf3>
 800b71c:	4621      	mov	r1, r4
 800b71e:	f7f5 fafd 	bl	8000d1c <__aeabi_fmul>
 800b722:	4924      	ldr	r1, [pc, #144]	@ (800b7b4 <__kernel_cosf+0xec>)
 800b724:	f7f5 f9f0 	bl	8000b08 <__aeabi_fsub>
 800b728:	4621      	mov	r1, r4
 800b72a:	f7f5 faf7 	bl	8000d1c <__aeabi_fmul>
 800b72e:	4922      	ldr	r1, [pc, #136]	@ (800b7b8 <__kernel_cosf+0xf0>)
 800b730:	f7f5 f9ec 	bl	8000b0c <__addsf3>
 800b734:	4621      	mov	r1, r4
 800b736:	f7f5 faf1 	bl	8000d1c <__aeabi_fmul>
 800b73a:	4621      	mov	r1, r4
 800b73c:	f7f5 faee 	bl	8000d1c <__aeabi_fmul>
 800b740:	4641      	mov	r1, r8
 800b742:	4604      	mov	r4, r0
 800b744:	4630      	mov	r0, r6
 800b746:	f7f5 fae9 	bl	8000d1c <__aeabi_fmul>
 800b74a:	4601      	mov	r1, r0
 800b74c:	4620      	mov	r0, r4
 800b74e:	f7f5 f9db 	bl	8000b08 <__aeabi_fsub>
 800b752:	4b1a      	ldr	r3, [pc, #104]	@ (800b7bc <__kernel_cosf+0xf4>)
 800b754:	4604      	mov	r4, r0
 800b756:	429d      	cmp	r5, r3
 800b758:	d80a      	bhi.n	800b770 <__kernel_cosf+0xa8>
 800b75a:	4601      	mov	r1, r0
 800b75c:	4638      	mov	r0, r7
 800b75e:	f7f5 f9d3 	bl	8000b08 <__aeabi_fsub>
 800b762:	4601      	mov	r1, r0
 800b764:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b768:	f7f5 f9ce 	bl	8000b08 <__aeabi_fsub>
 800b76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b770:	4b13      	ldr	r3, [pc, #76]	@ (800b7c0 <__kernel_cosf+0xf8>)
 800b772:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b776:	429d      	cmp	r5, r3
 800b778:	bf8c      	ite	hi
 800b77a:	4d12      	ldrhi	r5, [pc, #72]	@ (800b7c4 <__kernel_cosf+0xfc>)
 800b77c:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 800b780:	4629      	mov	r1, r5
 800b782:	f7f5 f9c1 	bl	8000b08 <__aeabi_fsub>
 800b786:	4629      	mov	r1, r5
 800b788:	4606      	mov	r6, r0
 800b78a:	4638      	mov	r0, r7
 800b78c:	f7f5 f9bc 	bl	8000b08 <__aeabi_fsub>
 800b790:	4621      	mov	r1, r4
 800b792:	f7f5 f9b9 	bl	8000b08 <__aeabi_fsub>
 800b796:	4601      	mov	r1, r0
 800b798:	4630      	mov	r0, r6
 800b79a:	e7e5      	b.n	800b768 <__kernel_cosf+0xa0>
 800b79c:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800b7a0:	e7e4      	b.n	800b76c <__kernel_cosf+0xa4>
 800b7a2:	bf00      	nop
 800b7a4:	ad47d74e 	.word	0xad47d74e
 800b7a8:	310f74f6 	.word	0x310f74f6
 800b7ac:	3493f27c 	.word	0x3493f27c
 800b7b0:	37d00d01 	.word	0x37d00d01
 800b7b4:	3ab60b61 	.word	0x3ab60b61
 800b7b8:	3d2aaaab 	.word	0x3d2aaaab
 800b7bc:	3e999999 	.word	0x3e999999
 800b7c0:	3f480000 	.word	0x3f480000
 800b7c4:	3e900000 	.word	0x3e900000

0800b7c8 <__kernel_sinf>:
 800b7c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7cc:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800b7d0:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b7d4:	4604      	mov	r4, r0
 800b7d6:	460f      	mov	r7, r1
 800b7d8:	4691      	mov	r9, r2
 800b7da:	d203      	bcs.n	800b7e4 <__kernel_sinf+0x1c>
 800b7dc:	f7f5 fc7a 	bl	80010d4 <__aeabi_f2iz>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d035      	beq.n	800b850 <__kernel_sinf+0x88>
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	f7f5 fa98 	bl	8000d1c <__aeabi_fmul>
 800b7ec:	4605      	mov	r5, r0
 800b7ee:	4601      	mov	r1, r0
 800b7f0:	4620      	mov	r0, r4
 800b7f2:	f7f5 fa93 	bl	8000d1c <__aeabi_fmul>
 800b7f6:	4929      	ldr	r1, [pc, #164]	@ (800b89c <__kernel_sinf+0xd4>)
 800b7f8:	4606      	mov	r6, r0
 800b7fa:	4628      	mov	r0, r5
 800b7fc:	f7f5 fa8e 	bl	8000d1c <__aeabi_fmul>
 800b800:	4927      	ldr	r1, [pc, #156]	@ (800b8a0 <__kernel_sinf+0xd8>)
 800b802:	f7f5 f981 	bl	8000b08 <__aeabi_fsub>
 800b806:	4629      	mov	r1, r5
 800b808:	f7f5 fa88 	bl	8000d1c <__aeabi_fmul>
 800b80c:	4925      	ldr	r1, [pc, #148]	@ (800b8a4 <__kernel_sinf+0xdc>)
 800b80e:	f7f5 f97d 	bl	8000b0c <__addsf3>
 800b812:	4629      	mov	r1, r5
 800b814:	f7f5 fa82 	bl	8000d1c <__aeabi_fmul>
 800b818:	4923      	ldr	r1, [pc, #140]	@ (800b8a8 <__kernel_sinf+0xe0>)
 800b81a:	f7f5 f975 	bl	8000b08 <__aeabi_fsub>
 800b81e:	4629      	mov	r1, r5
 800b820:	f7f5 fa7c 	bl	8000d1c <__aeabi_fmul>
 800b824:	4921      	ldr	r1, [pc, #132]	@ (800b8ac <__kernel_sinf+0xe4>)
 800b826:	f7f5 f971 	bl	8000b0c <__addsf3>
 800b82a:	4680      	mov	r8, r0
 800b82c:	f1b9 0f00 	cmp.w	r9, #0
 800b830:	d111      	bne.n	800b856 <__kernel_sinf+0x8e>
 800b832:	4601      	mov	r1, r0
 800b834:	4628      	mov	r0, r5
 800b836:	f7f5 fa71 	bl	8000d1c <__aeabi_fmul>
 800b83a:	491d      	ldr	r1, [pc, #116]	@ (800b8b0 <__kernel_sinf+0xe8>)
 800b83c:	f7f5 f964 	bl	8000b08 <__aeabi_fsub>
 800b840:	4631      	mov	r1, r6
 800b842:	f7f5 fa6b 	bl	8000d1c <__aeabi_fmul>
 800b846:	4601      	mov	r1, r0
 800b848:	4620      	mov	r0, r4
 800b84a:	f7f5 f95f 	bl	8000b0c <__addsf3>
 800b84e:	4604      	mov	r4, r0
 800b850:	4620      	mov	r0, r4
 800b852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b856:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800b85a:	4638      	mov	r0, r7
 800b85c:	f7f5 fa5e 	bl	8000d1c <__aeabi_fmul>
 800b860:	4641      	mov	r1, r8
 800b862:	4681      	mov	r9, r0
 800b864:	4630      	mov	r0, r6
 800b866:	f7f5 fa59 	bl	8000d1c <__aeabi_fmul>
 800b86a:	4601      	mov	r1, r0
 800b86c:	4648      	mov	r0, r9
 800b86e:	f7f5 f94b 	bl	8000b08 <__aeabi_fsub>
 800b872:	4629      	mov	r1, r5
 800b874:	f7f5 fa52 	bl	8000d1c <__aeabi_fmul>
 800b878:	4639      	mov	r1, r7
 800b87a:	f7f5 f945 	bl	8000b08 <__aeabi_fsub>
 800b87e:	490c      	ldr	r1, [pc, #48]	@ (800b8b0 <__kernel_sinf+0xe8>)
 800b880:	4605      	mov	r5, r0
 800b882:	4630      	mov	r0, r6
 800b884:	f7f5 fa4a 	bl	8000d1c <__aeabi_fmul>
 800b888:	4601      	mov	r1, r0
 800b88a:	4628      	mov	r0, r5
 800b88c:	f7f5 f93e 	bl	8000b0c <__addsf3>
 800b890:	4601      	mov	r1, r0
 800b892:	4620      	mov	r0, r4
 800b894:	f7f5 f938 	bl	8000b08 <__aeabi_fsub>
 800b898:	e7d9      	b.n	800b84e <__kernel_sinf+0x86>
 800b89a:	bf00      	nop
 800b89c:	2f2ec9d3 	.word	0x2f2ec9d3
 800b8a0:	32d72f34 	.word	0x32d72f34
 800b8a4:	3638ef1b 	.word	0x3638ef1b
 800b8a8:	39500d01 	.word	0x39500d01
 800b8ac:	3c088889 	.word	0x3c088889
 800b8b0:	3e2aaaab 	.word	0x3e2aaaab

0800b8b4 <__ieee754_atan2f>:
 800b8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8b6:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800b8ba:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b8be:	4603      	mov	r3, r0
 800b8c0:	d805      	bhi.n	800b8ce <__ieee754_atan2f+0x1a>
 800b8c2:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800b8c6:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b8ca:	4607      	mov	r7, r0
 800b8cc:	d904      	bls.n	800b8d8 <__ieee754_atan2f+0x24>
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7f5 f91c 	bl	8000b0c <__addsf3>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	e010      	b.n	800b8fa <__ieee754_atan2f+0x46>
 800b8d8:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800b8dc:	d103      	bne.n	800b8e6 <__ieee754_atan2f+0x32>
 800b8de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b8e2:	f000 b9d5 	b.w	800bc90 <atanf>
 800b8e6:	178c      	asrs	r4, r1, #30
 800b8e8:	f004 0402 	and.w	r4, r4, #2
 800b8ec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800b8f0:	b92a      	cbnz	r2, 800b8fe <__ieee754_atan2f+0x4a>
 800b8f2:	2c02      	cmp	r4, #2
 800b8f4:	d04b      	beq.n	800b98e <__ieee754_atan2f+0xda>
 800b8f6:	2c03      	cmp	r4, #3
 800b8f8:	d04b      	beq.n	800b992 <__ieee754_atan2f+0xde>
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8fe:	b91e      	cbnz	r6, 800b908 <__ieee754_atan2f+0x54>
 800b900:	2f00      	cmp	r7, #0
 800b902:	db4c      	blt.n	800b99e <__ieee754_atan2f+0xea>
 800b904:	4b27      	ldr	r3, [pc, #156]	@ (800b9a4 <__ieee754_atan2f+0xf0>)
 800b906:	e7f8      	b.n	800b8fa <__ieee754_atan2f+0x46>
 800b908:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800b90c:	d10e      	bne.n	800b92c <__ieee754_atan2f+0x78>
 800b90e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b912:	f104 34ff 	add.w	r4, r4, #4294967295
 800b916:	d105      	bne.n	800b924 <__ieee754_atan2f+0x70>
 800b918:	2c02      	cmp	r4, #2
 800b91a:	d83c      	bhi.n	800b996 <__ieee754_atan2f+0xe2>
 800b91c:	4b22      	ldr	r3, [pc, #136]	@ (800b9a8 <__ieee754_atan2f+0xf4>)
 800b91e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b922:	e7ea      	b.n	800b8fa <__ieee754_atan2f+0x46>
 800b924:	2c02      	cmp	r4, #2
 800b926:	d838      	bhi.n	800b99a <__ieee754_atan2f+0xe6>
 800b928:	4b20      	ldr	r3, [pc, #128]	@ (800b9ac <__ieee754_atan2f+0xf8>)
 800b92a:	e7f8      	b.n	800b91e <__ieee754_atan2f+0x6a>
 800b92c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b930:	d0e6      	beq.n	800b900 <__ieee754_atan2f+0x4c>
 800b932:	1b92      	subs	r2, r2, r6
 800b934:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800b938:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800b93c:	da17      	bge.n	800b96e <__ieee754_atan2f+0xba>
 800b93e:	2900      	cmp	r1, #0
 800b940:	da01      	bge.n	800b946 <__ieee754_atan2f+0x92>
 800b942:	303c      	adds	r0, #60	@ 0x3c
 800b944:	db15      	blt.n	800b972 <__ieee754_atan2f+0xbe>
 800b946:	4618      	mov	r0, r3
 800b948:	f7f5 fa9c 	bl	8000e84 <__aeabi_fdiv>
 800b94c:	f000 faac 	bl	800bea8 <fabsf>
 800b950:	f000 f99e 	bl	800bc90 <atanf>
 800b954:	4603      	mov	r3, r0
 800b956:	2c01      	cmp	r4, #1
 800b958:	d00d      	beq.n	800b976 <__ieee754_atan2f+0xc2>
 800b95a:	2c02      	cmp	r4, #2
 800b95c:	d00e      	beq.n	800b97c <__ieee754_atan2f+0xc8>
 800b95e:	2c00      	cmp	r4, #0
 800b960:	d0cb      	beq.n	800b8fa <__ieee754_atan2f+0x46>
 800b962:	4913      	ldr	r1, [pc, #76]	@ (800b9b0 <__ieee754_atan2f+0xfc>)
 800b964:	4618      	mov	r0, r3
 800b966:	f7f5 f8d1 	bl	8000b0c <__addsf3>
 800b96a:	4912      	ldr	r1, [pc, #72]	@ (800b9b4 <__ieee754_atan2f+0x100>)
 800b96c:	e00c      	b.n	800b988 <__ieee754_atan2f+0xd4>
 800b96e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9a4 <__ieee754_atan2f+0xf0>)
 800b970:	e7f1      	b.n	800b956 <__ieee754_atan2f+0xa2>
 800b972:	2300      	movs	r3, #0
 800b974:	e7ef      	b.n	800b956 <__ieee754_atan2f+0xa2>
 800b976:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800b97a:	e7be      	b.n	800b8fa <__ieee754_atan2f+0x46>
 800b97c:	490c      	ldr	r1, [pc, #48]	@ (800b9b0 <__ieee754_atan2f+0xfc>)
 800b97e:	4618      	mov	r0, r3
 800b980:	f7f5 f8c4 	bl	8000b0c <__addsf3>
 800b984:	4601      	mov	r1, r0
 800b986:	480b      	ldr	r0, [pc, #44]	@ (800b9b4 <__ieee754_atan2f+0x100>)
 800b988:	f7f5 f8be 	bl	8000b08 <__aeabi_fsub>
 800b98c:	e7a2      	b.n	800b8d4 <__ieee754_atan2f+0x20>
 800b98e:	4b09      	ldr	r3, [pc, #36]	@ (800b9b4 <__ieee754_atan2f+0x100>)
 800b990:	e7b3      	b.n	800b8fa <__ieee754_atan2f+0x46>
 800b992:	4b09      	ldr	r3, [pc, #36]	@ (800b9b8 <__ieee754_atan2f+0x104>)
 800b994:	e7b1      	b.n	800b8fa <__ieee754_atan2f+0x46>
 800b996:	4b09      	ldr	r3, [pc, #36]	@ (800b9bc <__ieee754_atan2f+0x108>)
 800b998:	e7af      	b.n	800b8fa <__ieee754_atan2f+0x46>
 800b99a:	2300      	movs	r3, #0
 800b99c:	e7ad      	b.n	800b8fa <__ieee754_atan2f+0x46>
 800b99e:	4b08      	ldr	r3, [pc, #32]	@ (800b9c0 <__ieee754_atan2f+0x10c>)
 800b9a0:	e7ab      	b.n	800b8fa <__ieee754_atan2f+0x46>
 800b9a2:	bf00      	nop
 800b9a4:	3fc90fdb 	.word	0x3fc90fdb
 800b9a8:	0800ca24 	.word	0x0800ca24
 800b9ac:	0800ca18 	.word	0x0800ca18
 800b9b0:	33bbbd2e 	.word	0x33bbbd2e
 800b9b4:	40490fdb 	.word	0x40490fdb
 800b9b8:	c0490fdb 	.word	0xc0490fdb
 800b9bc:	3f490fdb 	.word	0x3f490fdb
 800b9c0:	bfc90fdb 	.word	0xbfc90fdb

0800b9c4 <__ieee754_rem_pio2f>:
 800b9c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9c8:	4aa4      	ldr	r2, [pc, #656]	@ (800bc5c <__ieee754_rem_pio2f+0x298>)
 800b9ca:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800b9ce:	4590      	cmp	r8, r2
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	4682      	mov	sl, r0
 800b9d4:	b087      	sub	sp, #28
 800b9d6:	d804      	bhi.n	800b9e2 <__ieee754_rem_pio2f+0x1e>
 800b9d8:	2300      	movs	r3, #0
 800b9da:	6008      	str	r0, [r1, #0]
 800b9dc:	604b      	str	r3, [r1, #4]
 800b9de:	2500      	movs	r5, #0
 800b9e0:	e01d      	b.n	800ba1e <__ieee754_rem_pio2f+0x5a>
 800b9e2:	4a9f      	ldr	r2, [pc, #636]	@ (800bc60 <__ieee754_rem_pio2f+0x29c>)
 800b9e4:	4590      	cmp	r8, r2
 800b9e6:	d84f      	bhi.n	800ba88 <__ieee754_rem_pio2f+0xc4>
 800b9e8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	499d      	ldr	r1, [pc, #628]	@ (800bc64 <__ieee754_rem_pio2f+0x2a0>)
 800b9f0:	4f9d      	ldr	r7, [pc, #628]	@ (800bc68 <__ieee754_rem_pio2f+0x2a4>)
 800b9f2:	f025 050f 	bic.w	r5, r5, #15
 800b9f6:	dd24      	ble.n	800ba42 <__ieee754_rem_pio2f+0x7e>
 800b9f8:	f7f5 f886 	bl	8000b08 <__aeabi_fsub>
 800b9fc:	42bd      	cmp	r5, r7
 800b9fe:	4606      	mov	r6, r0
 800ba00:	d011      	beq.n	800ba26 <__ieee754_rem_pio2f+0x62>
 800ba02:	499a      	ldr	r1, [pc, #616]	@ (800bc6c <__ieee754_rem_pio2f+0x2a8>)
 800ba04:	f7f5 f880 	bl	8000b08 <__aeabi_fsub>
 800ba08:	4601      	mov	r1, r0
 800ba0a:	4605      	mov	r5, r0
 800ba0c:	4630      	mov	r0, r6
 800ba0e:	f7f5 f87b 	bl	8000b08 <__aeabi_fsub>
 800ba12:	4996      	ldr	r1, [pc, #600]	@ (800bc6c <__ieee754_rem_pio2f+0x2a8>)
 800ba14:	f7f5 f878 	bl	8000b08 <__aeabi_fsub>
 800ba18:	6025      	str	r5, [r4, #0]
 800ba1a:	2501      	movs	r5, #1
 800ba1c:	6060      	str	r0, [r4, #4]
 800ba1e:	4628      	mov	r0, r5
 800ba20:	b007      	add	sp, #28
 800ba22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba26:	4992      	ldr	r1, [pc, #584]	@ (800bc70 <__ieee754_rem_pio2f+0x2ac>)
 800ba28:	f7f5 f86e 	bl	8000b08 <__aeabi_fsub>
 800ba2c:	4991      	ldr	r1, [pc, #580]	@ (800bc74 <__ieee754_rem_pio2f+0x2b0>)
 800ba2e:	4606      	mov	r6, r0
 800ba30:	f7f5 f86a 	bl	8000b08 <__aeabi_fsub>
 800ba34:	4601      	mov	r1, r0
 800ba36:	4605      	mov	r5, r0
 800ba38:	4630      	mov	r0, r6
 800ba3a:	f7f5 f865 	bl	8000b08 <__aeabi_fsub>
 800ba3e:	498d      	ldr	r1, [pc, #564]	@ (800bc74 <__ieee754_rem_pio2f+0x2b0>)
 800ba40:	e7e8      	b.n	800ba14 <__ieee754_rem_pio2f+0x50>
 800ba42:	f7f5 f863 	bl	8000b0c <__addsf3>
 800ba46:	42bd      	cmp	r5, r7
 800ba48:	4606      	mov	r6, r0
 800ba4a:	d00f      	beq.n	800ba6c <__ieee754_rem_pio2f+0xa8>
 800ba4c:	4987      	ldr	r1, [pc, #540]	@ (800bc6c <__ieee754_rem_pio2f+0x2a8>)
 800ba4e:	f7f5 f85d 	bl	8000b0c <__addsf3>
 800ba52:	4601      	mov	r1, r0
 800ba54:	4605      	mov	r5, r0
 800ba56:	4630      	mov	r0, r6
 800ba58:	f7f5 f856 	bl	8000b08 <__aeabi_fsub>
 800ba5c:	4983      	ldr	r1, [pc, #524]	@ (800bc6c <__ieee754_rem_pio2f+0x2a8>)
 800ba5e:	f7f5 f855 	bl	8000b0c <__addsf3>
 800ba62:	6025      	str	r5, [r4, #0]
 800ba64:	6060      	str	r0, [r4, #4]
 800ba66:	f04f 35ff 	mov.w	r5, #4294967295
 800ba6a:	e7d8      	b.n	800ba1e <__ieee754_rem_pio2f+0x5a>
 800ba6c:	4980      	ldr	r1, [pc, #512]	@ (800bc70 <__ieee754_rem_pio2f+0x2ac>)
 800ba6e:	f7f5 f84d 	bl	8000b0c <__addsf3>
 800ba72:	4980      	ldr	r1, [pc, #512]	@ (800bc74 <__ieee754_rem_pio2f+0x2b0>)
 800ba74:	4606      	mov	r6, r0
 800ba76:	f7f5 f849 	bl	8000b0c <__addsf3>
 800ba7a:	4601      	mov	r1, r0
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	4630      	mov	r0, r6
 800ba80:	f7f5 f842 	bl	8000b08 <__aeabi_fsub>
 800ba84:	497b      	ldr	r1, [pc, #492]	@ (800bc74 <__ieee754_rem_pio2f+0x2b0>)
 800ba86:	e7ea      	b.n	800ba5e <__ieee754_rem_pio2f+0x9a>
 800ba88:	4a7b      	ldr	r2, [pc, #492]	@ (800bc78 <__ieee754_rem_pio2f+0x2b4>)
 800ba8a:	4590      	cmp	r8, r2
 800ba8c:	f200 8095 	bhi.w	800bbba <__ieee754_rem_pio2f+0x1f6>
 800ba90:	f000 fa0a 	bl	800bea8 <fabsf>
 800ba94:	4979      	ldr	r1, [pc, #484]	@ (800bc7c <__ieee754_rem_pio2f+0x2b8>)
 800ba96:	4606      	mov	r6, r0
 800ba98:	f7f5 f940 	bl	8000d1c <__aeabi_fmul>
 800ba9c:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800baa0:	f7f5 f834 	bl	8000b0c <__addsf3>
 800baa4:	f7f5 fb16 	bl	80010d4 <__aeabi_f2iz>
 800baa8:	4605      	mov	r5, r0
 800baaa:	f7f5 f8e3 	bl	8000c74 <__aeabi_i2f>
 800baae:	496d      	ldr	r1, [pc, #436]	@ (800bc64 <__ieee754_rem_pio2f+0x2a0>)
 800bab0:	4681      	mov	r9, r0
 800bab2:	f7f5 f933 	bl	8000d1c <__aeabi_fmul>
 800bab6:	4601      	mov	r1, r0
 800bab8:	4630      	mov	r0, r6
 800baba:	f7f5 f825 	bl	8000b08 <__aeabi_fsub>
 800babe:	496b      	ldr	r1, [pc, #428]	@ (800bc6c <__ieee754_rem_pio2f+0x2a8>)
 800bac0:	4607      	mov	r7, r0
 800bac2:	4648      	mov	r0, r9
 800bac4:	f7f5 f92a 	bl	8000d1c <__aeabi_fmul>
 800bac8:	2d1f      	cmp	r5, #31
 800baca:	4606      	mov	r6, r0
 800bacc:	dc0e      	bgt.n	800baec <__ieee754_rem_pio2f+0x128>
 800bace:	4a6c      	ldr	r2, [pc, #432]	@ (800bc80 <__ieee754_rem_pio2f+0x2bc>)
 800bad0:	1e69      	subs	r1, r5, #1
 800bad2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800bad6:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 800bada:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bade:	4293      	cmp	r3, r2
 800bae0:	d004      	beq.n	800baec <__ieee754_rem_pio2f+0x128>
 800bae2:	4631      	mov	r1, r6
 800bae4:	4638      	mov	r0, r7
 800bae6:	f7f5 f80f 	bl	8000b08 <__aeabi_fsub>
 800baea:	e00b      	b.n	800bb04 <__ieee754_rem_pio2f+0x140>
 800baec:	4631      	mov	r1, r6
 800baee:	4638      	mov	r0, r7
 800baf0:	f7f5 f80a 	bl	8000b08 <__aeabi_fsub>
 800baf4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800baf8:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 800bafc:	2b08      	cmp	r3, #8
 800bafe:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800bb02:	dc01      	bgt.n	800bb08 <__ieee754_rem_pio2f+0x144>
 800bb04:	6020      	str	r0, [r4, #0]
 800bb06:	e026      	b.n	800bb56 <__ieee754_rem_pio2f+0x192>
 800bb08:	4959      	ldr	r1, [pc, #356]	@ (800bc70 <__ieee754_rem_pio2f+0x2ac>)
 800bb0a:	4648      	mov	r0, r9
 800bb0c:	f7f5 f906 	bl	8000d1c <__aeabi_fmul>
 800bb10:	4606      	mov	r6, r0
 800bb12:	4601      	mov	r1, r0
 800bb14:	4638      	mov	r0, r7
 800bb16:	f7f4 fff7 	bl	8000b08 <__aeabi_fsub>
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	4680      	mov	r8, r0
 800bb1e:	4638      	mov	r0, r7
 800bb20:	f7f4 fff2 	bl	8000b08 <__aeabi_fsub>
 800bb24:	4631      	mov	r1, r6
 800bb26:	f7f4 ffef 	bl	8000b08 <__aeabi_fsub>
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	4951      	ldr	r1, [pc, #324]	@ (800bc74 <__ieee754_rem_pio2f+0x2b0>)
 800bb2e:	4648      	mov	r0, r9
 800bb30:	f7f5 f8f4 	bl	8000d1c <__aeabi_fmul>
 800bb34:	4631      	mov	r1, r6
 800bb36:	f7f4 ffe7 	bl	8000b08 <__aeabi_fsub>
 800bb3a:	4601      	mov	r1, r0
 800bb3c:	4606      	mov	r6, r0
 800bb3e:	4640      	mov	r0, r8
 800bb40:	f7f4 ffe2 	bl	8000b08 <__aeabi_fsub>
 800bb44:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800bb48:	ebab 0b03 	sub.w	fp, fp, r3
 800bb4c:	f1bb 0f19 	cmp.w	fp, #25
 800bb50:	dc18      	bgt.n	800bb84 <__ieee754_rem_pio2f+0x1c0>
 800bb52:	4647      	mov	r7, r8
 800bb54:	6020      	str	r0, [r4, #0]
 800bb56:	f8d4 8000 	ldr.w	r8, [r4]
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	4641      	mov	r1, r8
 800bb5e:	f7f4 ffd3 	bl	8000b08 <__aeabi_fsub>
 800bb62:	4631      	mov	r1, r6
 800bb64:	f7f4 ffd0 	bl	8000b08 <__aeabi_fsub>
 800bb68:	f1ba 0f00 	cmp.w	sl, #0
 800bb6c:	6060      	str	r0, [r4, #4]
 800bb6e:	f6bf af56 	bge.w	800ba1e <__ieee754_rem_pio2f+0x5a>
 800bb72:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 800bb76:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800bb7a:	f8c4 8000 	str.w	r8, [r4]
 800bb7e:	6060      	str	r0, [r4, #4]
 800bb80:	426d      	negs	r5, r5
 800bb82:	e74c      	b.n	800ba1e <__ieee754_rem_pio2f+0x5a>
 800bb84:	493f      	ldr	r1, [pc, #252]	@ (800bc84 <__ieee754_rem_pio2f+0x2c0>)
 800bb86:	4648      	mov	r0, r9
 800bb88:	f7f5 f8c8 	bl	8000d1c <__aeabi_fmul>
 800bb8c:	4606      	mov	r6, r0
 800bb8e:	4601      	mov	r1, r0
 800bb90:	4640      	mov	r0, r8
 800bb92:	f7f4 ffb9 	bl	8000b08 <__aeabi_fsub>
 800bb96:	4601      	mov	r1, r0
 800bb98:	4607      	mov	r7, r0
 800bb9a:	4640      	mov	r0, r8
 800bb9c:	f7f4 ffb4 	bl	8000b08 <__aeabi_fsub>
 800bba0:	4631      	mov	r1, r6
 800bba2:	f7f4 ffb1 	bl	8000b08 <__aeabi_fsub>
 800bba6:	4606      	mov	r6, r0
 800bba8:	4937      	ldr	r1, [pc, #220]	@ (800bc88 <__ieee754_rem_pio2f+0x2c4>)
 800bbaa:	4648      	mov	r0, r9
 800bbac:	f7f5 f8b6 	bl	8000d1c <__aeabi_fmul>
 800bbb0:	4631      	mov	r1, r6
 800bbb2:	f7f4 ffa9 	bl	8000b08 <__aeabi_fsub>
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	e793      	b.n	800bae2 <__ieee754_rem_pio2f+0x11e>
 800bbba:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800bbbe:	d305      	bcc.n	800bbcc <__ieee754_rem_pio2f+0x208>
 800bbc0:	4601      	mov	r1, r0
 800bbc2:	f7f4 ffa1 	bl	8000b08 <__aeabi_fsub>
 800bbc6:	6060      	str	r0, [r4, #4]
 800bbc8:	6020      	str	r0, [r4, #0]
 800bbca:	e708      	b.n	800b9de <__ieee754_rem_pio2f+0x1a>
 800bbcc:	ea4f 56e8 	mov.w	r6, r8, asr #23
 800bbd0:	3e86      	subs	r6, #134	@ 0x86
 800bbd2:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 800bbd6:	4640      	mov	r0, r8
 800bbd8:	f7f5 fa7c 	bl	80010d4 <__aeabi_f2iz>
 800bbdc:	f7f5 f84a 	bl	8000c74 <__aeabi_i2f>
 800bbe0:	4601      	mov	r1, r0
 800bbe2:	9003      	str	r0, [sp, #12]
 800bbe4:	4640      	mov	r0, r8
 800bbe6:	f7f4 ff8f 	bl	8000b08 <__aeabi_fsub>
 800bbea:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800bbee:	f7f5 f895 	bl	8000d1c <__aeabi_fmul>
 800bbf2:	4607      	mov	r7, r0
 800bbf4:	f7f5 fa6e 	bl	80010d4 <__aeabi_f2iz>
 800bbf8:	f7f5 f83c 	bl	8000c74 <__aeabi_i2f>
 800bbfc:	4601      	mov	r1, r0
 800bbfe:	9004      	str	r0, [sp, #16]
 800bc00:	4605      	mov	r5, r0
 800bc02:	4638      	mov	r0, r7
 800bc04:	f7f4 ff80 	bl	8000b08 <__aeabi_fsub>
 800bc08:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800bc0c:	f7f5 f886 	bl	8000d1c <__aeabi_fmul>
 800bc10:	2100      	movs	r1, #0
 800bc12:	9005      	str	r0, [sp, #20]
 800bc14:	f7f5 fa16 	bl	8001044 <__aeabi_fcmpeq>
 800bc18:	b1f0      	cbz	r0, 800bc58 <__ieee754_rem_pio2f+0x294>
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	f7f5 fa11 	bl	8001044 <__aeabi_fcmpeq>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	bf14      	ite	ne
 800bc26:	2301      	movne	r3, #1
 800bc28:	2302      	moveq	r3, #2
 800bc2a:	4a18      	ldr	r2, [pc, #96]	@ (800bc8c <__ieee754_rem_pio2f+0x2c8>)
 800bc2c:	4621      	mov	r1, r4
 800bc2e:	9201      	str	r2, [sp, #4]
 800bc30:	2202      	movs	r2, #2
 800bc32:	a803      	add	r0, sp, #12
 800bc34:	9200      	str	r2, [sp, #0]
 800bc36:	4632      	mov	r2, r6
 800bc38:	f000 f93a 	bl	800beb0 <__kernel_rem_pio2f>
 800bc3c:	f1ba 0f00 	cmp.w	sl, #0
 800bc40:	4605      	mov	r5, r0
 800bc42:	f6bf aeec 	bge.w	800ba1e <__ieee754_rem_pio2f+0x5a>
 800bc46:	6823      	ldr	r3, [r4, #0]
 800bc48:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bc4c:	6023      	str	r3, [r4, #0]
 800bc4e:	6863      	ldr	r3, [r4, #4]
 800bc50:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800bc54:	6063      	str	r3, [r4, #4]
 800bc56:	e793      	b.n	800bb80 <__ieee754_rem_pio2f+0x1bc>
 800bc58:	2303      	movs	r3, #3
 800bc5a:	e7e6      	b.n	800bc2a <__ieee754_rem_pio2f+0x266>
 800bc5c:	3f490fd8 	.word	0x3f490fd8
 800bc60:	4016cbe3 	.word	0x4016cbe3
 800bc64:	3fc90f80 	.word	0x3fc90f80
 800bc68:	3fc90fd0 	.word	0x3fc90fd0
 800bc6c:	37354443 	.word	0x37354443
 800bc70:	37354400 	.word	0x37354400
 800bc74:	2e85a308 	.word	0x2e85a308
 800bc78:	43490f80 	.word	0x43490f80
 800bc7c:	3f22f984 	.word	0x3f22f984
 800bc80:	0800ca30 	.word	0x0800ca30
 800bc84:	2e85a300 	.word	0x2e85a300
 800bc88:	248d3132 	.word	0x248d3132
 800bc8c:	0800cab0 	.word	0x0800cab0

0800bc90 <atanf>:
 800bc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc94:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800bc98:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	4680      	mov	r8, r0
 800bca0:	d30e      	bcc.n	800bcc0 <atanf+0x30>
 800bca2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bca6:	d904      	bls.n	800bcb2 <atanf+0x22>
 800bca8:	4601      	mov	r1, r0
 800bcaa:	f7f4 ff2f 	bl	8000b0c <__addsf3>
 800bcae:	4604      	mov	r4, r0
 800bcb0:	e003      	b.n	800bcba <atanf+0x2a>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	f340 80ce 	ble.w	800be54 <atanf+0x1c4>
 800bcb8:	4c67      	ldr	r4, [pc, #412]	@ (800be58 <atanf+0x1c8>)
 800bcba:	4620      	mov	r0, r4
 800bcbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcc0:	4b66      	ldr	r3, [pc, #408]	@ (800be5c <atanf+0x1cc>)
 800bcc2:	429d      	cmp	r5, r3
 800bcc4:	d80e      	bhi.n	800bce4 <atanf+0x54>
 800bcc6:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800bcca:	d208      	bcs.n	800bcde <atanf+0x4e>
 800bccc:	4964      	ldr	r1, [pc, #400]	@ (800be60 <atanf+0x1d0>)
 800bcce:	f7f4 ff1d 	bl	8000b0c <__addsf3>
 800bcd2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800bcd6:	f7f5 f9dd 	bl	8001094 <__aeabi_fcmpgt>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	d1ed      	bne.n	800bcba <atanf+0x2a>
 800bcde:	f04f 36ff 	mov.w	r6, #4294967295
 800bce2:	e01c      	b.n	800bd1e <atanf+0x8e>
 800bce4:	f000 f8e0 	bl	800bea8 <fabsf>
 800bce8:	4b5e      	ldr	r3, [pc, #376]	@ (800be64 <atanf+0x1d4>)
 800bcea:	4604      	mov	r4, r0
 800bcec:	429d      	cmp	r5, r3
 800bcee:	d87c      	bhi.n	800bdea <atanf+0x15a>
 800bcf0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800bcf4:	429d      	cmp	r5, r3
 800bcf6:	d867      	bhi.n	800bdc8 <atanf+0x138>
 800bcf8:	4601      	mov	r1, r0
 800bcfa:	f7f4 ff07 	bl	8000b0c <__addsf3>
 800bcfe:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800bd02:	f7f4 ff01 	bl	8000b08 <__aeabi_fsub>
 800bd06:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800bd0a:	4605      	mov	r5, r0
 800bd0c:	4620      	mov	r0, r4
 800bd0e:	f7f4 fefd 	bl	8000b0c <__addsf3>
 800bd12:	4601      	mov	r1, r0
 800bd14:	4628      	mov	r0, r5
 800bd16:	f7f5 f8b5 	bl	8000e84 <__aeabi_fdiv>
 800bd1a:	2600      	movs	r6, #0
 800bd1c:	4604      	mov	r4, r0
 800bd1e:	4621      	mov	r1, r4
 800bd20:	4620      	mov	r0, r4
 800bd22:	f7f4 fffb 	bl	8000d1c <__aeabi_fmul>
 800bd26:	4601      	mov	r1, r0
 800bd28:	4607      	mov	r7, r0
 800bd2a:	f7f4 fff7 	bl	8000d1c <__aeabi_fmul>
 800bd2e:	4605      	mov	r5, r0
 800bd30:	494d      	ldr	r1, [pc, #308]	@ (800be68 <atanf+0x1d8>)
 800bd32:	f7f4 fff3 	bl	8000d1c <__aeabi_fmul>
 800bd36:	494d      	ldr	r1, [pc, #308]	@ (800be6c <atanf+0x1dc>)
 800bd38:	f7f4 fee8 	bl	8000b0c <__addsf3>
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	f7f4 ffed 	bl	8000d1c <__aeabi_fmul>
 800bd42:	494b      	ldr	r1, [pc, #300]	@ (800be70 <atanf+0x1e0>)
 800bd44:	f7f4 fee2 	bl	8000b0c <__addsf3>
 800bd48:	4629      	mov	r1, r5
 800bd4a:	f7f4 ffe7 	bl	8000d1c <__aeabi_fmul>
 800bd4e:	4949      	ldr	r1, [pc, #292]	@ (800be74 <atanf+0x1e4>)
 800bd50:	f7f4 fedc 	bl	8000b0c <__addsf3>
 800bd54:	4629      	mov	r1, r5
 800bd56:	f7f4 ffe1 	bl	8000d1c <__aeabi_fmul>
 800bd5a:	4947      	ldr	r1, [pc, #284]	@ (800be78 <atanf+0x1e8>)
 800bd5c:	f7f4 fed6 	bl	8000b0c <__addsf3>
 800bd60:	4629      	mov	r1, r5
 800bd62:	f7f4 ffdb 	bl	8000d1c <__aeabi_fmul>
 800bd66:	4945      	ldr	r1, [pc, #276]	@ (800be7c <atanf+0x1ec>)
 800bd68:	f7f4 fed0 	bl	8000b0c <__addsf3>
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	f7f4 ffd5 	bl	8000d1c <__aeabi_fmul>
 800bd72:	4943      	ldr	r1, [pc, #268]	@ (800be80 <atanf+0x1f0>)
 800bd74:	4607      	mov	r7, r0
 800bd76:	4628      	mov	r0, r5
 800bd78:	f7f4 ffd0 	bl	8000d1c <__aeabi_fmul>
 800bd7c:	4941      	ldr	r1, [pc, #260]	@ (800be84 <atanf+0x1f4>)
 800bd7e:	f7f4 fec3 	bl	8000b08 <__aeabi_fsub>
 800bd82:	4629      	mov	r1, r5
 800bd84:	f7f4 ffca 	bl	8000d1c <__aeabi_fmul>
 800bd88:	493f      	ldr	r1, [pc, #252]	@ (800be88 <atanf+0x1f8>)
 800bd8a:	f7f4 febd 	bl	8000b08 <__aeabi_fsub>
 800bd8e:	4629      	mov	r1, r5
 800bd90:	f7f4 ffc4 	bl	8000d1c <__aeabi_fmul>
 800bd94:	493d      	ldr	r1, [pc, #244]	@ (800be8c <atanf+0x1fc>)
 800bd96:	f7f4 feb7 	bl	8000b08 <__aeabi_fsub>
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	f7f4 ffbe 	bl	8000d1c <__aeabi_fmul>
 800bda0:	493b      	ldr	r1, [pc, #236]	@ (800be90 <atanf+0x200>)
 800bda2:	f7f4 feb1 	bl	8000b08 <__aeabi_fsub>
 800bda6:	4629      	mov	r1, r5
 800bda8:	f7f4 ffb8 	bl	8000d1c <__aeabi_fmul>
 800bdac:	4601      	mov	r1, r0
 800bdae:	4638      	mov	r0, r7
 800bdb0:	f7f4 feac 	bl	8000b0c <__addsf3>
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	f7f4 ffb1 	bl	8000d1c <__aeabi_fmul>
 800bdba:	1c73      	adds	r3, r6, #1
 800bdbc:	4601      	mov	r1, r0
 800bdbe:	d133      	bne.n	800be28 <atanf+0x198>
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f7f4 fea1 	bl	8000b08 <__aeabi_fsub>
 800bdc6:	e772      	b.n	800bcae <atanf+0x1e>
 800bdc8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800bdcc:	f7f4 fe9c 	bl	8000b08 <__aeabi_fsub>
 800bdd0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	4620      	mov	r0, r4
 800bdd8:	f7f4 fe98 	bl	8000b0c <__addsf3>
 800bddc:	4601      	mov	r1, r0
 800bdde:	4628      	mov	r0, r5
 800bde0:	f7f5 f850 	bl	8000e84 <__aeabi_fdiv>
 800bde4:	2601      	movs	r6, #1
 800bde6:	4604      	mov	r4, r0
 800bde8:	e799      	b.n	800bd1e <atanf+0x8e>
 800bdea:	4b2a      	ldr	r3, [pc, #168]	@ (800be94 <atanf+0x204>)
 800bdec:	429d      	cmp	r5, r3
 800bdee:	d814      	bhi.n	800be1a <atanf+0x18a>
 800bdf0:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800bdf4:	f7f4 fe88 	bl	8000b08 <__aeabi_fsub>
 800bdf8:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	4620      	mov	r0, r4
 800be00:	f7f4 ff8c 	bl	8000d1c <__aeabi_fmul>
 800be04:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800be08:	f7f4 fe80 	bl	8000b0c <__addsf3>
 800be0c:	4601      	mov	r1, r0
 800be0e:	4628      	mov	r0, r5
 800be10:	f7f5 f838 	bl	8000e84 <__aeabi_fdiv>
 800be14:	2602      	movs	r6, #2
 800be16:	4604      	mov	r4, r0
 800be18:	e781      	b.n	800bd1e <atanf+0x8e>
 800be1a:	4601      	mov	r1, r0
 800be1c:	481e      	ldr	r0, [pc, #120]	@ (800be98 <atanf+0x208>)
 800be1e:	f7f5 f831 	bl	8000e84 <__aeabi_fdiv>
 800be22:	2603      	movs	r6, #3
 800be24:	4604      	mov	r4, r0
 800be26:	e77a      	b.n	800bd1e <atanf+0x8e>
 800be28:	4b1c      	ldr	r3, [pc, #112]	@ (800be9c <atanf+0x20c>)
 800be2a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800be2e:	f7f4 fe6b 	bl	8000b08 <__aeabi_fsub>
 800be32:	4621      	mov	r1, r4
 800be34:	f7f4 fe68 	bl	8000b08 <__aeabi_fsub>
 800be38:	4b19      	ldr	r3, [pc, #100]	@ (800bea0 <atanf+0x210>)
 800be3a:	4601      	mov	r1, r0
 800be3c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800be40:	f7f4 fe62 	bl	8000b08 <__aeabi_fsub>
 800be44:	f1b8 0f00 	cmp.w	r8, #0
 800be48:	4604      	mov	r4, r0
 800be4a:	f6bf af36 	bge.w	800bcba <atanf+0x2a>
 800be4e:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800be52:	e732      	b.n	800bcba <atanf+0x2a>
 800be54:	4c13      	ldr	r4, [pc, #76]	@ (800bea4 <atanf+0x214>)
 800be56:	e730      	b.n	800bcba <atanf+0x2a>
 800be58:	3fc90fdb 	.word	0x3fc90fdb
 800be5c:	3edfffff 	.word	0x3edfffff
 800be60:	7149f2ca 	.word	0x7149f2ca
 800be64:	3f97ffff 	.word	0x3f97ffff
 800be68:	3c8569d7 	.word	0x3c8569d7
 800be6c:	3d4bda59 	.word	0x3d4bda59
 800be70:	3d886b35 	.word	0x3d886b35
 800be74:	3dba2e6e 	.word	0x3dba2e6e
 800be78:	3e124925 	.word	0x3e124925
 800be7c:	3eaaaaab 	.word	0x3eaaaaab
 800be80:	bd15a221 	.word	0xbd15a221
 800be84:	3d6ef16b 	.word	0x3d6ef16b
 800be88:	3d9d8795 	.word	0x3d9d8795
 800be8c:	3de38e38 	.word	0x3de38e38
 800be90:	3e4ccccd 	.word	0x3e4ccccd
 800be94:	401bffff 	.word	0x401bffff
 800be98:	bf800000 	.word	0xbf800000
 800be9c:	0800cdc8 	.word	0x0800cdc8
 800bea0:	0800cdd8 	.word	0x0800cdd8
 800bea4:	bfc90fdb 	.word	0xbfc90fdb

0800bea8 <fabsf>:
 800bea8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800beac:	4770      	bx	lr
	...

0800beb0 <__kernel_rem_pio2f>:
 800beb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beb4:	b0db      	sub	sp, #364	@ 0x16c
 800beb6:	9202      	str	r2, [sp, #8]
 800beb8:	9304      	str	r3, [sp, #16]
 800beba:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 800bebc:	4bac      	ldr	r3, [pc, #688]	@ (800c170 <__kernel_rem_pio2f+0x2c0>)
 800bebe:	9005      	str	r0, [sp, #20]
 800bec0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec4:	9100      	str	r1, [sp, #0]
 800bec6:	9301      	str	r3, [sp, #4]
 800bec8:	9b04      	ldr	r3, [sp, #16]
 800beca:	3b01      	subs	r3, #1
 800becc:	9303      	str	r3, [sp, #12]
 800bece:	9b02      	ldr	r3, [sp, #8]
 800bed0:	1d1a      	adds	r2, r3, #4
 800bed2:	f2c0 8099 	blt.w	800c008 <__kernel_rem_pio2f+0x158>
 800bed6:	1edc      	subs	r4, r3, #3
 800bed8:	bf48      	it	mi
 800beda:	1d1c      	addmi	r4, r3, #4
 800bedc:	10e4      	asrs	r4, r4, #3
 800bede:	2500      	movs	r5, #0
 800bee0:	f04f 0b00 	mov.w	fp, #0
 800bee4:	1c67      	adds	r7, r4, #1
 800bee6:	00fb      	lsls	r3, r7, #3
 800bee8:	9306      	str	r3, [sp, #24]
 800beea:	9b02      	ldr	r3, [sp, #8]
 800beec:	9a03      	ldr	r2, [sp, #12]
 800beee:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800bef2:	9b01      	ldr	r3, [sp, #4]
 800bef4:	eba4 0802 	sub.w	r8, r4, r2
 800bef8:	eb03 0902 	add.w	r9, r3, r2
 800befc:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800befe:	ae1e      	add	r6, sp, #120	@ 0x78
 800bf00:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 800bf04:	454d      	cmp	r5, r9
 800bf06:	f340 8081 	ble.w	800c00c <__kernel_rem_pio2f+0x15c>
 800bf0a:	9a04      	ldr	r2, [sp, #16]
 800bf0c:	ab1e      	add	r3, sp, #120	@ 0x78
 800bf0e:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 800bf12:	f04f 0900 	mov.w	r9, #0
 800bf16:	2300      	movs	r3, #0
 800bf18:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800bf1c:	9a01      	ldr	r2, [sp, #4]
 800bf1e:	4591      	cmp	r9, r2
 800bf20:	f340 809a 	ble.w	800c058 <__kernel_rem_pio2f+0x1a8>
 800bf24:	4613      	mov	r3, r2
 800bf26:	aa0a      	add	r2, sp, #40	@ 0x28
 800bf28:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf2c:	9308      	str	r3, [sp, #32]
 800bf2e:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 800bf30:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bf34:	9c01      	ldr	r4, [sp, #4]
 800bf36:	9307      	str	r3, [sp, #28]
 800bf38:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 800bf3c:	4646      	mov	r6, r8
 800bf3e:	4625      	mov	r5, r4
 800bf40:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 800bf44:	ab5a      	add	r3, sp, #360	@ 0x168
 800bf46:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bf4a:	f853 bc50 	ldr.w	fp, [r3, #-80]
 800bf4e:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 800bf52:	2d00      	cmp	r5, #0
 800bf54:	f300 8085 	bgt.w	800c062 <__kernel_rem_pio2f+0x1b2>
 800bf58:	4639      	mov	r1, r7
 800bf5a:	4658      	mov	r0, fp
 800bf5c:	f000 fa46 	bl	800c3ec <scalbnf>
 800bf60:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 800bf64:	4605      	mov	r5, r0
 800bf66:	f7f4 fed9 	bl	8000d1c <__aeabi_fmul>
 800bf6a:	f000 fa8b 	bl	800c484 <floorf>
 800bf6e:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 800bf72:	f7f4 fed3 	bl	8000d1c <__aeabi_fmul>
 800bf76:	4601      	mov	r1, r0
 800bf78:	4628      	mov	r0, r5
 800bf7a:	f7f4 fdc5 	bl	8000b08 <__aeabi_fsub>
 800bf7e:	4605      	mov	r5, r0
 800bf80:	f7f5 f8a8 	bl	80010d4 <__aeabi_f2iz>
 800bf84:	4606      	mov	r6, r0
 800bf86:	f7f4 fe75 	bl	8000c74 <__aeabi_i2f>
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	4628      	mov	r0, r5
 800bf8e:	f7f4 fdbb 	bl	8000b08 <__aeabi_fsub>
 800bf92:	2f00      	cmp	r7, #0
 800bf94:	4681      	mov	r9, r0
 800bf96:	f340 8081 	ble.w	800c09c <__kernel_rem_pio2f+0x1ec>
 800bf9a:	1e62      	subs	r2, r4, #1
 800bf9c:	ab0a      	add	r3, sp, #40	@ 0x28
 800bf9e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800bfa2:	f1c7 0108 	rsb	r1, r7, #8
 800bfa6:	fa45 f301 	asr.w	r3, r5, r1
 800bfaa:	441e      	add	r6, r3
 800bfac:	408b      	lsls	r3, r1
 800bfae:	1aed      	subs	r5, r5, r3
 800bfb0:	ab0a      	add	r3, sp, #40	@ 0x28
 800bfb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bfb6:	f1c7 0307 	rsb	r3, r7, #7
 800bfba:	411d      	asrs	r5, r3
 800bfbc:	2d00      	cmp	r5, #0
 800bfbe:	dd7a      	ble.n	800c0b6 <__kernel_rem_pio2f+0x206>
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	4692      	mov	sl, r2
 800bfc4:	3601      	adds	r6, #1
 800bfc6:	4294      	cmp	r4, r2
 800bfc8:	f300 80aa 	bgt.w	800c120 <__kernel_rem_pio2f+0x270>
 800bfcc:	2f00      	cmp	r7, #0
 800bfce:	dd05      	ble.n	800bfdc <__kernel_rem_pio2f+0x12c>
 800bfd0:	2f01      	cmp	r7, #1
 800bfd2:	f000 80b6 	beq.w	800c142 <__kernel_rem_pio2f+0x292>
 800bfd6:	2f02      	cmp	r7, #2
 800bfd8:	f000 80bd 	beq.w	800c156 <__kernel_rem_pio2f+0x2a6>
 800bfdc:	2d02      	cmp	r5, #2
 800bfde:	d16a      	bne.n	800c0b6 <__kernel_rem_pio2f+0x206>
 800bfe0:	4649      	mov	r1, r9
 800bfe2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800bfe6:	f7f4 fd8f 	bl	8000b08 <__aeabi_fsub>
 800bfea:	4681      	mov	r9, r0
 800bfec:	f1ba 0f00 	cmp.w	sl, #0
 800bff0:	d061      	beq.n	800c0b6 <__kernel_rem_pio2f+0x206>
 800bff2:	4639      	mov	r1, r7
 800bff4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800bff8:	f000 f9f8 	bl	800c3ec <scalbnf>
 800bffc:	4601      	mov	r1, r0
 800bffe:	4648      	mov	r0, r9
 800c000:	f7f4 fd82 	bl	8000b08 <__aeabi_fsub>
 800c004:	4681      	mov	r9, r0
 800c006:	e056      	b.n	800c0b6 <__kernel_rem_pio2f+0x206>
 800c008:	2400      	movs	r4, #0
 800c00a:	e768      	b.n	800bede <__kernel_rem_pio2f+0x2e>
 800c00c:	eb18 0f05 	cmn.w	r8, r5
 800c010:	d407      	bmi.n	800c022 <__kernel_rem_pio2f+0x172>
 800c012:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 800c016:	f7f4 fe2d 	bl	8000c74 <__aeabi_i2f>
 800c01a:	f846 0b04 	str.w	r0, [r6], #4
 800c01e:	3501      	adds	r5, #1
 800c020:	e770      	b.n	800bf04 <__kernel_rem_pio2f+0x54>
 800c022:	4658      	mov	r0, fp
 800c024:	e7f9      	b.n	800c01a <__kernel_rem_pio2f+0x16a>
 800c026:	9307      	str	r3, [sp, #28]
 800c028:	9b05      	ldr	r3, [sp, #20]
 800c02a:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800c02e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c032:	f7f4 fe73 	bl	8000d1c <__aeabi_fmul>
 800c036:	4601      	mov	r1, r0
 800c038:	4630      	mov	r0, r6
 800c03a:	f7f4 fd67 	bl	8000b0c <__addsf3>
 800c03e:	4606      	mov	r6, r0
 800c040:	9b07      	ldr	r3, [sp, #28]
 800c042:	f108 0801 	add.w	r8, r8, #1
 800c046:	9a03      	ldr	r2, [sp, #12]
 800c048:	4590      	cmp	r8, r2
 800c04a:	ddec      	ble.n	800c026 <__kernel_rem_pio2f+0x176>
 800c04c:	f84a 6b04 	str.w	r6, [sl], #4
 800c050:	f109 0901 	add.w	r9, r9, #1
 800c054:	3504      	adds	r5, #4
 800c056:	e761      	b.n	800bf1c <__kernel_rem_pio2f+0x6c>
 800c058:	46ab      	mov	fp, r5
 800c05a:	461e      	mov	r6, r3
 800c05c:	f04f 0800 	mov.w	r8, #0
 800c060:	e7f1      	b.n	800c046 <__kernel_rem_pio2f+0x196>
 800c062:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800c066:	4658      	mov	r0, fp
 800c068:	f7f4 fe58 	bl	8000d1c <__aeabi_fmul>
 800c06c:	f7f5 f832 	bl	80010d4 <__aeabi_f2iz>
 800c070:	f7f4 fe00 	bl	8000c74 <__aeabi_i2f>
 800c074:	4649      	mov	r1, r9
 800c076:	9009      	str	r0, [sp, #36]	@ 0x24
 800c078:	f7f4 fe50 	bl	8000d1c <__aeabi_fmul>
 800c07c:	4601      	mov	r1, r0
 800c07e:	4658      	mov	r0, fp
 800c080:	f7f4 fd42 	bl	8000b08 <__aeabi_fsub>
 800c084:	f7f5 f826 	bl	80010d4 <__aeabi_f2iz>
 800c088:	3d01      	subs	r5, #1
 800c08a:	f846 0b04 	str.w	r0, [r6], #4
 800c08e:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 800c092:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c094:	f7f4 fd3a 	bl	8000b0c <__addsf3>
 800c098:	4683      	mov	fp, r0
 800c09a:	e75a      	b.n	800bf52 <__kernel_rem_pio2f+0xa2>
 800c09c:	d105      	bne.n	800c0aa <__kernel_rem_pio2f+0x1fa>
 800c09e:	1e63      	subs	r3, r4, #1
 800c0a0:	aa0a      	add	r2, sp, #40	@ 0x28
 800c0a2:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800c0a6:	11ed      	asrs	r5, r5, #7
 800c0a8:	e788      	b.n	800bfbc <__kernel_rem_pio2f+0x10c>
 800c0aa:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800c0ae:	f7f4 ffe7 	bl	8001080 <__aeabi_fcmpge>
 800c0b2:	4605      	mov	r5, r0
 800c0b4:	bb90      	cbnz	r0, 800c11c <__kernel_rem_pio2f+0x26c>
 800c0b6:	2100      	movs	r1, #0
 800c0b8:	4648      	mov	r0, r9
 800c0ba:	f7f4 ffc3 	bl	8001044 <__aeabi_fcmpeq>
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f000 8090 	beq.w	800c1e4 <__kernel_rem_pio2f+0x334>
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	1e63      	subs	r3, r4, #1
 800c0c8:	9901      	ldr	r1, [sp, #4]
 800c0ca:	428b      	cmp	r3, r1
 800c0cc:	da4a      	bge.n	800c164 <__kernel_rem_pio2f+0x2b4>
 800c0ce:	2a00      	cmp	r2, #0
 800c0d0:	d076      	beq.n	800c1c0 <__kernel_rem_pio2f+0x310>
 800c0d2:	3c01      	subs	r4, #1
 800c0d4:	ab0a      	add	r3, sp, #40	@ 0x28
 800c0d6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c0da:	3f08      	subs	r7, #8
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d0f8      	beq.n	800c0d2 <__kernel_rem_pio2f+0x222>
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 800c0e6:	f000 f981 	bl	800c3ec <scalbnf>
 800c0ea:	46a2      	mov	sl, r4
 800c0ec:	4607      	mov	r7, r0
 800c0ee:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 800c0f2:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 800c0f6:	f1ba 0f00 	cmp.w	sl, #0
 800c0fa:	f280 80a1 	bge.w	800c240 <__kernel_rem_pio2f+0x390>
 800c0fe:	4627      	mov	r7, r4
 800c100:	2200      	movs	r2, #0
 800c102:	2f00      	cmp	r7, #0
 800c104:	f2c0 80cb 	blt.w	800c29e <__kernel_rem_pio2f+0x3ee>
 800c108:	a946      	add	r1, sp, #280	@ 0x118
 800c10a:	4690      	mov	r8, r2
 800c10c:	f04f 0a00 	mov.w	sl, #0
 800c110:	4b18      	ldr	r3, [pc, #96]	@ (800c174 <__kernel_rem_pio2f+0x2c4>)
 800c112:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 800c116:	eba4 0907 	sub.w	r9, r4, r7
 800c11a:	e0b4      	b.n	800c286 <__kernel_rem_pio2f+0x3d6>
 800c11c:	2502      	movs	r5, #2
 800c11e:	e74f      	b.n	800bfc0 <__kernel_rem_pio2f+0x110>
 800c120:	f858 3b04 	ldr.w	r3, [r8], #4
 800c124:	f1ba 0f00 	cmp.w	sl, #0
 800c128:	d108      	bne.n	800c13c <__kernel_rem_pio2f+0x28c>
 800c12a:	b123      	cbz	r3, 800c136 <__kernel_rem_pio2f+0x286>
 800c12c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800c130:	f848 3c04 	str.w	r3, [r8, #-4]
 800c134:	2301      	movs	r3, #1
 800c136:	469a      	mov	sl, r3
 800c138:	3201      	adds	r2, #1
 800c13a:	e744      	b.n	800bfc6 <__kernel_rem_pio2f+0x116>
 800c13c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800c140:	e7f6      	b.n	800c130 <__kernel_rem_pio2f+0x280>
 800c142:	1e62      	subs	r2, r4, #1
 800c144:	ab0a      	add	r3, sp, #40	@ 0x28
 800c146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c14e:	a90a      	add	r1, sp, #40	@ 0x28
 800c150:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c154:	e742      	b.n	800bfdc <__kernel_rem_pio2f+0x12c>
 800c156:	1e62      	subs	r2, r4, #1
 800c158:	ab0a      	add	r3, sp, #40	@ 0x28
 800c15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c162:	e7f4      	b.n	800c14e <__kernel_rem_pio2f+0x29e>
 800c164:	a90a      	add	r1, sp, #40	@ 0x28
 800c166:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	430a      	orrs	r2, r1
 800c16e:	e7ab      	b.n	800c0c8 <__kernel_rem_pio2f+0x218>
 800c170:	0800ce14 	.word	0x0800ce14
 800c174:	0800cde8 	.word	0x0800cde8
 800c178:	3301      	adds	r3, #1
 800c17a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c17e:	2900      	cmp	r1, #0
 800c180:	d0fa      	beq.n	800c178 <__kernel_rem_pio2f+0x2c8>
 800c182:	9a04      	ldr	r2, [sp, #16]
 800c184:	a91e      	add	r1, sp, #120	@ 0x78
 800c186:	18a2      	adds	r2, r4, r2
 800c188:	1c66      	adds	r6, r4, #1
 800c18a:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800c18e:	441c      	add	r4, r3
 800c190:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 800c194:	42b4      	cmp	r4, r6
 800c196:	f6ff aecf 	blt.w	800bf38 <__kernel_rem_pio2f+0x88>
 800c19a:	9b07      	ldr	r3, [sp, #28]
 800c19c:	46ab      	mov	fp, r5
 800c19e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c1a2:	f7f4 fd67 	bl	8000c74 <__aeabi_i2f>
 800c1a6:	f04f 0a00 	mov.w	sl, #0
 800c1aa:	f04f 0800 	mov.w	r8, #0
 800c1ae:	6028      	str	r0, [r5, #0]
 800c1b0:	9b03      	ldr	r3, [sp, #12]
 800c1b2:	459a      	cmp	sl, r3
 800c1b4:	dd07      	ble.n	800c1c6 <__kernel_rem_pio2f+0x316>
 800c1b6:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 800c1ba:	3504      	adds	r5, #4
 800c1bc:	3601      	adds	r6, #1
 800c1be:	e7e9      	b.n	800c194 <__kernel_rem_pio2f+0x2e4>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	9a08      	ldr	r2, [sp, #32]
 800c1c4:	e7d9      	b.n	800c17a <__kernel_rem_pio2f+0x2ca>
 800c1c6:	9b05      	ldr	r3, [sp, #20]
 800c1c8:	f85b 0904 	ldr.w	r0, [fp], #-4
 800c1cc:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 800c1d0:	f7f4 fda4 	bl	8000d1c <__aeabi_fmul>
 800c1d4:	4601      	mov	r1, r0
 800c1d6:	4640      	mov	r0, r8
 800c1d8:	f7f4 fc98 	bl	8000b0c <__addsf3>
 800c1dc:	f10a 0a01 	add.w	sl, sl, #1
 800c1e0:	4680      	mov	r8, r0
 800c1e2:	e7e5      	b.n	800c1b0 <__kernel_rem_pio2f+0x300>
 800c1e4:	9b06      	ldr	r3, [sp, #24]
 800c1e6:	9a02      	ldr	r2, [sp, #8]
 800c1e8:	4648      	mov	r0, r9
 800c1ea:	1a99      	subs	r1, r3, r2
 800c1ec:	f000 f8fe 	bl	800c3ec <scalbnf>
 800c1f0:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800c1f4:	4680      	mov	r8, r0
 800c1f6:	f7f4 ff43 	bl	8001080 <__aeabi_fcmpge>
 800c1fa:	b1f8      	cbz	r0, 800c23c <__kernel_rem_pio2f+0x38c>
 800c1fc:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 800c200:	4640      	mov	r0, r8
 800c202:	f7f4 fd8b 	bl	8000d1c <__aeabi_fmul>
 800c206:	f7f4 ff65 	bl	80010d4 <__aeabi_f2iz>
 800c20a:	f7f4 fd33 	bl	8000c74 <__aeabi_i2f>
 800c20e:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800c212:	4681      	mov	r9, r0
 800c214:	f7f4 fd82 	bl	8000d1c <__aeabi_fmul>
 800c218:	4601      	mov	r1, r0
 800c21a:	4640      	mov	r0, r8
 800c21c:	f7f4 fc74 	bl	8000b08 <__aeabi_fsub>
 800c220:	f7f4 ff58 	bl	80010d4 <__aeabi_f2iz>
 800c224:	ab0a      	add	r3, sp, #40	@ 0x28
 800c226:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c22a:	4648      	mov	r0, r9
 800c22c:	3401      	adds	r4, #1
 800c22e:	3708      	adds	r7, #8
 800c230:	f7f4 ff50 	bl	80010d4 <__aeabi_f2iz>
 800c234:	ab0a      	add	r3, sp, #40	@ 0x28
 800c236:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c23a:	e751      	b.n	800c0e0 <__kernel_rem_pio2f+0x230>
 800c23c:	4640      	mov	r0, r8
 800c23e:	e7f7      	b.n	800c230 <__kernel_rem_pio2f+0x380>
 800c240:	ab0a      	add	r3, sp, #40	@ 0x28
 800c242:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c246:	f7f4 fd15 	bl	8000c74 <__aeabi_i2f>
 800c24a:	4639      	mov	r1, r7
 800c24c:	f7f4 fd66 	bl	8000d1c <__aeabi_fmul>
 800c250:	4649      	mov	r1, r9
 800c252:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 800c256:	4638      	mov	r0, r7
 800c258:	f7f4 fd60 	bl	8000d1c <__aeabi_fmul>
 800c25c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c260:	4607      	mov	r7, r0
 800c262:	e748      	b.n	800c0f6 <__kernel_rem_pio2f+0x246>
 800c264:	f853 0b04 	ldr.w	r0, [r3], #4
 800c268:	f85b 1b04 	ldr.w	r1, [fp], #4
 800c26c:	9203      	str	r2, [sp, #12]
 800c26e:	9302      	str	r3, [sp, #8]
 800c270:	f7f4 fd54 	bl	8000d1c <__aeabi_fmul>
 800c274:	4601      	mov	r1, r0
 800c276:	4640      	mov	r0, r8
 800c278:	f7f4 fc48 	bl	8000b0c <__addsf3>
 800c27c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c280:	4680      	mov	r8, r0
 800c282:	f10a 0a01 	add.w	sl, sl, #1
 800c286:	9901      	ldr	r1, [sp, #4]
 800c288:	458a      	cmp	sl, r1
 800c28a:	dc01      	bgt.n	800c290 <__kernel_rem_pio2f+0x3e0>
 800c28c:	45ca      	cmp	sl, r9
 800c28e:	dde9      	ble.n	800c264 <__kernel_rem_pio2f+0x3b4>
 800c290:	ab5a      	add	r3, sp, #360	@ 0x168
 800c292:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 800c296:	f849 8ca0 	str.w	r8, [r9, #-160]
 800c29a:	3f01      	subs	r7, #1
 800c29c:	e731      	b.n	800c102 <__kernel_rem_pio2f+0x252>
 800c29e:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	dc07      	bgt.n	800c2b4 <__kernel_rem_pio2f+0x404>
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	dc4e      	bgt.n	800c346 <__kernel_rem_pio2f+0x496>
 800c2a8:	d02e      	beq.n	800c308 <__kernel_rem_pio2f+0x458>
 800c2aa:	f006 0007 	and.w	r0, r6, #7
 800c2ae:	b05b      	add	sp, #364	@ 0x16c
 800c2b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2b4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 800c2b6:	2b03      	cmp	r3, #3
 800c2b8:	d1f7      	bne.n	800c2aa <__kernel_rem_pio2f+0x3fa>
 800c2ba:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 800c2be:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 800c2c2:	46b8      	mov	r8, r7
 800c2c4:	46a2      	mov	sl, r4
 800c2c6:	f1ba 0f00 	cmp.w	sl, #0
 800c2ca:	dc49      	bgt.n	800c360 <__kernel_rem_pio2f+0x4b0>
 800c2cc:	46a1      	mov	r9, r4
 800c2ce:	f1b9 0f01 	cmp.w	r9, #1
 800c2d2:	dc60      	bgt.n	800c396 <__kernel_rem_pio2f+0x4e6>
 800c2d4:	2000      	movs	r0, #0
 800c2d6:	2c01      	cmp	r4, #1
 800c2d8:	dc76      	bgt.n	800c3c8 <__kernel_rem_pio2f+0x518>
 800c2da:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 800c2dc:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800c2de:	2d00      	cmp	r5, #0
 800c2e0:	d178      	bne.n	800c3d4 <__kernel_rem_pio2f+0x524>
 800c2e2:	9900      	ldr	r1, [sp, #0]
 800c2e4:	600a      	str	r2, [r1, #0]
 800c2e6:	460a      	mov	r2, r1
 800c2e8:	604b      	str	r3, [r1, #4]
 800c2ea:	6090      	str	r0, [r2, #8]
 800c2ec:	e7dd      	b.n	800c2aa <__kernel_rem_pio2f+0x3fa>
 800c2ee:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 800c2f2:	f7f4 fc0b 	bl	8000b0c <__addsf3>
 800c2f6:	3c01      	subs	r4, #1
 800c2f8:	2c00      	cmp	r4, #0
 800c2fa:	daf8      	bge.n	800c2ee <__kernel_rem_pio2f+0x43e>
 800c2fc:	b10d      	cbz	r5, 800c302 <__kernel_rem_pio2f+0x452>
 800c2fe:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800c302:	9b00      	ldr	r3, [sp, #0]
 800c304:	6018      	str	r0, [r3, #0]
 800c306:	e7d0      	b.n	800c2aa <__kernel_rem_pio2f+0x3fa>
 800c308:	2000      	movs	r0, #0
 800c30a:	af32      	add	r7, sp, #200	@ 0xc8
 800c30c:	e7f4      	b.n	800c2f8 <__kernel_rem_pio2f+0x448>
 800c30e:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800c312:	f7f4 fbfb 	bl	8000b0c <__addsf3>
 800c316:	f108 38ff 	add.w	r8, r8, #4294967295
 800c31a:	f1b8 0f00 	cmp.w	r8, #0
 800c31e:	daf6      	bge.n	800c30e <__kernel_rem_pio2f+0x45e>
 800c320:	b1ad      	cbz	r5, 800c34e <__kernel_rem_pio2f+0x49e>
 800c322:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 800c326:	9a00      	ldr	r2, [sp, #0]
 800c328:	4601      	mov	r1, r0
 800c32a:	6013      	str	r3, [r2, #0]
 800c32c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800c32e:	f7f4 fbeb 	bl	8000b08 <__aeabi_fsub>
 800c332:	f04f 0801 	mov.w	r8, #1
 800c336:	4544      	cmp	r4, r8
 800c338:	da0b      	bge.n	800c352 <__kernel_rem_pio2f+0x4a2>
 800c33a:	b10d      	cbz	r5, 800c340 <__kernel_rem_pio2f+0x490>
 800c33c:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800c340:	9b00      	ldr	r3, [sp, #0]
 800c342:	6058      	str	r0, [r3, #4]
 800c344:	e7b1      	b.n	800c2aa <__kernel_rem_pio2f+0x3fa>
 800c346:	46a0      	mov	r8, r4
 800c348:	2000      	movs	r0, #0
 800c34a:	af32      	add	r7, sp, #200	@ 0xc8
 800c34c:	e7e5      	b.n	800c31a <__kernel_rem_pio2f+0x46a>
 800c34e:	4603      	mov	r3, r0
 800c350:	e7e9      	b.n	800c326 <__kernel_rem_pio2f+0x476>
 800c352:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800c356:	f7f4 fbd9 	bl	8000b0c <__addsf3>
 800c35a:	f108 0801 	add.w	r8, r8, #1
 800c35e:	e7ea      	b.n	800c336 <__kernel_rem_pio2f+0x486>
 800c360:	f8d8 3000 	ldr.w	r3, [r8]
 800c364:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800c368:	4619      	mov	r1, r3
 800c36a:	4610      	mov	r0, r2
 800c36c:	9302      	str	r3, [sp, #8]
 800c36e:	9201      	str	r2, [sp, #4]
 800c370:	f7f4 fbcc 	bl	8000b0c <__addsf3>
 800c374:	9a01      	ldr	r2, [sp, #4]
 800c376:	4601      	mov	r1, r0
 800c378:	4681      	mov	r9, r0
 800c37a:	4610      	mov	r0, r2
 800c37c:	f7f4 fbc4 	bl	8000b08 <__aeabi_fsub>
 800c380:	9b02      	ldr	r3, [sp, #8]
 800c382:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c386:	4619      	mov	r1, r3
 800c388:	f7f4 fbc0 	bl	8000b0c <__addsf3>
 800c38c:	f848 0904 	str.w	r0, [r8], #-4
 800c390:	f8c8 9000 	str.w	r9, [r8]
 800c394:	e797      	b.n	800c2c6 <__kernel_rem_pio2f+0x416>
 800c396:	f857 3c04 	ldr.w	r3, [r7, #-4]
 800c39a:	f8d7 a000 	ldr.w	sl, [r7]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	4651      	mov	r1, sl
 800c3a2:	9301      	str	r3, [sp, #4]
 800c3a4:	f7f4 fbb2 	bl	8000b0c <__addsf3>
 800c3a8:	9b01      	ldr	r3, [sp, #4]
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	4680      	mov	r8, r0
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7f4 fbaa 	bl	8000b08 <__aeabi_fsub>
 800c3b4:	4651      	mov	r1, sl
 800c3b6:	f7f4 fba9 	bl	8000b0c <__addsf3>
 800c3ba:	f847 0904 	str.w	r0, [r7], #-4
 800c3be:	f109 39ff 	add.w	r9, r9, #4294967295
 800c3c2:	f8c7 8000 	str.w	r8, [r7]
 800c3c6:	e782      	b.n	800c2ce <__kernel_rem_pio2f+0x41e>
 800c3c8:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 800c3cc:	f7f4 fb9e 	bl	8000b0c <__addsf3>
 800c3d0:	3c01      	subs	r4, #1
 800c3d2:	e780      	b.n	800c2d6 <__kernel_rem_pio2f+0x426>
 800c3d4:	9900      	ldr	r1, [sp, #0]
 800c3d6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 800c3da:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c3de:	600a      	str	r2, [r1, #0]
 800c3e0:	604b      	str	r3, [r1, #4]
 800c3e2:	460a      	mov	r2, r1
 800c3e4:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800c3e8:	e77f      	b.n	800c2ea <__kernel_rem_pio2f+0x43a>
 800c3ea:	bf00      	nop

0800c3ec <scalbnf>:
 800c3ec:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 800c3f0:	b538      	push	{r3, r4, r5, lr}
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	460d      	mov	r5, r1
 800c3f6:	4604      	mov	r4, r0
 800c3f8:	d02e      	beq.n	800c458 <scalbnf+0x6c>
 800c3fa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c3fe:	d304      	bcc.n	800c40a <scalbnf+0x1e>
 800c400:	4601      	mov	r1, r0
 800c402:	f7f4 fb83 	bl	8000b0c <__addsf3>
 800c406:	4603      	mov	r3, r0
 800c408:	e026      	b.n	800c458 <scalbnf+0x6c>
 800c40a:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 800c40e:	d118      	bne.n	800c442 <scalbnf+0x56>
 800c410:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800c414:	f7f4 fc82 	bl	8000d1c <__aeabi_fmul>
 800c418:	4a17      	ldr	r2, [pc, #92]	@ (800c478 <scalbnf+0x8c>)
 800c41a:	4603      	mov	r3, r0
 800c41c:	4295      	cmp	r5, r2
 800c41e:	db0c      	blt.n	800c43a <scalbnf+0x4e>
 800c420:	4604      	mov	r4, r0
 800c422:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800c426:	3a19      	subs	r2, #25
 800c428:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c42c:	428d      	cmp	r5, r1
 800c42e:	dd0a      	ble.n	800c446 <scalbnf+0x5a>
 800c430:	4912      	ldr	r1, [pc, #72]	@ (800c47c <scalbnf+0x90>)
 800c432:	4618      	mov	r0, r3
 800c434:	f361 001e 	bfi	r0, r1, #0, #31
 800c438:	e000      	b.n	800c43c <scalbnf+0x50>
 800c43a:	4911      	ldr	r1, [pc, #68]	@ (800c480 <scalbnf+0x94>)
 800c43c:	f7f4 fc6e 	bl	8000d1c <__aeabi_fmul>
 800c440:	e7e1      	b.n	800c406 <scalbnf+0x1a>
 800c442:	0dd2      	lsrs	r2, r2, #23
 800c444:	e7f0      	b.n	800c428 <scalbnf+0x3c>
 800c446:	1951      	adds	r1, r2, r5
 800c448:	29fe      	cmp	r1, #254	@ 0xfe
 800c44a:	dcf1      	bgt.n	800c430 <scalbnf+0x44>
 800c44c:	2900      	cmp	r1, #0
 800c44e:	dd05      	ble.n	800c45c <scalbnf+0x70>
 800c450:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800c454:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 800c458:	4618      	mov	r0, r3
 800c45a:	bd38      	pop	{r3, r4, r5, pc}
 800c45c:	f111 0f16 	cmn.w	r1, #22
 800c460:	da01      	bge.n	800c466 <scalbnf+0x7a>
 800c462:	4907      	ldr	r1, [pc, #28]	@ (800c480 <scalbnf+0x94>)
 800c464:	e7e5      	b.n	800c432 <scalbnf+0x46>
 800c466:	f101 0019 	add.w	r0, r1, #25
 800c46a:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 800c46e:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 800c472:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 800c476:	e7e1      	b.n	800c43c <scalbnf+0x50>
 800c478:	ffff3cb0 	.word	0xffff3cb0
 800c47c:	7149f2ca 	.word	0x7149f2ca
 800c480:	0da24260 	.word	0x0da24260

0800c484 <floorf>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 800c48a:	3d7f      	subs	r5, #127	@ 0x7f
 800c48c:	2d16      	cmp	r5, #22
 800c48e:	4601      	mov	r1, r0
 800c490:	4604      	mov	r4, r0
 800c492:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 800c496:	dc26      	bgt.n	800c4e6 <floorf+0x62>
 800c498:	2d00      	cmp	r5, #0
 800c49a:	da0f      	bge.n	800c4bc <floorf+0x38>
 800c49c:	4917      	ldr	r1, [pc, #92]	@ (800c4fc <floorf+0x78>)
 800c49e:	f7f4 fb35 	bl	8000b0c <__addsf3>
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	f7f4 fdf6 	bl	8001094 <__aeabi_fcmpgt>
 800c4a8:	b130      	cbz	r0, 800c4b8 <floorf+0x34>
 800c4aa:	2c00      	cmp	r4, #0
 800c4ac:	da23      	bge.n	800c4f6 <floorf+0x72>
 800c4ae:	2e00      	cmp	r6, #0
 800c4b0:	4c13      	ldr	r4, [pc, #76]	@ (800c500 <floorf+0x7c>)
 800c4b2:	bf08      	it	eq
 800c4b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	e01a      	b.n	800c4f2 <floorf+0x6e>
 800c4bc:	4e11      	ldr	r6, [pc, #68]	@ (800c504 <floorf+0x80>)
 800c4be:	412e      	asrs	r6, r5
 800c4c0:	4230      	tst	r0, r6
 800c4c2:	d016      	beq.n	800c4f2 <floorf+0x6e>
 800c4c4:	490d      	ldr	r1, [pc, #52]	@ (800c4fc <floorf+0x78>)
 800c4c6:	f7f4 fb21 	bl	8000b0c <__addsf3>
 800c4ca:	2100      	movs	r1, #0
 800c4cc:	f7f4 fde2 	bl	8001094 <__aeabi_fcmpgt>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d0f1      	beq.n	800c4b8 <floorf+0x34>
 800c4d4:	2c00      	cmp	r4, #0
 800c4d6:	bfbe      	ittt	lt
 800c4d8:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 800c4dc:	412b      	asrlt	r3, r5
 800c4de:	18e4      	addlt	r4, r4, r3
 800c4e0:	ea24 0406 	bic.w	r4, r4, r6
 800c4e4:	e7e8      	b.n	800c4b8 <floorf+0x34>
 800c4e6:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800c4ea:	d302      	bcc.n	800c4f2 <floorf+0x6e>
 800c4ec:	f7f4 fb0e 	bl	8000b0c <__addsf3>
 800c4f0:	4601      	mov	r1, r0
 800c4f2:	4608      	mov	r0, r1
 800c4f4:	bd70      	pop	{r4, r5, r6, pc}
 800c4f6:	2400      	movs	r4, #0
 800c4f8:	e7de      	b.n	800c4b8 <floorf+0x34>
 800c4fa:	bf00      	nop
 800c4fc:	7149f2ca 	.word	0x7149f2ca
 800c500:	bf800000 	.word	0xbf800000
 800c504:	007fffff 	.word	0x007fffff

0800c508 <_init>:
 800c508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50a:	bf00      	nop
 800c50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c50e:	bc08      	pop	{r3}
 800c510:	469e      	mov	lr, r3
 800c512:	4770      	bx	lr

0800c514 <_fini>:
 800c514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c516:	bf00      	nop
 800c518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c51a:	bc08      	pop	{r3}
 800c51c:	469e      	mov	lr, r3
 800c51e:	4770      	bx	lr
